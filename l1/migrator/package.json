{
  "name": "elavonx",
  "displayName": "ElavonX - API Migrator",
  "description": "ðŸš€ AI-powered VS Code extension for seamless migration from Converge to Elavon payment APIs. Features intelligent code analysis, automated migration, multi-language support, and real-time validation.",
  "version": "2.0.16",
  "publisher": "elavonx",
  "icon": "icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/elavonx/migrator.git"
  },
  "homepage": "https://github.com/elavonx/migrator#readme",
  "bugs": {
    "url": "https://github.com/elavonx/migrator/issues"
  },
  "engines": {
    "vscode": "^1.85.0"
  },
  "categories": [
    "Other",
    "Snippets",
    "Formatters"
  ],
  "keywords": [
    "converge",
    "elavon",
    "migration",
    "api",
    "payment",
    "copilot"
  ],
  "activationEvents": [
    "*",
    "onCommand:elavonx.scanProject",
    "onCommand:elavonx.test"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "elavonx.scanProject",
        "title": "Scan Project for Converge Endpoints",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.migrateEndpoint",
        "title": "Migrate to Elavon",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.bulkMigrate",
        "title": "Migrate All Endpoints",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.validateMigration",
        "title": "Validate Against Elavon Sandbox",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.openCredentials",
        "title": "Configure Elavon Credentials",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.showDocumentation",
        "title": "Show Documentation",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.refreshEndpoints",
        "title": "Refresh Endpoints",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.clearCredentials",
        "title": "Clear Credentials",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.showMappingDictionary",
        "title": "Show Mapping Dictionary",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.reloadMappings",
        "title": "Reload Mappings",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.showMigrationHistory",
        "title": "Show Migration History",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.rollbackMigration",
        "title": "Rollback Migration",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.clearMigrationHistory",
        "title": "Clear Migration History",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.exportMigrationHistory",
        "title": "Export Migration History",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.importMigrationHistory",
        "title": "Import Migration History",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.showErrorLog",
        "title": "Show Error Log",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.showPerformanceMetrics",
        "title": "Show Performance Metrics",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.clearErrorLog",
        "title": "Clear Error Log",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.exportErrorLog",
        "title": "Export Error Log",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.showConfiguration",
        "title": "Show Configuration",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.resetConfiguration",
        "title": "Reset Configuration",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.exportConfiguration",
        "title": "Export Configuration",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.importConfiguration",
        "title": "Import Configuration",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.generateReport",
        "title": "Generate Migration Report",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.exportReport",
        "title": "Export Report",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.test",
        "title": "Test Extension",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.testScanPanel",
        "title": "Test Scan Panel",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.testCredentialsPanel",
        "title": "Test Credentials Panel",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.testDocumentationPanel",
        "title": "Test Documentation Panel",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.testMigrationPanel",
        "title": "Test Migration Panel",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.testReportPanel",
        "title": "Test Report Panel",
        "category": "ElavonX"
      },
      {
        "command": "elavonx.testAllPanels",
        "title": "Test All Panels",
        "category": "ElavonX"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "elavonx.migrateEndpoint",
          "when": "editorHasSelection && resourceExtname =~ /\\.(js|ts|php|py|java|cs)$/",
          "group": "converge-elavon@1"
        }
      ],
      "commandPalette": [
        {
          "command": "elavonx.scanProject"
        },
        {
          "command": "elavonx.bulkMigrate",
          "when": "elavonx.hasEndpoints"
        },
        {
          "command": "elavonx.openCredentials"
        },
        {
          "command": "elavonx.showDocumentation"
        },
        {
          "command": "elavonx.refreshEndpoints"
        },
        {
          "command": "elavonx.clearCredentials"
        },
        {
          "command": "elavonx.validateMigration"
        },
        {
          "command": "elavonx.showMappingDictionary"
        },
        {
          "command": "elavonx.reloadMappings"
        }
      ],
      "explorer/context": [
        {
          "command": "elavonx.scanProject",
          "when": "explorerResourceIsFolder",
          "group": "converge-elavon@1"
        }
      ]
    },
    "views": {
      "elavonx": [
        {
          "id": "elavonx.scanView",
          "name": "Converge Endpoints",
          "when": "elavonx.hasEndpoints"
        },
        {
          "id": "elavonx.credentialsView",
          "name": "Credentials",
          "when": "elavonx.hasCredentials"
        },
        {
          "id": "elavonx.migrationView",
          "name": "Migration",
          "when": "elavonx.hasMigrations"
        },
        {
          "id": "elavonx.reportView",
          "name": "Reports",
          "when": "elavonx.hasReports"
        }
      ],
      "explorer": [
        {
          "id": "elavonx.scanView",
          "name": "Converge Endpoints",
          "when": "elavonx.hasEndpoints"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "elavonx",
          "title": "ElavonX Migrator",
          "icon": "icon.png"
        }
      ],
      "panel": [
        {
          "id": "converge-elavon",
          "title": "ElavonX Migrator",
          "icon": "icon.png"
        }
      ]
    },
    "webviews": [
      {
        "viewType": "elavonx.scanPanel",
        "displayName": "Project Scan"
      },
      {
        "viewType": "elavonx.credentialsPanel",
        "displayName": "Credentials"
      },
      {
        "viewType": "elavonx.documentationPanel",
        "displayName": "Documentation"
      },
      {
        "viewType": "elavonx.migrationPanel",
        "displayName": "Migration"
      },
      {
        "viewType": "elavonx.reportPanel",
        "displayName": "Reports"
      }
    ],
    "configuration": {
      "title": "ElavonX Migrator",
      "properties": {
        "elavonx.scanOnStartup": {
          "type": "boolean",
          "default": false,
          "description": "Automatically scan for Converge endpoints when opening a workspace"
        },
        "elavonx.autoValidate": {
          "type": "boolean",
          "default": true,
          "description": "Automatically validate migrations against Elavon sandbox"
        },
        "elavonx.copilotTimeout": {
          "type": "number",
          "default": 30000,
          "description": "Timeout for Copilot API calls in milliseconds"
        },
        "elavonx.maxRetries": {
          "type": "number",
          "default": 3,
          "description": "Maximum number of retries for failed operations"
        },
        "elavonx.backupEnabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable automatic backup creation before migrations"
        },
        "elavonx.maxBackupsPerFile": {
          "type": "number",
          "default": 5,
          "description": "Maximum number of backups to keep per file"
        },
        "elavonx.logLevel": {
          "type": "string",
          "enum": [
            "debug",
            "info",
            "warn",
            "error",
            "critical"
          ],
          "default": "info",
          "description": "Logging level for the extension"
        },
        "elavonx.enablePerformanceMonitoring": {
          "type": "boolean",
          "default": true,
          "description": "Enable performance monitoring and metrics collection"
        },
        "elavonx.maxLogEntries": {
          "type": "number",
          "default": 5000,
          "description": "Maximum number of log entries to keep in memory"
        },
        "elavonx.maxErrorEntries": {
          "type": "number",
          "default": 1000,
          "description": "Maximum number of error entries to keep in memory"
        },
        "elavonx.autoCleanupLogs": {
          "type": "boolean",
          "default": true,
          "description": "Automatically clean up old logs to prevent memory issues"
        },
        "elavonx.cleanupInterval": {
          "type": "number",
          "default": 24,
          "description": "Hours between automatic log cleanup (0 to disable)"
        },
        "elavonx.showMigrationPreview": {
          "type": "boolean",
          "default": true,
          "description": "Show migration preview before applying changes"
        },
        "elavonx.confirmBulkMigration": {
          "type": "boolean",
          "default": true,
          "description": "Require confirmation before starting bulk migrations"
        },
        "elavonx.stopOnError": {
          "type": "boolean",
          "default": false,
          "description": "Stop bulk migration if any endpoint fails"
        },
        "elavonx.includeComments": {
          "type": "boolean",
          "default": true,
          "description": "Include migration comments in generated code"
        },
        "elavonx.preserveFormatting": {
          "type": "boolean",
          "default": true,
          "description": "Preserve original code formatting when possible"
        },
        "elavonx.customMappingFile": {
          "type": "string",
          "default": "",
          "description": "Path to custom mapping dictionary file (relative to workspace root)"
        },
        "elavonx.ignorePatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "node_modules/**",
            ".git/**",
            "dist/**",
            "build/**"
          ],
          "description": "File patterns to ignore during scanning"
        },
        "elavonx.scanFileTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "js",
            "ts",
            "jsx",
            "tsx",
            "php",
            "py",
            "java",
            "cs",
            "rb",
            "go",
            "cpp",
            "c"
          ],
          "description": "File extensions to include in scanning"
        },
        "elavonx.maxFileSize": {
          "type": "number",
          "default": 1048576,
          "description": "Maximum file size to scan in bytes (1MB default)"
        },
        "elavonx.confidenceThreshold": {
          "type": "number",
          "default": 0.7,
          "minimum": 0,
          "maximum": 1,
          "description": "Minimum confidence score for automatic migration suggestions"
        },
        "elavonx.enableTelemetry": {
          "type": "boolean",
          "default": false,
          "description": "Enable anonymous usage telemetry to help improve the extension"
        },
        "elavonx.telemetryEndpoint": {
          "type": "string",
          "default": "https://api.converge-elavon-migrator.com/telemetry",
          "description": "Telemetry endpoint URL (only used if telemetry is enabled)"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "webpack --mode production",
    "watch": "webpack --mode development --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "jest",
    "test:unit": "jest",
    "build": "node scripts/build.js",
    "build:patch": "node scripts/build.js patch",
    "build:minor": "node scripts/build.js minor",
    "build:major": "node scripts/build.js major",
    "build:no-install": "node scripts/build.js patch --no-install",
    "test:coverage": "jest --coverage"
  },
  "devDependencies": {
    "@types/jest": "^29.5.8",
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.10.0",
    "@types/uuid": "^10.0.0",
    "@types/vscode": "^1.85.0",
    "@typescript-eslint/eslint-plugin": "^6.13.1",
    "@typescript-eslint/parser": "^6.13.1",
    "@vscode/test-electron": "^2.3.8",
    "esbuild-loader": "^4.0.2",
    "eslint": "^8.54.0",
    "jest": "^29.7.0",
    "mocha": "^10.2.0",
    "ts-jest": "^29.1.1",
    "ts-loader": "^9.5.1",
    "typescript": "^5.3.2",
    "webpack": "^5.89.0",
    "webpack-cli": "^5.1.4"
  },
  "dependencies": {
    "@typescript-eslint/parser": "^6.13.1",
    "axios": "^1.6.2",
    "glob": "^10.3.10",
    "monaco-editor": "^0.44.0",
    "uuid": "^9.0.1",
    "vscode-languageclient": "^9.0.1"
  }
}
