{
  "openapi": "3.0.2",
  "info": {
    "version": "2025-07-17",
    "title": "Elavon Payment Gateway API",
    "description": "[Elavon Payment Gateway Helpdesk](overview#support)\n\n# Overview\n\nThis HTTP REST API is available for developers integrating with EPG for eCommerce.\n\nThe EPG API follows standard HTTP authentication and response codes and you can use it with most HTTP clients.\n\nThe EPG API tries to be precise with its responses but lenient with its requests. EPG defaults to case insensitivity where case is irrelevant and will use coercion to try resolving unexpected types.\n\nThe system only accepts JSON request bodies and returns UTF-8 encoded JSON response bodies pretty-printed for readability and with most fields included for discoverability.\n\nThe system supports HATEOAS and provides references between resources as hypermedia links. If needed, the system can accept resource IDs in requests instead.\n\nWe take security seriously. Communication with EPG must be over secure HTTP using at least TLS 1.2. EPG suppresses sensitive fields on responses.\n\nPCI compliance is vital, and EPG provides options that allow integrators to reduce their own PCI scope.\n\n## Credentials\n\nTo get a user ID and password, integrators must send a primary email. Elavon sends an email that contains a link to the merchant UI as well as instructions on how to establish a password.\n\nAt the moment, Elavon onboards integrators into the EPG system manually, but the team is working on making this a more automated process in a future release.\n\n## Authentication\n\nEPG's API authenticates using the HTTP BASIC method over secure HTTP using at least Transport Layer Security (TLS) 1.2.\n\nIntegrators receive a pair of API keys: one public and one secret. Elavon manages and provides API keys - future updates will add self-management as an option.\n\nIt's safe to include your public key in client-side code. Only [hosted card](#tag/Hosted-Cards) resource operations authenticate using the public API key. Note that some fields will be suppressed when using a public API key. Check the [hosted card resource](#tag/Hosted-Cards) for details. Their format, when used in actual scenarios, start with 'pk_'. Example:\n\n```\npk_Yp6XYXCwkYjWFj9ByrhbDQD3\n```\n\nNever expose your secret key in client-side code. Only include your secret key in requests sent from a secure server. The API accepts the secret key for all requests. Their format, when used in actual scenarios, start with 'sk_'. Example:\n\n```\nsk_GWhvCdXCx6FWYhDqCRWVwtRk\n```\n\nElavon provides integrators with a unique merchant alias for each merchant they're acting on behalf of.\n\n## Errors\n\nError responses generally have a standard JSON response. A failures array provides more information to help the integrator diagnose the issue.\n\n4xx status codes show a problem with the request. Avoid retrying the request before addressing the problem. The following table shows some common failure codes and the causes that prompts them.\n\n| Failure Code         | Status Code | Failure Description |\n|----------------------|-------------|---------------------|\n| badRequest           | 400         | The request is invalid; correct all issues before resending. |\n| unauthorized         | 401         | A valid API key is required. |\n| forbidden            | 403         | Public API keys may only be used to create and retrieve hosted cards. |\n| notFound             | 404         | The requested resource does not exist. |\n| methodNotAllowed     | 405         | The given method may not be used here. Note that the X-HTTP-Method-Override header can only be used to override POST with either PATCH or DELETE |\n| notAcceptable        | 406         | The Accept request header must specify 'application/json;charset=UTF-8'; the Accept-Version request header if present, must reference a valid API version. |\n| conflict             | 409         | This request does not match the original, or the original request is still processing. |\n| lengthRequired       | 411         | Content-Length must be specified for this request. |\n| payloadTooLarge      | 413         | The request payload is too large. |\n| unsupportedMediaType | 415         | The Content-Type request header must specify 'application/json'|\n| tooManyRequests      | 429         | Too many requests have been received too quickly for this API key. |\n\n5xx status codes show an unexpected server problem. EPG may be unable to return a standard error response for these.\n\n## Versioning\n\nThe current version is \"1\" and future versions will always be integral numbers.\nThe client should specify which version they want using an \"Accept-Version\" request header. If not specified, EPG will assume the current version, but the response will include a \"Warning\" response header.\nThe response will always include a \"Version\" header to show the version used.\nExample:\n\n```\nAccept-Version: 1\n```\n\nElavon will avoid releasing versions with breaking changes. We will release some backwards compatible fixes without revising the version. If you are integrating with EPG, keep an eye out for some of the following changes:\n\n* New resources\n* New optional request query parameters and/or headers\n* New optional fields (Elavon may generate these randomly to ensure compliance)\n* Field order changes (while generally consistent, you should consider the order undefined)\n* New values for enumerated fields\n* New HTTP error codes\n* Changes to the format of IDs\n\n## Pagination\n\nWhen listing resources, the API returns a standard PagedList.\nThis resource includes links to the first and next pages in the list.\nIf next page is null, then there are no more items.\nThe default number of items for a page may vary by resource.\nTo override the default, use the \"limit\" query parameter. By default, the limit is 10. The maximum limit for a pagination object is 200 entries.\nThe \"items\" array contains the resources for the page.\n\nSee the example in Collection Filtering, where the filter \"limit=2\" indicates a limit of 2.\n\n## Collection Filtering\n\nCertain resources have the option to apply filters.\nTo specify a filter, provide one or more query parameters where the name starts with \"filter\" and the value is \"fieldName_operator_value\".\nCheck the [operations](#section/Overview/Operations) to see which fields support filtering and what operators each field supports.\nWhen using more than one filter, the resource must match every one of them.\n\nPossible operators include:\n* eq (equals)\n* ne (not equals)\n* gt (greater than)\n* ge (greater than or equal)\n* lt (less than)\n* le (less than or equal)\n* like\n* in\n* contains\n* is\n* isnot\n\nWhen filtering a field of type \"URL resource\", the value should be an ID (e.g. 6xxFwvM8BqmM6T6DcF3DyTB3).\n\nWhen filtering a field of type \"timestamp string\", format the value as an [RFC3339 Date/Time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) in the UTC time zone.\nThe date/time separators, time section, seconds, milliseconds and Zulu time zone designator are all optional.\n\nExample:\n\n```sh\ncurl -X GET \\\n  \"https://api.eu.convergepay.com/transactions?filter=type_eq_refund&filter=createdAt_gt_2020&limit=2\" \\\n  -u 963myjmWbtt2DQgVpGyxcdW9:sk_GWhvCdXCx6FWYhDqCRWVwtRk \\\n  -H 'Accept-Version: 4' \\\n```\n\nThe previous example lists transactions via GET {endpoint}/transactions to retrieve all transactions created after the start of 2020.\n\nThe following sections support filters:\n\n* [Retrieve Accounts](#operation/RetrieveAccounts)\n* [Retrieve Payment Links](#operation/RetrievePaymentLinks)\n* [Retrieve Payment Session](#operation/RetrievePaymentSession)\n* [Retrieve Transactions](#operation/RetrieveTransactions)\n* [Retrieve Notifications](#operation/RetrieveNotifications)\n* [Retrieve Shoppers](#operation/RetrieveShoppers)\n\n## Values\n\n**Resource ID**\n\n<!-- Is this really necessary? Any updates to resource ID's like this should probably result in a version update and list the changes in the change log. -->\n\nA unique string assigned as an identifier to individual resources. Each resource ID omits vowels to avoid confusing characters (O vs 0, for example).\nTreat Resource IDs as opaque strings with a 256 character limit when storing them.\n\n**Resource URL**\n\nA URL to an endpoint that will respond with the contents of an individual resource instance.\nUnder each resource, a dropdown menu displays the available endpoints.\n\n**Timestamps**\n\nTimestamps use [RFC3339 Date/Time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) format with the UTC time zone (e.g. \"2018-02-01T05:10:20.152Z\").\n\n**Currency**\n\nEPG represents currency amounts as strings using the natural or base units of the currency.\nA period is the decimal separator when the value needs one (e.g. 99,95€ would be \"99.95\").\n\n## Custom Reference / Custom Fields\n\nSome resources accept integrator defined arbitrary custom fields.\nEPG does not use these fields for any operations. The API stores these fields with the associated resource and returns them when you request the resource.\n\nCustom field names and values must not exceed 64 and 1024 characters, respectively.\n\nAs integrators have their own resources, these should be identified on the integrator side and only optionally provided to Elavon for cross-referencing purposes.\n\n## Operations\n\nEach resource will have an ID that identifies it within a resource collection.\n\nEPG uses commonly accepted HTTP methods to perform standard CRUD operations on resources (where allowed) using consistent resource paths.\n\n| Operation | HTTP Request                      | Successful Status Code |\n|-----------|-----------------------------------|------------------------|\n| Create    | POST {resource-collection}        | 201 Created            |\n| Retrieve  | GET {resource-collection}/{id}    | 200 OK                 |\n| Retrieve  | GET {resource-collection}         | 200 OK                 |\n| Update    | POST {resource-collection}/{id}   | 200 OK                 |\n| Delete    | DELETE {resource-collection}/{id} | 204 No Content         |\n\nCreate operations will return the created resource.\n\n### HTTP Success vs. Transaction Success\n\nNote that when creating and authorizing a transaction, EPG returns a 201 to show the transaction request processed, even if the transaction itself was declined. When creating transactions, use the `state` property of the Transaction to check whether EPG authorized or declined the transaction. If the transaction declined, the `failures` property provides an array of causes.\n\n### Deleting Resources\n\nIf the DELETE method is not allowed from the client, make a POST request instead with the optional request header \"X-HTTP-Method-Override: DELETE\".\n\nThe request for an update operation should only include those fields that have changed. To remove a field set its value to null.\n\n### CORS\n\n**Only** hosted card operations support Cross-Origin Resource Sharing (CORS) requests from a browser. Initiate all\n  other operations from a secure server.\n\n| Resources            | Create                                           | Retrieve                                          | Update                                   | List                                   | Delete                   |\n|----------------------|--------------------------------------------------|---------------------------------------------------|-----------------------|------------------|--------------------------------------|\n| Merchants            |                                                  | [GET /merchants/{id}](#operation/RetrieveMerchant)|                                          |[GET /merchants](#operation/RetrieveMerchants)|\n| Processor Accounts   |                                                  | [GET /processor-accounts/{id}](#operation/RetrieveProcessorAccount) |                        |                                        |\n| Terminals            |                                                  | [GET /terminals/{id}](#operation/RetrieveTerminal)<br/>[GET /terminals/{id}/provisioning-codes](#operation/RetrieveProvisioningCode) |                        |[GET /terminals](#operation/RetrieveTerminals)<br/>[GET /terminals/{id}/emv-keys](#operation/RetrieveEmvKeys) |                                        |    \n| Orders               | [POST /orders](#operation/CreateOrder)           | [GET /orders/{id}](#operation/RetrieveOrder)      | [POST /orders/{id}](#operation/UpdateOrder) | [GET /orders](#operation/RetrieveOrders)|\n| Payment Links        | [POST /payment-links](#operation/CreatePaymentLink)| [GET /payment-links/{id}](#operation/RetrievePaymentLink)| [POST /payment-links/{id}](#operation/UpdatePaymentLink)| [GET /payment-links](#operation/RetrievePaymentLinks)  |\n| Payment Link Events  | [POST /payment-link-events](#operation/CreatePaymentLinkEvent)| [GET /payment-link-events/{id}](#operation/RetrievePaymentLinkEvent)|                                       | [GET /payment-link-events](#operation/RetrievePaymentLinkEvents)  |\n| Payment Sessions     | [POST /payment-sessions](#operation/CreatePaymentSession)| [GET /payment-sessions/{id}](#operation/RetrievePaymentSession)                      |                                        |                                                         |\n| Payment Method Links        | [POST /payment-method-links](#operation/CreatePaymentMethodLink)| [GET /payment-method-links/{id}](#operation/RetrievePaymentMethodLink)| [POST /payment-method-links/{id}](#operation/UpdatePaymentMethodLink)| [GET /payment-method-links](#operation/RetrievePaymentMethodLinks)  |\n| Payment Method Sessions     | [POST /payment-method-sessions](#operation/CreatePaymentMethodSession)| [GET /payment-method-sessions/{id}](#operation/RetrievePaymentMethodSession)| [POST /payment-method-sessions/{id}](#operation/UpdatePaymentMethodSession) | [GET /payment-method-sessions](#operation/RetrievePaymentMethodSessions) |\n| Apple Pay Payment Sessions | [POST /apple-pay-payment-sessions](#operation/CreateApplePayPaymentSession)|                       |                                        |                                                         |\n| Hosted Cards         | [POST /hosted-cards](#operation/CreateHostedCard)| [GET /hosted-cards/{id}](#operation/RetrieveHostedCard) | [POST /hosted-cards/{id}](#operation/UpdateHostedCard)|                 |\n| Hosted ACH Payments  | [POST /hosted-ach-payments](#operation/CreateHostedAchPayment)| [GET /hosted-ach-payments/{id}](#operation/RetrieveHostedAchPayment) |                 |                 |    \n| HsmCard              | [POST /hsm-cards](#operation/CreateHsmCard)| [GET /hsm-cards/{id}](#operation/RetrieveHsmCard) |                                          |                 |\n| Forex Advices        | [POST /forex-advices](#operation/CreateForexAdvice)| [GET /forex-advices/{id}](#operation/RetrieveForexAdvice)|                            |                                         |                     |\n| Transactions         | [POST /transactions](#operation/CreateTransaction)<br/>[POST /transactions/{id}/email-receipt-requests](#operation/CreateEmailReceiptRequest) | [GET /transactions/{id}](#operation/RetrieveTransaction)| [POST /transactions/{id}](#operation/UpdateTransaction)| [GET /transactions](#operation/RetrieveTransactions)   |\n| Apple Pay Payments   | [POST /apple-pay-payments](#operation/CreateApplePayPayment)| [GET /apple-pay-payments/{id}](#operation/RetrieveApplePayPayment)|                                        |                                        |\n| Google Pay Payments  | [POST /google-pay-payments](#operation/CreateGooglePayPayment)| [GET /google-pay-payments/{id}](#operation/RetrieveGooglePayPayment)|                                        |                                        |\n| Paze Payments        | [POST /paze-payments](#operation/CreatePazePayPayment)| [GET /paze-payments/{id}](#operation/RetrievePazePayPayment)|                                        |                                        |\n| Surcharge Advices    | [POST /surcharge-advices](#operation/CreateSurchargeAdvice)| [GET /surcharge-advices/{id}](#operation/RetrieveSurchargeAdvice)|                                        |                                        |\n| Refund Surcharge Advices  | [POST /refund-surcharge-advices](#operation/CreateRefundSurchargeAdvice)| [GET /refund-surcharge-advices/{id}](#operation/RetrieveRefundSurchargeAdvice)|                                        |                                        |\n| Batches              |                                                  | [GET /batches/{id}](#operation/RetrieveBatch)     |                                          | [GET /batches](#operation/RetrieveBatches)|\n| Shoppers             | [POST /shoppers](#operation/CreateShopper)        | [GET /shoppers/{id}](#operation/RetrieveShopper)<br>[GET /shoppers/{id}/storedCard](#operation/RetrieveShoppersStoredCards)| [POST/shoppers/{id}](#operation/UpdateShopper)| [GET /shoppers](#operation/RetrieveShoppers) | [DELETE /shoppers/{id}](#operation/DeleteShopper) |\n| Stored Cards         | [POST /stored-cards](#operation/CreateStoredCard) | [GET /stored-cards/{id}](#operation/RetrieveStoredCard) | [POST /stored-cards/{id)](#operation/UpdateStoredCard)|            | [DELETE /stored-cards/{id}](#operation/DeleteStoredCard)\n| Stored ACH Payments  | [POST /stored-ach-payments](#operation/CreateStoredAchPayment) | [GET /stored-ach-payments/{id}](#operation/RetrieveStoredAchPayment) | [POST /stored-ach-payments/{id)](#operation/UpdateStoredAchPayment)|            | [DELETE /stored-ach-payments/{id}](#operation/DeleteStoredAchPayment)\n| Plans                | [POST /plans](#operation/CreatePlan)              | [GET /plans/{id}](#operation/RetrievePlan)       | [POST /plans/{id}](#operation/UpdatePlan)| [GET /plans](#operation/RetrievePlans) | [DELETE /plans/{id}](#operation/DeletePlan)\n| Subscriptions        | [POST /subscriptions](#operation/CreateSubscription) | [GET /subscriptions/{id}](#operation/RetrieveSubscription)| [POST /subscriptions/{id}](#operation/UpdateSubscription)| [GET /subscriptions](#operation/RetrieveSubscription)\n| Notifications        |                                                   | [GET /notifications/{id}](#operation/RetrieveNotification) |                                | [GET /notifications](#operation/RetrieveNotifications)|\n| Total Adjustments    | [POST /total-adjustments](#operation/CreateTotalAdjustment) | [GET /total-adjustments/{id}](#operation/RetrieveTotalAdjustment) |  | [GET transactions/{id}/total-adjustments](#operation/RetrieveTotalAdjustments) |\n\n## Endpoint Health Check\n\nTo easily check if the API endpoint is live, simply send an unauthenticated GET request on the /health path. A 200 OK response with no content indicates a healthy API endpoint.\n\n```\nGET {{API Endpoint}}/health\n```\n\n# Getting Started\n\nTo learn more, read other EPG documentation:\n* [Integration Guide](overview#getting-started) - helps you integrate with EPG and understand the API\n\n# Changelog\n\n## 2025-07-17\n\n* __Resources__\n\n  Added the following resources: [HostedAchPayment](#tag/Hosted-ACH-Payments), [StoredAchPayment](#tag/Stored-ACH-Payments), and [TotalAdjustment](#tag/Total-Adjustments)\n\n  Updated the following resources:\n\n  - [Batches](#tag/Batches) - Added ability to filter batches.\n  - [Forex Advices](#tag/Forex-Advices) - New field: rateProviderName.\n  - [HSM Cards](#tag/Hsm-Cards) - New field: deviceInteraction.\n  - [Payment Sessions](#tag/Payment-Sessions) - New fields:  hostedAchPayment, storedAchPayment, and tip.\n  - [Processor Accounts](#tag/Processor-Accounts) - New fields: debitSteering, pinlessDebit, and isStandaloneRefundEnabled.\n  - [Shoppers](#tag/Shoppers) - New field: defaultStoredAchPayment.\n  - [Subscription](#tag/Subscriptions) - New field: storedAchPayment.\n  - [Surcharge Advice](#tag/Surcharge-Advices) - New field: shopperInteraction.\n  - [Transaction](#tag/Transactions) - New fields: achPayment, hostedAchPayment, storedAchPayment, rateProviderName, purchaserReference, marketSegment, isTotalAdjustable, and tip.\n\n* __Types__\n\n  Added the following types: AchPayment, DebitSteering, PinlessDebit, PinlessDebitCardScheme\n\n* __Enums__\n\n  Added the following enums:  AchAccountType (savingsPersonal, checkingPersonal, checkingBusiness) and DebitSteeringPreference (none, global, usCommonDebit)\n\n  Updated the following enums:\n\n  - EventType - New values: totalAdjustmentAuthorized, totalAdjustmentDeclined, transactionTotalAdjustment\n  - MarketSegment - New value: restaurant\n  - PaymentMethod - New value: ACH\n  - PaymentMethodOrigin: New values: ACH, Unknown wallet\n  - ReourceType - New value: totalAdjustment\n\n* Typographical fixes.\n\n## 2025-05-29\n\n* __Resources__\n\n  Updated the following resources:\n\n  - [Terminal](#tag/Terminals) - New fields: provisionedAt and transactedAt.\n\n## 2025-03-15\n\n* __Resources__\n\n  Added the following resources:\n\n  - PaymentMethodLink\n  - PaymentMethodSession\n\n  Updated the following resources:\n\n  - [Merchant](#tag/Merchants) - Added ability to list merchants.\n  - [Payment Links](#tag/Payment-Links) - New fields: useStoredPaymentMethod and status.\n  - [Payment Sessions](#tag/Payment-Sessions) - New fields: url and useStoredPaymentMethod.\n  - [Stored Cards](#tag/Stored-Cards) - New fields:  paymentMethodLink and paymentMethodSession.\n  - [Surcharge Advices](#tag/Forex-Advices) - New field: hsmCard.\n  - [Transactions](#tag/Transactions) - New fields: processorBatchReference, invoiceNumber, and shipppingDate.\n\n* __Types__\n\n  Deprecated threeDSecureV1.\n\n  Updated the following types:\n\n  - ThreeDSecure - Removed transactionId.\n  - VerificationResults - Removed threeDSecureV1.\n\n* __Enums__\n\n  Added PaymentLinkStatus.\n\n  Updated TransactionAdvice - added consumerMultiUseVirtualCard.\n\nAdded [Endpoint Health Check](#section/Overview/Endpoint-Health-Check).\n\n## 2025-02-04\n\n* __Filters__\n  \n  Support for like, in, contains, is, and isnot operators.\n  \n  Added new filters when retrieving the resources below.\n\n  - [Accounts](#tag/Accounts) - processorAccounts_contains_id\n  - [Payment Links](#tag/Payment-Links) - customReference_eq_string\n  - [Shoppers](#tag/Shoppers) - customReference_eq_string\n  - [Transactions](#tag/Transactions) - paymentGroup_eq_id, terminal_eq_id, description_eq|like_string, total.amount_eq|ge|gt|le|lt_amount, card.holderName_eq|like_string, salesTax.amount_eq|ge|gt|le|lt_amount, tip.amount_eq|ge|gt|le|lt_amount, card.scheme_eq_string, paymentMethod_eq_string, paymentMethodOrigin_eq_string, createdBy_eq_string, state_in_string, parentTransaction_eq|is|isnot_id, doCapture_eq_boolean\n\n## 2024-11-06\n\n* __Resources__\n\n  Added the following resources:\n\n  - [Paze Payments](#tag/Paze-Payments)\n  - [Terminals](#tag/Terminals)\n  - [Hsm Cards](#tag/Hsm-Cards)\n  - [Email Receipt Request](#tag/Transactions/operation/CreateEmailReceiptRequest)\n\n  Updated the following resources:\n\n  - [Forex Advices](#tag/Forex-Advices) - New field: hsmCard.\n  - [Hosted Cards](#tag/Hosted-Cards) - Deprecated: threeDSecureV1.\n  - [Merchant](#tag/Merchants) - New field: regions.\n  - [Payment Sessions](#tag/Payment-Sessions) - New fields: pazePayment and doReset.\n  - [Processor Accounts](#tag/Processor-Accounts) - New fields: marketSegment, region, languageTag, idDccEnabled, isMccEnabled, surcharging, and fieldPolicies.\n  - [Stored Cards](#tag/Stored-Cards) - New fields:  shopperInteraction and credentialOnFileType.\n  - [Surcharge Advices](#tag/Forex-Advices) - New field: hsmCard.\n  - [Transactions](#tag/Transactions) - New fields: processorDirective, terminal, hsmCard, deviceInteraction, pointOfInteraction, signature, partialAuthorization, and pazePayment.\n\n* __Types__\n\n  Added the following types:\n  \n  - DeviceInteraction\n  - EncryptedData\n  - Emv\n  - EmvKey\n  - EmvKeys\n  - PinEncryptedData\n  - PointOfInteraction\n  - ProcessorAccountFieldPolicies\n  - ProcessorAccountTransactionFieldPolicies\n  - ProcessorAccountTransactionPostalOrSecurityCodePolicies\n  - PartialAuthorization\n  - ProvisioningCode\n  - SalesTaxEntry\n  - Signature\n\n  Updated the following type:\n  \n  - VerificationResults - Deprecated: threeDSecureV1.\n  \n  Deprecated the following type:\n  \n  - ThreeDSecureV1\n\n## 2024-05-22\n\n* __Resources__\n\n  Added the following resources:\n\n  - [Refund Surcharge Advices](#tag/Refund-Surcharge-Advices)\n  - [Surcharge Advices](#tag/Surcharge-Advices)\n\n  Updated the following resources:\n\n  - [Payment Sessions](#tag/Payment-Sessions) - Added surchargeAdvice as a new field.\n  - [Transactions](#tag/Transactions) - Added refundSurchargeAdvice, surcharge, and surchargeAdvice as new fields.\n\n* __Types__\n\n  Added the following type:\n  - Surcharge\n\n## 2024-03-20\n\n  Updated the following resources:\n\n  - [Accounts](#tag/Accounts) - Added logoUrl to identify the URL of the merchant's logo.\n  - [Forex Advices](#tag/Forex-Advices) - Added hostedCard to allow hosted card support.\n  - [Payment Sessions](#tag/Payment-Sessions) - Added allowedPaymentMethods and allowedPaymentMethodOrigins to specify the payment methods and origins allowed to be shown in the hosted payments page.\n\n## 2023-09-26\n\n* __Resources__\n\n  Updated the following resources:\n\n  - [Payment Sessions](#tag/Payment-Sessions) - Added blik as a new field.\n  - [Processor Accounts](#tag/Processor-Accounts) - Added supportedPaymentMethods and supportedPaymentMethodOrigins as new fields.    \n  - [Transactions](#tag/Transactions) - Added blik and refundableUntil as new fields.\n\n* __Types__\n\n  Added Blik as a new type.\n  \n  Updated the following types:\n\n  - PanToken - Added cardExpirationMonth and cardExpirationYear.\n  - PaymentMethod - Added BLIK.\n  - PaymentMethodOrigin - Added BLIK.\n  - TransactionState - Added authorizationPending.   \n\n## 2023-06-20\n\n* __Resources__\n\n  Added the following resources:\n\n  - [Apple Pay Payment Sessions](#tag/Apple-Pay-Payment-Sessions)\n  - [Apple Pay Payments](#tag/Apple-Pay-Payments)\n  - [Google Pay Payments](#tag/Google-Pay-Payments)\n\n  Updated the following resources:\n\n  - [Hosted Cards](#tag/Hosted-Cards) - Deprecated threeDSecureV1 and returns a validation error if provided.\n  - [Payment Links](#tag/Payment-Links) - returnUrl can now be used.\n  - [Payment Sessions](#tag/Payment-Sessions)\n    - Added applePayPayment, googlePayPayment as new fields.\n    - originUrl now allows multiple space-delimited URLs.\n  - [Transactions](#tag/Transactions) - Added applePayPayment, googlePayPayment, authorizationExpiresAt, paymentMethod, and paymentMethodOrigin as new fields.\n\n* __Types__\n\n  Updated the following types:\n  - Card - Added paymentAccountReference.\n  - CredentialOnFileType\n    - Added subscription, unscheduledCardholderInitiated, and unscheduledMerchantInitiated\n    - Deprecated initial and unscheduled.\n  - VerificationResults - Added cryptogramSecurity.\n\n## 2023-02-22\n\n* __New Resource__\n\n  - [Payment Link Events](#tag/Payment-Link-Events) - A payment link event is automatically created by the system when certain actions occur concerning a payment link. Examples are transactions made from a payment link or email reminders sent to the customers.\n\n## 2022-07-29\n\n* __Filters__\n\n  Added the following filters when retrieving the resources below.\n\n  - [Notifications](#tag/Notifications) - createdAt_ge|gt|le|lt_timestamp\n  - [Payment Links](#tag/Payment-Links) - account_eq_id\n  - [Payment Sessions](#tag/Payment-Sessions) - customReference_eq_string, paymentLink_eq_id\n  - [Transactions](#tag/Transactions) - customReference_eq_string, paymentLink_eq_id\n\n## 2021-11-02\n\n* __[Subscriptions](#tag/Subscriptions)__\n\n  Added doSendReceipt flag in the Subscriptions resource that controls whether an email receipt will be sent for each transaction generated from that subscription.\n\n* __[Payment Sessions](#tag/Payment-Sessions)__\n\n  Enabled configuration of expiresAt flag in the Payment Sessions resource.\n\n## 2021-06-01\n\n* __[Accounts](#tag/Accounts)__\n\n  Accounts enable the configuration of features across resources\n\n  Accounts are supported on these resources\n  - [Batches](#tag/Batches)\n  - [PaymentSessions](#tag/Payment-Sessions)\n  - [PaymentLinks](#tag/Payment-Links)\n  - [Subscriptions](#tag/Subscriptions)\n  - [Transactions](#tag/Transactions)\n\n* __[Plan Lists](#tag/Plan-Lists)__\n\n  Plans are assignable to Plan Lists\n\n* __[PAN Tokens](#tag/Pan-Tokens)__\n\n  A PAN Token can be created from a Personal Account Number\n\n  PAN Tokens are accepted as an input instead of a PAN (and returned as an output) on the Card object for the following resources:\n  - [Stored Card](#tag/Stored-Cards)\n  - [Transaction](#tag/Transactions)\n  - [Forex Advice](#tag/Forex-Advices)\n\n* __\"Authorise Only\" Transactions__\n\n  [Payment Link](#tag/Payment-Links) transactions can now be set to \"Authorise Only\" using the new doCapture property\n\n  [Payment Session](#tag/Payment-Sessions) transactions can now be set to \"Authorise Only\" using the new doCapture property\n"
  },
  "servers": [
    {
      "url": "https://uat.api.converge.eu.elavonaws.com",
      "description": "EPG SandBox"
    },
    {
      "url": "https://api.eu.convergepay.com",
      "description": "EPG Production"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Resources",
      "tags": [
        "Merchants",
        "Processor Accounts",
        "Terminals",
        "Accounts",
        "Plan Lists",
        "Orders",
        "Payment Links",
        "Payment Link Events",
        "Payment Sessions",
        "Payment Method Links",
        "Payment Method Sessions",
        "Apple Pay Payment Sessions",
        "Total Adjustments",
        "Hosted Cards",
        "Hosted ACH Payments",
        "Hsm Cards",
        "Forex Advices",
        "Transactions",
        "Apple Pay Payments",
        "Google Pay Payments",
        "Paze Payments",
        "Surcharge Advices",
        "Refund Surcharge Advices",
        "Batches",
        "Shoppers",
        "Stored Cards",
        "Stored ACH Payments",
        "Plans",
        "Subscriptions",
        "Notifications"
      ]
    },
    {
      "name": "Other",
      "tags": [
        "Pan Tokens"
      ]
    }
  ],
  "tags": [
    {
      "name": "Batches",
      "description": "Authorized payments awaiting settlement.\n\nElavon Payment Gateway clusters captured transactions into a batch and submits them together for settlement and funding at the end of the day.\n"
    },
    {
      "name": "Hosted Cards",
      "description": "Hosted cards are single-use cards. This captures all payment details so you can reference them in a transaction without having your server handle card details.\n\nEach hosted card is valid for 30 minutes after creation.\n\nYou can use this resource to create a transaction using the [Transactions](#tag/Transactions) endpoint.\n"
    },
    {
      "name": "Hsm Cards",
      "description": "The HsmCard resource is used to hold terminal card data so the data is only needed to be decrypted once. The resource expires as soon as it is used in a transaction or in approximately 30 minutes. By using this resource, multiple calls can be made to the server during terminal operations without having to decrypt the data again.\n"
    },
    {
      "name": "Stored Cards",
      "description": "Persistent card information stored by Elavon Payment Gateway about one of a Merchant's Shopper. This information must be the child of a [Shopper resource](#tag/Shoppers).\n"
    },
    {
      "name": "Merchants",
      "description": "Information on a Merchant's account.\n\nThis is a read-only resource.\n"
    },
    {
      "name": "Orders",
      "description": "An order provides information on how much the shopper will have to pay at checkout. Orders also provide options to track:\n\n- What a shopper is paying for\n- What the shipping address is\n- The shopper's email address\n\n## Orders and Hosted Payments Pages\n\nInitiating a [Payment Session](#tag/Payment-Sessions) requires an order to inform how much the payment session should charge to the customer.\n\n## Hosted Payments Data Capture\n\nElavon Payment Gateway captures the `shipTo` and `shopperEmail` properties of a submitted Order. If the Hosted Payments Form is set to display Shipping Address fields to the customer, these fields will automatically populate with the values in the `shipTo` property.\n"
    },
    {
      "name": "Payment Sessions",
      "description": "A payment session drives the way a transaction will process and sets the presentation for a customer's checkout.\n\n## Creating a Payment Session\n\nTo create a payment session, you will need to have an [Order](#tag/Orders) resource created ahead of time. This Order will inform the payment session on the amount to charge the customer and can pass information on the customer's shipping address to pre-populate fields in the hosted payment form.\n\nSome of the data passed during creation are used to control the payment session behavior. Other fields are updated after the payment session has been created to collect various data needed to create the transaction while the HPP is being used by the customer.\n\nThe following fields can be potentially set after creating the payment session as the customer makes various selections:\n- expiresAt\n- paymentLink\n- forexAdvice\n- surchargeAdvice\n- transaction\n- hostedCard\n- storedCard\n- googlePayPayment\n- applePayPayment\n- pazePayment\n- blik\n- shopper\n- debtorAccount\n- threeDSecure\n- shopperEmailAddress\n- billTo\n- shipTo\n- shopperLanguageTag\n- doReset\n- createdBy\n\nHowever, it is unlikely that these fields need to be set when creating the payment session.\n\n## Checkout Experience\n\nThe payment session sets which display mode a customer will view while checking out.\n\nAfter creating a payment session, you will need to call the payment session using the lightbox script or redirect the customer to the URL of your hosted payments form. For more information on how to do this, refer to the [Hosted Payments Redirect](hosted-payments-redirect) page.\n\nDepending on the information passed when creating the payment session, the checkout page your customer sees will pre-fill billing and shipping address fields.\n\nFor more information on how the payment session displays to the customer, refer to the [Hosted Payment Page Integration Guide](hosted-payments-overview).\n"
    },
    {
      "name": "Payment Method Links",
      "description": "A payment link contains a URL that may be provided to shoppers in order to take payment using the hosted payment page.\n"
    },
    {
      "name": "Payment Method Sessions",
      "description": "A payment session securely collects payment details from the shopper using our hosted payment page and sends them directly to our platform, allowing the merchant to minimize PCI DSS scope.\n"
    },
    {
      "name": "Apple Pay Payment Sessions",
      "description": "This resource contains the elements necessary for initiating a transaction with Apple. The Apple Pay payment session is returned after validation of the supplied fields.\n"
    },
    {
      "name": "Processor Accounts",
      "description": "Merchant profiles can have more than one processor account. At the moment, Elavon Payment Gateway currently supports one at a time. Each processor account tracks and processes transactions separately.\n\nMultiple processor accounts are a good solution for merchants with the following use cases.\n\n  - Merchants with multiple stores may have a processor account for each store.\n  - Merchants tracking ecommerce separately from card-present purchases.\n\nThis resource is read only.\n"
    },
    {
      "name": "Transactions",
      "description": "Payment transactions.\n- Create a 'sale' transaction to take payment.\n- Create a 'void' transaction and reference a parent 'sale' transaction to reverse a transaction that hasn't yet settled.\n- If settled, a 'refund' transaction should be created instead.\nCheck the 'isAuthorized' field to see whether or not the transaction was authorized, regardless of type. If not authorized, check the 'failures' array to determine why.\n\n## Sale\n\nA sale transaction authorizes a transaction with a Shopper's card. An authorized transaction will settle as part of batch settlement.\n\n## Void\n\nOnly unsettled transactions are voidable. When you void a transaction, it will not be settled as part of batch settlement and will not be charged to the shoppers card.\n\n## Refund\n\nAfter a transaction has settled, you must refund it to return the settled amount of money (or a portion of the amount) to the customer.\n"
    },
    {
      "name": "Apple Pay Payments",
      "description": "The Apple Pay Payments resources capture all of the components necessary for processing a payment with the Apple Pay digital wallet. The payment token contains the encrypted payment data needed for transaction processing along with the elements needed for decryption. This cannot be used in conjunction with a Google Pay payment. It may also be used when creating a payment session. The only fields of the request to pass in the Card field is the Contact info, if available.\n"
    },
    {
      "name": "Google Pay Payments",
      "description": "The Google Pay Payments resources capture all the card information that is encrypted within a transaction that uses Google Pay as a form of payment. This cannot be used in conjunction with an Apple Pay payment. It may also be used when creating a payment session. Pass in the encrypted Google Pay string in the token variable and get the decrypted value in the form of a card object. The only field to pass in the card field in the request is the Contact info.\n"
    },
    {
      "name": "Paze Payments",
      "description": "This captures all the card information that is encrypted within a transaction that uses PAZE as a form of payment. This cannot be used in conjunction with an ApplePay payment or a GooglePay payment. It may also be used when creating a payment session. Pass in the encrypted PAZE string in the token variable and get the decrypted value in the form of a card object.\n"
    },
    {
      "name": "Surcharge Advices",
      "description": "A surcharge advice calculates the amount of surcharge and provides an adjusted transaction total for specific card numbers. This feature must be enabled for the merchant.\n\nAt least one of the following is required to create a surcharge advice request: storedCard, hostedCard, cardNumber, or panToken. If the card entered in the request cannot be surcharged, an error code is returned. You will not be able to collect surcharge using that card. You can either request a new surcharge advice with a new card, or proceed with that card and not collect surcharge with it.\n\nNote that surcharge advice support is for NA merchants only.\n"
    },
    {
      "name": "Refund Surcharge Advices",
      "description": "A refund surcharge advice calculates the amount of refundable surcharge and provides an adjusted refund transaction amount using the previous surcharge advice and the original parent transaction. This feature must be enabled for the merchant.\n\nNote that refund surcharge advice support is for NA merchants only.\n"
    },
    {
      "name": "Forex Advices",
      "description": "A foreign exchange advice. Forex Advices track the exchange rate of the currency the card is transacting in against the home currency of the card. Forex advices are only available for merchant accounts with Dynamic Currency Conversion enabled.\n\nAt least one of the following is required to create a forex advice request: storedCard, hostedCard, cardNumber, or panToken.\n\n## Creating a sale with a forex advice\n\nAfter creating a forex advice resource, you can use it to initiate a sale using the customer card issuer's currency. To do this, create a transaction with the [Transactions](#tag/Transactions) endpoint and include the forex advice [Resource URL](#section/Overview/Values) in your request. There is no need to set the total amount of transaction if a forex advice resource URL is already included in the request.\n"
    },
    {
      "name": "Payment Links",
      "description": "A payment link is a link to a Checkout page that a merchant can send to a customer. A payment link has a set expiry timestamp - after this timestamp, the link becomes unusable.\n\nA payment link cannot remain valid for longer than 1 year.\n\nA canceled or expired payment link cannot be used to create a transaction.\n"
    },
    {
      "name": "Payment Link Events",
      "description": "A payment link event is automatically created by the system when certain actions occur concerning a payment link. Examples are transactions made from a payment link or email reminders sent to the customers.\n\nA payment link event can only be created if the corresponding payment link is active and has not yet reached its conversion limit. In addition, only payment link events with the 'reminderSent' type can be manually created.\n"
    },
    {
      "name": "Subscriptions",
      "description": "A Subscription applies a [Plan](#tag/Plans) to the [Stored Card](#tag/Stored-Cards) of a [Shopper](#tag/Shoppers). This association applies the instructions for a multi-payment transaction detailed in a Plan.\n"
    },
    {
      "name": "Plans",
      "description": "A Plan defines a total for a customer to pay and an interval for the bill to repeat.\n"
    },
    {
      "name": "Plan Lists",
      "description": "A PlanList is associated with an Account.\n\nCannot be updated.\n"
    },
    {
      "name": "Shoppers",
      "description": "A Shopper resource is a collection of stored information about a shopper. After making a Shopper, Elavon Payment Gateway can display this information in the Elavon Payment Gateway UI and use it for the following use cases:\n\n- Saving frequently used shopper data.\n- Pre-populating fields in the checkout form for a [Payment Session](#tag/Payment-Sessions).\n- Providing information for a [Transaction](#tag/Transactions).\n- Saving payment information for the shopper as a [Stored Card](#tag/Stored-Cards) resource.\n- Applying subscriptions to shoppers with a [Stored Card](#tag/Stored-Cards).\n"
    },
    {
      "name": "Notifications",
      "description": "A Notification provides details about potentially interesting events happening within our platform\n\nA Notification can also be asynchronously delivered to a Webhook endpoint on your server\n"
    },
    {
      "name": "Accounts",
      "description": "A merchant may have multiple accounts.\n\nCannot be updated through the API. Accounts are managed in the Back Office UI.\n"
    },
    {
      "name": "Pan Tokens",
      "description": "Convert one or more PANs into PanTokens\n\n- You can exchange a Personal Account Number (card number) for a PanToken which is a tokenized version of the data that can safely be stored\n- This allows your integration to stay PCI compliant\n- A PanToken is unique to an individual merchantId and PAN combination\n"
    },
    {
      "name": "Total Adjustments",
      "description": "Make an adjustment to the total and/or tip of an existing transaction. The transaction resource must have *isTotalAdjustable* set to true.\n"
    },
    {
      "name": "Stored ACH Payments",
      "description": "An ACH payment that is stored for a shopper and may be used for recurring payments."
    },
    {
      "name": "Hosted ACH Payments",
      "description": "A single-use ACH payment. This captures all payment details so they may be subsequently referenced in a\ntransaction. A hosted payment page integration approach requires the use of this resource.\n"
    }
  ],
  "security": [
    {
      "BasicAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "BasicAuth": {
        "description": "The merchant alias should be provided as the username. The appropriate API key should be provided as the password.",
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "Account": {
        "title": "Account",
        "description": "A merchant may have multiple accounts",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Account>",
            "description": "Account [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "f9g699w9v43r9gcp77y2bxq4rjcx",
            "title": "ResourceURL<Account>",
            "description": "Account [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:33.567Z",
            "description": "Modification timestamp",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/merchants/6xxFwvM8BqmM6T6DcF3DyTB3",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "processorAccounts": {
            "type": "array",
            "description": "List of processor accounts for this account",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/ProcessorAccount"
            }
          },
          "name": {
            "type": "string",
            "example": "Sirius Corporation",
            "description": "Name"
          },
          "description": {
            "type": "string",
            "description": "Optional Description",
            "example": "A fintech company."
          },
          "tradeName": {
            "type": "string",
            "description": "Trading as, operating as, doing business as, fictitious, or assumed name, which may be different than the legal name.",
            "example": "Gringotts",
            "readOnly": true
          },
          "businessAddress": {
            "type": "string",
            "description": "Business address",
            "readOnly": true
          },
          "businessPhone": {
            "type": "string",
            "description": "Business phone",
            "example": "+44 020 7946 0123",
            "readOnly": true
          },
          "businessEmail": {
            "type": "string",
            "description": "Business email",
            "example": "sales@gringotts.com",
            "readOnly": true
          },
          "businessWebsite": {
            "type": "string",
            "description": "Business website",
            "example": "www.gringotts.com",
            "readOnly": true
          },
          "planList": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/plan-lists/f9g699w9v43r9gcp77y2bxq4rjcx",
            "format": "url",
            "title": "ResourceURL<PlanList>",
            "description": "PlanList [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "salesTaxEntry": {
            "type": "string",
            "description": "Sales tax entry",
            "readOnly": true
          },
          "signatureVerification": {
            "type": "string",
            "description": "Signature verification",
            "readOnly": true
          },
          "logoUrl": {
            "type": "string",
            "description": "Logo URL",
            "example": "https://cf.media.eu.convergepay.com/61d4279d216486c6bbfb7cfcee18a2e9b85f61d5383fb87c97697d49ebcff917/media/logo.jpg",
            "readOnly": true
          }
        }
      },
      "AccountEntryMode": {
        "type": "string",
        "title": "AccountEntryMode",
        "description": "",
        "enum": [
          "keyEntered",
          "magneticStripe",
          "emvContactless",
          "emvChip",
          "emvChipWithCvv",
          "emvChipFallbackToMagneticStripe",
          "emvContactlessFallbackToEmvChip"
        ]
      },
      "AchAccountType": {
        "type": "string",
        "title": "AchAccountType",
        "description": "",
        "enum": [
          "savingsPersonal",
          "checkingPersonal",
          "checkingBusiness"
        ]
      },
      "AchPayment": {
        "title": "AchPayment",
        "description": "ACH Payment details",
        "required": [
          "achAccountType",
          "accountName"
        ],
        "properties": {
          "bankRoutingNumber": {
            "type": "string",
            "description": "Bank routing number. Must be 9 digits.",
            "pattern": "^\\\\d{9}?",
            "example": "987654321"
          },
          "bankAccountNumber": {
            "type": "string",
            "description": "Bank account number. Must be 5 to 16 digits.",
            "pattern": "^\\\\d{5,16}?",
            "example": "1234567890"
          },
          "bankAccountToken": {
            "description": "Bank account number token.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ValueToken"
              }
            ]
          },
          "achFingerprint": {
            "type": "string",
            "description": " ACH fingerprint",
            "readOnly": true
          },
          "last4": {
            "type": "string",
            "description": "Last 4 digits of the bank account number.",
            "pattern": "^\\\\d{4}?",
            "readOnly": true
          },
          "achAccountType": {
            "type": "string",
            "description": "ACH account type",
            "$ref": "#/components/schemas/AchAccountType"
          },
          "accountName": {
            "type": "string",
            "description": "The ACH account name",
            "maxLength": 255
          }
        }
      },
      "Address": {
        "title": "Address",
        "description": "Address",
        "properties": {
          "street1": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "example": "221 Baker St",
            "description": "Street line 1"
          },
          "street2": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "example": "Suite B",
            "description": "Street line 2"
          },
          "city": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "example": "London",
            "description": "Locality/Town/City"
          },
          "region": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "example": "England",
            "description": "State/Province/Region"
          },
          "postalCode": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "example": "NW1 6XE",
            "description": "Zip/Postal code"
          },
          "countryCode": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "example": "GBR",
            "description": "ISO 3166-1 Alpha-3 country code, a three-letter country code that represents countries, dependent territories, and special areas of geographical interest"
          }
        }
      },
      "AmountAndCurrency": {
        "title": "AmountAndCurrency",
        "description": "Represents currency",
        "required": [
          "amount",
          "currencyCode"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "[Currency](#section/Overview/Values) amount. At most 9 integer digits and at most 4 fractional digits.",
            "example": "1.23"
          },
          "currencyCode": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "description": "ISO 4217 three-letter currency code, a three-letter code where the first two letters are the same as the code for the country name, while the third letter often corresponds to the first letter of the currency name (e.g. USD for US dollar, CHF for Swiss franc, etc.)",
            "example": "EUR"
          }
        }
      },
      "ApplePayPaymentInput": {
        "title": "ApplePayPaymentInput",
        "description": "This captures all of the components necessary for processing a payment with the Apple Pay digital wallet. The payment token contains the encrypted payment data needed for transaction processing along with the elements needed for decryption. This cannot be used in conjunction with a Google Pay payment. It may also be used when creating a payment session. The only fields of the request to pass in the Card field is the Contact info, if available.",
        "properties": {
          "card": {
            "description": "Only the Contact billTo info can be provided alongside the token. This is optional, but it does provide a more complete response with the decrypted Apple Pay payment info.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ]
          },
          "token": {
            "type": "string",
            "description": "The Apple transaction id, encrypted payment data and data elements used for decryption."
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "ApplePayPayment": {
        "title": "ApplePayPayment",
        "description": "This captures all of the components necessary for processing a payment with the Apple Pay digital wallet. The payment token contains the encrypted payment data needed for transaction processing along with the elements needed for decryption. This cannot be used in conjunction with a Google Pay payment. It may also be used when creating a payment session. The only fields of the request to pass in the Card field is the Contact info, if available.",
        "properties": {
          "href": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/apple-pay-payments/8jmkgdx63t77xqtwq6j2f27cykrd",
            "format": "url",
            "title": "ResourceURL<ApplePayPayment>",
            "description": "ApplePayPayment [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "8jmkgdx63t77xqtwq6j2f27cykrd",
            "title": "ResourceID<ApplePayPayment>",
            "description": "ApplePayPayment [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp",
            "example": "2022-11-22T06:08:49.949Z",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp calculated from the Apple Pay token signing time and not the createdAt value of this resource.",
            "example": "2022-11-22T06:38:49.000Z",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/merchants/7btv9vr8cq3nq8r7p4wjmjkk58bt",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values) (self link), suppressed when a public API key is used",
            "readOnly": true
          },
          "processorAccount": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/processor-accounts/kjgfcr2r9y2r2krhbrb36w28tp77",
            "format": "url",
            "title": "ResourceURL<ProcessorAccount>",
            "description": "ProcessorAccount [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "card": {
            "description": "Only the Contact billTo info can be provided alongside the token. This is optional, but it does provide a more complete response with the decrypted Apple Pay payment info.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ]
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          },
          "verificationResults": {
            "description": "Verification results (all fields except cryptogramSecurity will be unprovided always).",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationResults"
              }
            ]
          }
        }
      },
      "ApplePayPaymentSessionInput": {
        "title": "ApplePayPaymentSessionInput",
        "description": "Contains the elements necessary for initiating a transaction with Apple. The Apple Pay payment session is returned after validation of the supplied fields.",
        "required": [
          "initiativeContext"
        ],
        "properties": {
          "account": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/accounts/7btv9vr8cq3nq8r7p4wjmjkk58bt",
            "format": "url",
            "title": "ResourceURL<Account>",
            "description": "Account [Resource URL](#section/Overview/Values)"
          },
          "initiativeContext": {
            "type": "string",
            "example": "mystore.example.com",
            "description": "Fully qualified domain name that has been registered with Apple. It does not include the protocol (e.g., http, https)."
          }
        }
      },
      "ApplePayPaymentSession": {
        "title": "ApplePayPaymentSession",
        "description": "Contains the elements necessary for initiating a transaction with Apple. The Apple Pay payment session is returned after validation of the supplied fields.",
        "required": [
          "initiativeContext"
        ],
        "properties": {
          "merchant": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/merchants/7btv9vr8cq3nq8r7p4wjmjkk58bt",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values) (self link), suppressed when a public API key is used",
            "readOnly": true
          },
          "account": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/accounts/7btv9vr8cq3nq8r7p4wjmjkk58bt",
            "format": "url",
            "title": "ResourceURL<Account>",
            "description": "Account [Resource URL](#section/Overview/Values)"
          },
          "displayName": {
            "type": "string",
            "example": "My Store",
            "description": "DBA name of the store.",
            "readOnly": true
          },
          "initiativeContext": {
            "type": "string",
            "example": "mystore.example.com",
            "description": "Fully qualified domain name that has been registered with Apple. It does not include the protocol (e.g., http, https)."
          },
          "paymentSession": {
            "type": "string",
            "description": "Apple Pay payment session object.",
            "readOnly": true
          }
        }
      },
      "Batch": {
        "title": "Batch",
        "description": "A settlement batch. Transactions are captured into a batch and submitted together for settlement and subsequent funding. Cannot be updated.",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Batch>",
            "description": "Batch [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
            "title": "ResourceID<Batch>",
            "description": "Batch [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Modification timestamp",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "processorAccount": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<ProcessorAccount>",
            "description": "ProcessorAccount [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "terminal": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Terminal>",
            "description": "Terminal [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "account": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Account>",
            "description": "Account [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "processorReference": {
            "type": "string",
            "description": "Reference assigned by the processor",
            "readOnly": true
          },
          "state": {
            "readOnly": true,
            "$ref": "#/components/schemas/BatchState"
          },
          "credits": {
            "description": "Credits",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CountAndTotal"
              }
            ]
          },
          "debits": {
            "description": "Debits",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CountAndTotal"
              }
            ]
          },
          "net": {
            "description": "Net, credits minus debits",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CountAndTotal"
              }
            ]
          }
        }
      },
      "BatchState": {
        "type": "string",
        "title": "BatchState",
        "description": "State of a batch",
        "readOnly": true,
        "enum": [
          "submitted",
          "settled",
          "rejected",
          "failed",
          "unknown"
        ]
      },
      "BillingInterval": {
        "type": "object",
        "title": "BillingInterval",
        "description": "BillingInterval",
        "required": [
          "timeUnit",
          "count"
        ],
        "properties": {
          "timeUnit": {
            "$ref": "#/components/schemas/TimeUnit"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "example": 3,
            "description": "A count of time units.",
            "minimum": 1
          }
        }
      },
      "Blik": {
        "type": "object",
        "title": "Blik",
        "description": "BLIK object containing a six-digit code. This value is not returned.",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "pattern": "\\\\d{6}",
            "description": "Six-digit BLIK code.",
            "example": "777777"
          }
        }
      },
      "Card": {
        "title": "Card",
        "description": "Card Details",
        "required": [
          "expirationMonth",
          "expirationYear",
          "securityCode"
        ],
        "properties": {
          "holderName": {
            "type": "string",
            "maxLength": 45,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "description": "Cardholder's full name",
            "example": "John Doe"
          },
          "number": {
            "type": "string",
            "minLength": 13,
            "maxLength": 23,
            "pattern": "\\D*(?:\\d\\D*){13,19}",
            "writeOnly": true,
            "description": "Cardholder's personal account number (PAN), not returned",
            "example": "XXXX XXXX XXXX XXXX"
          },
          "panToken": {
            "writeOnly": true,
            "description": "Cardholder's personal account number (PAN) token, not returned",
            "allOf": [
              {
                "$ref": "#/components/schemas/ValueToken"
              }
            ]
          },
          "paymentAccountReference": {
            "type": "string",
            "readOnly": true,
            "description": "Payment Account Reference (PAR). It is a desensitized, non-financial value. A single PAR exists throughout the life of a card account, and can link transactions across different channels and payment instruments. It allows a merchant to identify all transactions made on one credit or debit card account whether a personal account number (PAN), device PAN (DPAN), or network token was used.\n\nPAR is returned from the card network and issuer during authorization whether the transaction is authorized or declined. However, not all card schemes support PAR. Currently, it is returned for Visa, Mastercard, and Discover transactions. In addition, for a given scheme, some card types do not support PAR and is dependent on the issuing bank.\n"
          },
          "panFingerprint": {
            "type": "string",
            "readOnly": true,
            "description": "Cardholder's personal account number (PAN) fingerprint"
          },
          "expirationMonth": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 12,
            "description": "Card's expiration month",
            "example": 12
          },
          "expirationYear": {
            "type": "integer",
            "format": "int32",
            "minimum": 2000,
            "maximum": 2099,
            "description": "Card's expiration year",
            "example": 2020
          },
          "securityCode": {
            "type": "string",
            "minLength": 3,
            "maxLength": 4,
            "pattern": "\\d{3,4}",
            "writeOnly": true,
            "description": "Card's security code / CVC / CVV / CVD / CID, 3 or 4 digits, not returned and ignored if provided with a StoredCard",
            "example": "123"
          },
          "billTo": {
            "description": "Cardholder's billing contact details",
            "allOf": [
              {
                "$ref": "#/components/schemas/Contact"
              }
            ]
          },
          "maskedNumber": {
            "type": "string",
            "pattern": "\\D+(\\d\\D*){4}",
            "description": "Masked card number",
            "example": "XXXX XXXX XXXX 4242",
            "readOnly": true
          },
          "last4": {
            "type": "string",
            "minLength": 4,
            "maxLength": 4,
            "pattern": "\\d{4}",
            "description": "Last 4 digits of the card number",
            "example": "4242",
            "readOnly": true
          },
          "bin": {
            "type": "string",
            "minLength": 6,
            "maxLength": 6,
            "pattern": "\\d{6}",
            "description": "Issuer/Bank identification number (IIN/BIN)",
            "example": "456789",
            "readOnly": true
          },
          "scheme": {
            "$ref": "#/components/schemas/CardScheme"
          },
          "brand": {
            "$ref": "#/components/schemas/CardBrand"
          },
          "fundingSource": {
            "$ref": "#/components/schemas/CardFundingSource"
          },
          "issuingBank": {
            "type": "string",
            "readOnly": true,
            "description": "Issuing bank",
            "example": "U.S. Bank"
          },
          "issuingCountry": {
            "type": "string",
            "readOnly": true,
            "description": "Issuing country",
            "example": "USA"
          },
          "issuingCurrency": {
            "type": "string",
            "readOnly": true,
            "description": "Issuer currency",
            "example": "USD"
          },
          "isDebit": {
            "readOnly": true,
            "description": "Is the card debit ?",
            "allOf": [
              {
                "$ref": "#/components/schemas/TrueFalseOrUnknown"
              }
            ]
          },
          "isCorporate": {
            "readOnly": true,
            "description": "Is the account corporate ?",
            "allOf": [
              {
                "$ref": "#/components/schemas/TrueFalseOrUnknown"
              }
            ]
          },
          "isDccAllowed": {
            "readOnly": true,
            "description": "Is DCC supported ?",
            "allOf": [
              {
                "$ref": "#/components/schemas/TrueFalseOrUnknown"
              }
            ]
          },
          "encryptedCard": {
            "type": "string",
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/EncryptedData"
              }
            ]
          },
          "encryptedPin": {
            "type": "string",
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/PinEncryptedData"
              }
            ]
          }
        }
      },
      "CardBrand": {
        "type": "string",
        "example": "Maestro",
        "title": "CardBrand",
        "description": "Helps distinguish different brands for the same scheme",
        "readOnly": true,
        "enum": [
          "American Express",
          "UnionPay Credit",
          "UnionPay Debit",
          "Diners Club",
          "Discover",
          "JCB",
          "Maestro",
          "MasterCard",
          "MasterCard Credit",
          "MasterCard Debit",
          "Visa",
          "Visa Debit",
          "Visa Credit",
          "Visa Electron",
          "Unknown"
        ]
      },
      "CardDataOutputCapability": {
        "type": "string",
        "title": "CardDataOutputCapability",
        "description": "",
        "enum": [
          "magneticStripe",
          "emvContact",
          "emvContactless"
        ]
      },
      "CardFundingSource": {
        "type": "string",
        "example": "prepaid",
        "title": "CardFundingSource",
        "description": "Funding source",
        "readOnly": true,
        "enum": [
          "charge",
          "credit",
          "debit",
          "deferredDebit",
          "prepaid",
          "unknown"
        ]
      },
      "CardholderActivatedTerminalType": {
        "type": "string",
        "title": "CardholderActivatedTerminalType",
        "description": "",
        "enum": [
          "notApplicable",
          "limitedAmountTerminal",
          "automatedDispensingMachine",
          "selfServiceTerminal",
          "inFlightCommerce",
          "internet",
          "transponder",
          "remoteIndicator"
        ]
      },
      "CardholderVerificationCapability": {
        "type": "string",
        "title": "CardholderVerificationCapability",
        "description": "",
        "enum": [
          "pinEncipheredOnline",
          "pinEncipheredOffline",
          "pinPlaintextOffline",
          "signature",
          "noCvm"
        ]
      },
      "CardholderVerificationMethod": {
        "type": "string",
        "title": "CardholderVerificationMethod",
        "description": "",
        "enum": [
          "noCvmPerformed",
          "pin",
          "signature",
          "noCvm"
        ]
      },
      "CardScheme": {
        "type": "string",
        "example": "MasterCard",
        "title": "CardScheme",
        "description": "Scheme / Payment card network",
        "readOnly": true,
        "enum": [
          "American Express",
          "UnionPay",
          "Discover",
          "JCB",
          "MasterCard",
          "Visa",
          "Unknown"
        ]
      },
      "Contact": {
        "title": "Contact",
        "description": "Contact details",
        "properties": {
          "fullName": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "description": "Cardholder's full name",
            "example": "John Doe"
          },
          "company": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "description": "Cardholder's company",
            "example": "Acme"
          },
          "street1": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "description": "Street line 1",
            "example": "221 Baker St"
          },
          "street2": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "description": "Street line 2",
            "example": "Suite B"
          },
          "city": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "description": "Locality/Town/City",
            "example": "London"
          },
          "region": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "description": "State/Province/Region",
            "example": "England"
          },
          "postalCode": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "description": "Zip/Postal code; Required for UK Merchants",
            "example": "NW1 6XE"
          },
          "countryCode": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "description": "ISO 3166-1 Alpha-3 country code, a three-letter country code that represents countries, dependent territories, and special areas of geographical interest",
            "example": "GBR"
          },
          "primaryPhone": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[\\w \\-+:()/]*",
            "description": "Cardholder's primary phone",
            "example": "+44 020 7946 0123"
          },
          "alternatePhone": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[\\w \\-+:()/]*",
            "description": "Cardholder's alternate phone",
            "example": "+44 020 7946 0124"
          },
          "fax": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[\\w \\-+:()/]*",
            "description": "Cardholder's fax number",
            "example": "+44 020 7946 0125"
          },
          "email": {
            "type": "string",
            "description": "Cardholder's email address",
            "example": "john@email.com",
            "maxLength": 254
          }
        }
      },
      "CountAndTotal": {
        "title": "CountAndTotal",
        "description": "Count and total",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32",
            "description": "Count",
            "readOnly": true
          },
          "total": {
            "description": "Total",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountAndCurrency"
              }
            ]
          }
        }
      },
      "CredentialOnFileType": {
        "type": "string",
        "title": "CredentialOnFileType",
        "description": "Credential on file type, used with cards in a wallet, if applicable.\n- *subscription* - a series of scheduled transactions with a fixed amount (e.g. monthly membership to access a service or application features)\n- *recurring* - a series of scheduled transactions with a variable amount (e.g. monthly payments to a utility company where the amount varies depending on usage)\n- *unscheduled* - for unscheduled transactions, such as when a cardholder makes unscheduled transactions using the same credentials or when a merchant may need to create unscheduled transactions using a customer's card stored on file.\n",
        "enum": [
          "none",
          "recurring",
          "subscription",
          "unscheduled"
        ]
      },
      "Credentials": {
        "title": "Credentials",
        "description": "Login details",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 255,
            "description": "Username",
            "example": "elavonWebhookService"
          },
          "password": {
            "type": "string",
            "maxLength": 255,
            "description": "Password, at least eight characters with an uppercase letter, a lowercase letter, a digit, and a special symbol",
            "example": "e3MnN!?pf4",
            "writeOnly": true
          }
        }
      },
      "DebitSteering": {
        "type": "string",
        "title": "DebitSteering",
        "description": "Debit steering",
        "properties": {
          "visa": {
            "description": "Visa debit steering preference",
            "allOf": [
              {
                "$ref": "#/components/schemas/DebitSteeringPreference"
              }
            ]
          },
          "masterCard": {
            "description": "Mastercard debit steering preference",
            "allOf": [
              {
                "$ref": "#/components/schemas/DebitSteeringPreference"
              }
            ]
          },
          "discover": {
            "description": "Discover debit steering preference",
            "allOf": [
              {
                "$ref": "#/components/schemas/DebitSteeringPreference"
              }
            ]
          },
          "americanExpress": {
            "description": "American Express debit steering preference",
            "allOf": [
              {
                "$ref": "#/components/schemas/DebitSteeringPreference"
              }
            ]
          }
        }
      },
      "DebitSteeringPreference": {
        "type": "string",
        "title": "DebitSteeringPreference",
        "description": "",
        "enum": [
          "none",
          "global",
          "usCommonDebit"
        ]
      },
      "DebtorAccount": {
        "title": "DebtorAccount",
        "description": "Account information required for MCC 6012/6050/6051 merchants",
        "required": [
          "dateOfBirth",
          "accountNumber",
          "lastName"
        ],
        "properties": {
          "dateOfBirth": {
            "type": "string",
            "description": "Date Of Birth in `YYYYMMDD` format",
            "example": "19801231",
            "writeOnly": true
          },
          "accountNumber": {
            "type": "string",
            "maxLength": 10,
            "minLength": 1,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "description": "Account number",
            "example": "1234567890",
            "writeOnly": true
          },
          "postalCode": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "description": "Zip/Postal code. Required for UK Merchants.",
            "example": "NW1 6XE"
          },
          "lastName": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "description": "Last Name",
            "example": "Smith"
          }
        }
      },
      "DeviceFormat": {
        "type": "string",
        "title": "DeviceFormat",
        "description": "",
        "enum": [
          "onguardSdeV1"
        ]
      },
      "DeviceInteraction": {
        "title": "DeviceInteraction",
        "description": "Information when using a hardware terminal.",
        "required": [
          "posEntryCapabilities",
          "isCardPresent",
          "isAttendedTerminal",
          "cardholderVerificationMethod",
          "cardholderVerificationCapabilities",
          "pinLengthCapability",
          "cardDataOutputCapabilities",
          "terminalOutputCapabilities",
          "cardholderActivatedTerminalType",
          "mobilePosAcceptanceDeviceType"
        ],
        "properties": {
          "emv": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/Emv"
              }
            ]
          },
          "accountEntryMode": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountEntryMode"
              }
            ]
          },
          "posEntryCapabilities": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/PosEntryCapability"
              }
            ]
          },
          "isCardPresent": {
            "type": "boolean",
            "description": ""
          },
          "isAttendedTerminal": {
            "type": "boolean",
            "description": ""
          },
          "cardholderVerificationMethod": {
            "description": "Indicates how the terminal verified the customer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardholderVerificationMethod"
              }
            ]
          },
          "cardholderVerificationCapabilities": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardholderVerificationCapability"
              }
            ]
          },
          "pinLengthCapability": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/PinLengthCapability"
              }
            ]
          },
          "cardDataOutputCapabilities": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardDataOutputCapability"
              }
            ]
          },
          "terminalOutputCapabilities": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/TerminalOutputCapability"
              }
            ]
          },
          "cardholderActivatedTerminalType": {
            "description": "Indicates if terminal was unattended for soda machines, gas stations, etc ",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardholderActivatedTerminalType"
              }
            ]
          },
          "mobilePosAcceptanceDeviceType": {
            "description": "Indicates attributes of the mobile device if it is used as a terminal.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MobilePosAcceptanceDeviceType"
              }
            ]
          }
        }
      },
      "EmailReceiptRequest": {
        "title": "EmailReceiptRequest",
        "description": "A email receipt request for transaction. This provides a way for integrators to send a transaction email receipt after the transaction has been created and authorized.",
        "required": [
          "shopperEmailAddress"
        ],
        "properties": {
          "shopperEmailAddress": {
            "type": "string",
            "description": "Email address of the shopper, useful to provide a receipt",
            "example": "shopper@gmail.com"
          }
        }
      },
      "Emv": {
        "title": "Emv",
        "description": "",
        "required": [
          "tlvRequest"
        ],
        "properties": {
          "tlvRequest": {
            "type": "string",
            "description": "TLV-formatted string, length must be at least 6"
          },
          "keys": {
            "description": "Date information for Emv keys",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmvKeys"
              }
            ]
          },
          "applicationIdentifierTag4F": {
            "type": "string",
            "description": "EMV Tag 4F - identifies the application as described in [ISO 7816-5]",
            "readOnly": true
          },
          "applicationLabelTag50": {
            "type": "string",
            "description": "EMV Tag 50 - this tag typically contains a label or name associated with the card application",
            "readOnly": true
          },
          "issuerScriptTemplateOneTag71": {
            "type": "string",
            "description": "EMV Tag 71 - value returned from authorization",
            "readOnly": true
          },
          "issuerScriptTemplateTwoTag72": {
            "type": "string",
            "description": "EMV Tag 72 - value returned from authorization",
            "readOnly": true
          },
          "applicationInterchangeProfileTag82": {
            "type": "string",
            "description": "EMV Tag 82 - value used to indicate the capabilities of the card to support specific functions within the application",
            "readOnly": true
          },
          "dedicatedFileNameTag84": {
            "type": "string",
            "description": "EMV Tag 84 - indicates the selected Application Identifier (AID) used in the transaction request",
            "readOnly": true
          },
          "authorizationResponseCodeTag8A": {
            "type": "string",
            "description": "EMV Tag 8A - generated by the authorization authority for an approved transaction",
            "readOnly": true
          },
          "issuerAuthenticationDataTag91": {
            "type": "string",
            "description": "EMV Tag 91 - contains data sent to the chip card for online issuer authentication",
            "readOnly": true
          },
          "terminalVerificationResultsTag95": {
            "type": "string",
            "description": "EMV Tag 95 - indicates the status of the different functions as seen from the terminal",
            "readOnly": true
          },
          "transactionDateTag9A": {
            "type": "string",
            "description": "EMV Tag 9A - used to indicate the local date that the transaction was authorized",
            "readOnly": true
          },
          "transactionStatusInformationTag9B": {
            "type": "string",
            "description": "EMV Tag 9B - indicates the functions performed in a transaction",
            "readOnly": true
          },
          "transactionTypeTag9C": {
            "type": "string",
            "description": "EMV Tag 9C - indicates the type of financial transaction, represented by the first two digits of the ISO 8583 processing code",
            "readOnly": true
          },
          "applicationExpirationDateTag5F24": {
            "type": "string",
            "description": "EMV Tag 5F24 - used to identify the date after which the application expires",
            "readOnly": true
          },
          "transactionCurrencyCodeTag5F2A": {
            "type": "string",
            "description": "EMV Tag 5F2A - used to indicate the currency code of the transaction according to the ISO 4217 standard",
            "readOnly": true
          },
          "languagePreferenceTag5F2D": {
            "type": "string",
            "description": "EMV Tag 5F2D - used to identify the language preference",
            "readOnly": true
          },
          "applicationPanSequenceNumberTag5F34": {
            "type": "string",
            "description": "EMV Tag 5F34 - used to differentiate chip cards using the same Primary Account Number (PAN)",
            "readOnly": true
          },
          "accountTypeTag5F57": {
            "type": "string",
            "description": "EMV Tag 5F57 - used to identify the account type",
            "readOnly": true
          },
          "authorizedAmountTag9F02": {
            "type": "string",
            "description": "EMV Tag 9F02 - used to indicate the authorized amount of the transaction (excluding adjustments)",
            "readOnly": true
          },
          "otherAmountTag9F03": {
            "type": "string",
            "description": "EMV Tag 9F03 - used to indicate a secondary “Cashback” amount associated with the transaction",
            "readOnly": true
          },
          "applicationIdentifierTerminalTag9F06": {
            "type": "string",
            "description": "EMV Tag 9F06 - used to identify the Application Identifier (AID), Terminal used in the transaction request",
            "readOnly": true
          },
          "applicationVersionNumberTag9F09": {
            "type": "string",
            "description": "EMV Tag 9F09 - taken from the application (application specific data)",
            "readOnly": true
          },
          "issuerApplicationDataTag9F10": {
            "type": "string",
            "description": "EMV Tag 9F10 - used to send proprietary application data to the issuer in an online transaction",
            "readOnly": true
          },
          "issuerApplicationDataTag9F12": {
            "type": "string",
            "description": "EMV Tag 9F12 - preferred mnemonic associated with the AID",
            "readOnly": true
          },
          "terminalCountryCodeTag9F1A": {
            "type": "string",
            "description": "EMV Tag 9F1A - used to identify the country code where the terminal is located",
            "readOnly": true
          },
          "interfaceDeviceSerialNumberTag9F1E": {
            "type": "string",
            "description": "EMV Tag 9F1E - Unique and permanent serial number assigned to the interface device by the manufacturer",
            "readOnly": true
          },
          "transactionTimeTag9F21": {
            "type": "string",
            "description": "EMV Tag 9F21 - local time that the transaction was authorised",
            "readOnly": true
          },
          "applicationCryptogramTag9F26": {
            "type": "string",
            "description": "EMV Tag 9F26 - returned by the Chip (ICC) in response to a “Generate AC” command\"",
            "readOnly": true
          },
          "cryptogramInformationDataTag9F27": {
            "type": "string",
            "description": "EMV Tag 9F27 - indicates the type of cryptogram and the actions to be performed by the terminal",
            "readOnly": true
          },
          "terminalCapabilitiesTag9F33": {
            "type": "string",
            "description": "EMV Tag 9F33 - indicates the card data input, CVM, and security capabilities of the terminal",
            "readOnly": true
          },
          "cardholderVerificationMethodResultsTag9F34": {
            "type": "string",
            "description": "EMV Tag 9F34 - used to indicate the results of the last CVM preformed",
            "readOnly": true
          },
          "terminalTypeTag9F35": {
            "type": "string",
            "description": "EMV Tag 9F35 - used to indicate the environment of the terminal, its communication capability, and its operational control",
            "readOnly": true
          },
          "applicationTransactionCounterTag9F36": {
            "type": "string",
            "description": "EMV Tag 9F36 - an incrementing counter value that is managed by the application in the chip card",
            "readOnly": true
          },
          "unpredictableNumberTag9F37": {
            "type": "string",
            "description": "EMV Tag 9F37 - used to provide variability and uniqueness to the generation of a cryptogram",
            "readOnly": true
          },
          "transactionSequenceCounterTag9F41": {
            "type": "string",
            "description": "EMV Tag 9F41 - Counter maintained by the terminal that is incremented by one for each transaction",
            "readOnly": true
          },
          "transactionCategoryCodeTag9F53": {
            "type": "string",
            "description": "EMV Tag 9F53 - Usually provided by the acquirer",
            "readOnly": true
          },
          "issuerScriptResultsTag9F5B": {
            "type": "string",
            "description": "EMV Tag 9F5B - used to identify the results of the terminal script processing",
            "readOnly": true
          },
          "thirdPartyDataTag9F6E": {
            "type": "string",
            "description": "EMV Tag 9F6E - contains indicators about the attributes of the card holder’s device and the technology used for communication between the cardholder’s device and the acquiring POS Device",
            "readOnly": true
          },
          "customerExclusiveDataTag9F7C": {
            "type": "string",
            "description": "EMV Tag 9F7C - available for the Issuer’s discretionary use. The issuer is responsible for ensuring its use of the field complies with all applicable laws and its own privacy policy",
            "readOnly": true
          },
          "cardholderNameTag5F20": {
            "type": "string",
            "description": "EMV Tag 5F20 - used to identify the card holder",
            "readOnly": true
          }
        }
      },
      "EmvKey": {
        "title": "EmvKey",
        "description": "",
        "required": [
          "rid",
          "index",
          "modulus",
          "exponent",
          "checksum"
        ],
        "properties": {
          "rid": {
            "type": "string",
            "description": "Registered Application Provider Identifier",
            "readOnly": true
          },
          "index": {
            "type": "string",
            "description": "Index of the key within the RID",
            "readOnly": true
          },
          "modulus": {
            "type": "string",
            "description": "Modulus component of the RSA public key",
            "readOnly": true
          },
          "exponent": {
            "type": "string",
            "description": "Exponent component of the RSA public key",
            "readOnly": true
          },
          "checksum": {
            "type": "string",
            "description": "A check value calculated on all parts of the Public Key",
            "readOnly": true
          }
        }
      },
      "EmvKeys": {
        "title": "EmvKeys",
        "description": "",
        "properties": {
          "clientLastUpdatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Client's date of last key update"
          },
          "hostLastUpdatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Host's date of last key update",
            "readOnly": true
          },
          "isUpdateNeeded": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TrueFalseOrUnknown"
              }
            ]
          }
        }
      },
      "EncryptedData": {
        "title": "EncryptedData",
        "description": "",
        "required": [
          "deviceFormat"
        ],
        "properties": {
          "deviceFormat": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeviceFormat"
              }
            ]
          }
        }
      },
      "EventType": {
        "type": "string",
        "title": "EventType",
        "description": "The type of event that triggered this notification",
        "example": "saleAuthorized",
        "readOnly": true,
        "enum": [
          "saleDeclined",
          "saleAuthorized",
          "saleHeldForReview",
          "saleCaptured",
          "saleSettled",
          "voidDeclined",
          "voidAuthorized",
          "refundDeclined",
          "refundAuthorized",
          "refundCaptured",
          "refundSettled",
          "totalAdjustmentAuthorized",
          "totalAdjustmentDeclined",
          "transactionTotalAdjustment",
          "unknown"
        ]
      },
      "Failure": {
        "title": "Failure",
        "description": "Failure with code, target field and description",
        "properties": {
          "code": {
            "type": "string",
            "description": "Failure code",
            "readOnly": true,
            "example": "unauthorized"
          },
          "description": {
            "type": "string",
            "description": "Description of the failure; intended for the developer",
            "readOnly": true,
            "example": "A valid API key is required"
          },
          "field": {
            "type": "string",
            "description": "Field, if failure is linked to a specific field",
            "readOnly": true
          }
        }
      },
      "FailureWrapper": {
        "title": "FailureWrapper",
        "description": "Wrapper for status and Failures",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Http status code returned by the server",
            "readOnly": true,
            "example": "401"
          },
          "failures": {
            "type": "array",
            "description": "Failures",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Failure"
            }
          }
        }
      },
      "FieldPolicy": {
        "type": "string",
        "title": "FieldPolicy",
        "description": "",
        "enum": [
          "required",
          "recommended",
          "optional",
          "prohibited",
          "doNotPrompt"
        ]
      },
      "ForexAdvice": {
        "title": "ForexAdvice",
        "description": "Foreign exchange conversion.",
        "type": "object",
        "required": [
          "shopperInteraction",
          "total"
        ],
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL",
            "description": "ForexAdvice [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
            "description": "ForexAdvice [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp.",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Expiration timestamp.",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values). Suppressed when using a public API key.",
            "readOnly": true
          },
          "processorAccount": {
            "type": "string",
            "title": "ResourceURL<ProcessorAccount>",
            "description": "ProcessorAccount [Resource URL](#section/Overview/Values).",
            "writeOnly": true
          },
          "storedCard": {
            "type": "string",
            "title": "ResourceURL<StoredCard>",
            "description": "StoredCard [Resource URL](#section/Overview/Values).",
            "writeOnly": true
          },
          "hostedCard": {
            "type": "string",
            "title": "ResourceURL<HostedCard>",
            "description": "HostedCard [Resource URL](#section/Overview/Values).",
            "writeOnly": true
          },
          "hsmCard": {
            "type": "string",
            "title": "ResourceURL<HsmCard>",
            "description": "HsmCard [Resource URL](#section/Overview/Values).",
            "writeOnly": true
          },
          "cardNumber": {
            "type": "string",
            "minLength": 13,
            "maxLength": 23,
            "pattern": "\\D*(?:\\d\\D*){13,19}",
            "writeOnly": true,
            "description": "Personal account number (PAN), not returned.",
            "example": "XXXX XXXX XXXX XXXX"
          },
          "panToken": {
            "description": "Cardholder's personal account number (PAN) token.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ValueToken"
              }
            ]
          },
          "maskedNumber": {
            "type": "string",
            "description": "Masked card number.",
            "example": "XXXX XXXX XXXX 0536",
            "readOnly": true
          },
          "last4": {
            "type": "string",
            "minLength": 4,
            "maxLength": 4,
            "description": "Last 4 of a card number.",
            "example": "4242",
            "readOnly": true
          },
          "bin": {
            "type": "string",
            "minLength": 6,
            "maxLength": 6,
            "description": "Issuer/Bank identification number / IIN / BIN.",
            "example": "456789",
            "readOnly": true
          },
          "panFingerprint": {
            "type": "string",
            "description": "Personal account number (PAN) fingerprint.",
            "readOnly": true
          },
          "total": {
            "description": "Total in the source currency.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountAndCurrency"
              }
            ]
          },
          "issuerTotal": {
            "description": "Total in the target currency.",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountAndCurrency"
              }
            ]
          },
          "conversionRate": {
            "type": "string",
            "description": "The currency exchange rate (1 unit of total currency = 11.89 units of issuer currency).",
            "example": "11.89",
            "readOnly": true
          },
          "markupRate": {
            "type": "string",
            "description": "The markup percent. A value of 0.0399 means 3.99%.",
            "example": "0.0399",
            "readOnly": true
          },
          "markupRateAnnotation": {
            "$ref": "#/components/schemas/MarkupRateAnnotation"
          },
          "rateProvideName": {
            "type": "string",
            "description": "Rate provider name",
            "readOnly": true,
            "example": "US Bank"
          },
          "shopperInteraction": {
            "$ref": "#/components/schemas/ShopperInteraction"
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant."
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "GooglePayPaymentInput": {
        "title": "GooglePayPaymentInput",
        "description": "This captures all the card information that is encrypted within a transaction that uses Google Pay as a form of payment. This cannot be used in conjunction with an Apple Pay payment. It may also be used when creating a payment session. Pass in the encrypted Google Pay string in the token variable and get the decrypted value in the form of a card object. The only field to pass in the card field in the request is the Contact info.",
        "properties": {
          "card": {
            "description": "Only the Contact billTo info can be provided alongside the token. This is optional, but it does provide a more complete response with the decrypted Google Pay payment info.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ]
          },
          "token": {
            "type": "string",
            "description": "The encrypted payment data that is to be decrypted to gather the card info within."
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "GooglePayPayment": {
        "title": "GooglePayPayment",
        "description": "This captures all the card information that is encrypted within a transaction that uses Google Pay as a form of payment. This cannot be used in conjunction with an Apple Pay payment. It may also be used when creating a payment session. Pass in the encrypted Google Pay string in the token variable and get the decrypted value in the form of a card object. The only field to pass in the card field in the request is the Contact info.",
        "properties": {
          "href": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/google-pay-payments/q3rdjp2kfx4rwbgdcvr66wwhcfjw",
            "format": "url",
            "title": "ResourceURL<GooglePayPayment>",
            "description": "GooglePayPayment [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "q3rdjp2kfx4rwbgdcvr66wwhcfjw",
            "title": "ResourceID<GooglePayPayment>",
            "description": "GooglePayPayment [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp",
            "example": "2023-01-04T13:44:36.597Z",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp",
            "example": "2023-01-04T14:14:36.597Z"
          },
          "merchant": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/merchants/yfv23vhdptrgd3c3dpg3khydw22f",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values), suppressed when a public API key is used",
            "readOnly": true
          },
          "processorAccount": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/mprocessor-accounts/d4xcjxf4282xrtvcdcpv3wrxq77v",
            "format": "url",
            "title": "ResourceURL<ProcessorAccount>",
            "description": "ProcessorAccount [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "card": {
            "description": "Only the Contact billTo info can be provided alongside the token. This is optional, but it does provide a more complete response with the decrypted Google Pay payment info.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ]
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          },
          "verificationResults": {
            "description": "Verification results (all fields except cryptogramSecurity will be unprovided always).",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationResults"
              }
            ]
          }
        }
      },
      "HistoryEntry": {
        "title": "HistoryEntry",
        "description": "History Entry",
        "properties": {
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "HostedAchPaymentInput": {
        "title": "HostedAchPaymentInput",
        "description": "(Create) a single-use ACH Payment token.",
        "required": [
          "achPayment"
        ],
        "properties": {
          "achPayment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AchPayment"
              }
            ]
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant."
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values. Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "HostedAchPayment": {
        "title": "HostedAchPayment",
        "description": "A single-use ACH payment token.",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<HostedAchPayment>",
            "description": "HostedAchPayment [Resource URL](#section/Overview/Values) (self link).",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "sPOfri3oFrAcrlthLdepoSPe",
            "title": "ResourceID<HostedAchPayment>",
            "description": "HostedAchPayment [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp.",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Modification timestamp",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp.",
            "example": "2017-02-22T13:11:23.123Z",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values). Suppressed when using a public API key.",
            "readOnly": true
          },
          "achPayment": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AchPayment"
              }
            ]
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant."
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values. Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "HostedCardInput": {
        "title": "HostedCardInput",
        "description": "(Create) a single-use card for payment.",
        "required": [
          "card"
        ],
        "properties": {
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ]
          },
          "doVerify": {
            "type": "boolean",
            "default": false,
            "title": "doVerify",
            "description": "If true, verify Card."
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant."
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values. Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "HostedCard": {
        "title": "HostedCard",
        "description": "(Update / Retrieve) A single-use card for payment.",
        "required": [
          "Card"
        ],
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<HostedCard>",
            "description": "HostedCard [Resource URL](#section/Overview/Values) (self link).",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
            "title": "ResourceID<HostedCard>",
            "description": "HostedCard [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp.",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Modification timestamp",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp.",
            "example": "2017-02-22T13:11:23.123Z",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values). Suppressed when using a public API key.",
            "readOnly": true
          },
          "card": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ]
          },
          "doVerify": {
            "type": "boolean",
            "default": false,
            "title": "doVerify",
            "description": "If true, verify Card",
            "readOnly": true
          },
          "verificationResults": {
            "description": "Verification results if doVerify was true",
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationResults"
              }
            ],
            "readOnly": true
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "HppType": {
        "type": "string",
        "example": "fullPageRedirect",
        "title": "HppType",
        "description": "Type of HPP",
        "enum": [
          "lightbox",
          "paymentLink",
          "fullPageRedirect",
          "hostedPaymentFields"
        ]
      },
      "HsmCard": {
        "title": "HsmCard",
        "description": "A single-use card. This captures all payment details so they may be subsequently referenced in a transaction. This resource is recommended for a card present integration.",
        "required": [
          "terminal",
          "accountEntryMode"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier assigned by server.",
            "readOnly": true,
            "example": "r8gxbhpbyfy6m6y7cdrrf9k3xpy2"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp",
            "readOnly": true,
            "example": "2017-02-22T13:01:23.123Z"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Modification timestamp",
            "readOnly": true,
            "example": "2017-02-22T13:01:23.123Z"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp",
            "readOnly": true,
            "example": "2017-02-22T13:01:23.123Z"
          },
          "merchant": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/merchants/6xxFwvM8BqmM6T6DcF3DyTB3",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "processorAccount": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<ProcessorAccount>",
            "description": "ProcessorAccount [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "terminal": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Terminal>",
            "description": "Terminal [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "card": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ]
          },
          "accountEntryMode": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountEntryMode"
              }
            ]
          },
          "deviceInteraction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeviceInteraction"
              }
            ]
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values. Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "ListOfPanTokens": {
        "type": "object",
        "title": "ListOfPanTokens",
        "description": "List of PanTokens",
        "properties": {
          "items": {
            "type": "array",
            "description": "List of PanTokens",
            "maxItems": 50,
            "items": {
              "$ref": "#/components/schemas/PanToken"
            }
          }
        }
      },
      "MarketSegment": {
        "type": "string",
        "title": "MarketSegment",
        "description": "",
        "enum": [
          "retail",
          "restaurant"
        ]
      },
      "MarkupRateAnnotation": {
        "type": "string",
        "title": "MarkupRateAnnotation",
        "description": "Markup Rate Annotation",
        "example": "none",
        "readOnly": true,
        "enum": [
          "none",
          "aboveEcb",
          "belowEcb"
        ]
      },
      "Merchant": {
        "description": "Information about a merchant",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
            "title": "ResourceID<Merchant>",
            "description": "Merchant [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "legalName": {
            "type": "string",
            "example": "Sirius Cybernetics Corporation",
            "description": "Legal name under which the merchant operates",
            "readOnly": true
          },
          "regions": {
            "type": "array",
            "description": "Regions in which the merchant operates, NA/EU",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Region"
            }
          },
          "isDemo": {
            "type": "boolean",
            "example": "true",
            "description": "Is this a demo merchant for evaluation purposes only? Demo merchants do not interact with processors or issuers. No funds will ever be transferred",
            "readOnly": true
          }
        }
      },
      "MobilePosAcceptanceDeviceType": {
        "type": "string",
        "title": "MobilePosAcceptanceDeviceType",
        "description": "",
        "enum": [
          "notApplicable",
          "dedicatedMobileTerminalWithDongle",
          "offTheShelfMobileDevice"
        ]
      },
      "NonNegativeAmountAndCurrency": {
        "type": "object",
        "title": "NonNegativeAmountAndCurrency",
        "description": "NonNegativeAmountAndCurrency",
        "properties": {
          "amount": {
            "type": "string",
            "example": "1.23",
            "description": "Amount"
          },
          "currencyCode": {
            "type": "string",
            "example": "EUR",
            "description": "ISO 4217 three letter currency code"
          }
        }
      },
      "Notification": {
        "description": "A Notification provides details about potentially interesting events happening within our platform.\n",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Notification>",
            "description": "Notification [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
            "title": "ResourceID<Notification>",
            "description": "Notification [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/merchants/6xxFwvM8BqmM6T6DcF3DyTB3",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp",
            "readOnly": true
          },
          "eventType": {
            "$ref": "#/components/schemas/EventType"
          },
          "resourceType": {
            "$ref": "#/components/schemas/ResourceType"
          },
          "resource": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL",
            "description": "[Resource URL](#section/Overview/Values) of the affected resource",
            "readOnly": true
          }
        }
      },
      "Order": {
        "title": "Order",
        "description": "An order details what a shopper is paying for",
        "properties": {
          "href": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/orders/6xxFwvM8BqmM6T6DcF3DyTB3",
            "format": "url",
            "title": "ResourceURL<Order>",
            "description": "Order [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
            "title": "ResourceID<Order>",
            "description": "Order [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Modification timestamp",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/merchants/6xxFwvM8BqmM6T6DcF3DyTB3",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "total": {
            "description": "Total for all items",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "Description, which appears on the dashboard and might appear on receipts",
            "example": "March 2017 Rent",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "maxItems": 64,
            "description": "Line items, 64 max",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "shipTo": {
            "description": "Shipping contact details",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Contact"
              }
            ]
          },
          "shopperEmailAddress": {
            "type": "string",
            "description": "Shopper's email address",
            "example": "shopper@gmail.com",
            "readOnly": true
          },
          "shopperReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the shopper, such as a purchase order",
            "example": "PO 4358",
            "readOnly": true
          },
          "orderReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional order reference which we'll display in the merchant dashboard.",
            "readOnly": true
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "OrderInput": {
        "title": "Order",
        "description": "An order details what a shopper is paying for",
        "required": [
          "total"
        ],
        "properties": {
          "total": {
            "description": "Total for all items",
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "Description, which appears on the dashboard and might appear on receipts",
            "example": "March 2017 Rent"
          },
          "items": {
            "type": "array",
            "maxItems": 64,
            "description": "Line items, 64 max",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "shipTo": {
            "description": "Shipping contact details",
            "allOf": [
              {
                "$ref": "#/components/schemas/Contact"
              }
            ]
          },
          "shopperEmailAddress": {
            "type": "string",
            "description": "Shopper's email address",
            "example": "shopper@gmail.com",
            "maxLength": 254
          },
          "shopperReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the shopper, such as a purchase order",
            "example": "PO 4358"
          },
          "orderReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional order reference which we'll display in the merchant dashboard."
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "OrderItem": {
        "description": "An item in an order.",
        "required": [
          "total"
        ],
        "properties": {
          "total": {
            "description": "Total for this item, accounting for quantity",
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountAndCurrency"
              }
            ]
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "Description of the item",
            "example": "Oil change"
          },
          "unitPrice": {
            "description": "Cost of an individual unit in the order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountAndCurrency"
              }
            ]
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "description": "The number of units being purchased.",
            "default": 1
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant."
          },
          "type": {
            "$ref": "#/components/schemas/OrderItemType"
          }
        }
      },
      "OrderItemType": {
        "type": "string",
        "title": "OrderItemType",
        "description": "Type, optional and defaults to 'unknown.'\n",
        "example": "service",
        "default": "unknown",
        "enum": [
          "goods",
          "service",
          "tax",
          "shipping",
          "discount",
          "unknown"
        ]
      },
      "PagedList": {
        "description": "Base for PagedListXXX schemas.",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL",
            "description": "[Resource URL](#section/Overview/Values) (Self link)",
            "readOnly": true
          },
          "first": {
            "type": "string",
            "format": "url",
            "description": "First page link",
            "readOnly": true
          },
          "next": {
            "type": "string",
            "format": "url",
            "description": "Next page link, null if no more items",
            "readOnly": true
          },
          "pageToken": {
            "type": "string",
            "description": "An opaque continuation token for this page, null for the first page",
            "readOnly": true
          },
          "nextPageToken": {
            "type": "string",
            "description": "An opaque continuation token for the next page, null if no more items",
            "readOnly": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of items to return for this page. By default, returns 10 entries. The maximum possible number of entries returned is 200.",
            "default": 10,
            "readOnly": true
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "example": 10,
            "description": "The size of the items array for this page",
            "readOnly": true
          }
        }
      },
      "PaymentMethodQualifier": {
        "type": "string",
        "title": "PaymentMethodQualifier",
        "description": "",
        "enum": [
          "credit",
          "debit"
        ]
      },
      "PaymentSession": {
        "description": "A payment session securely collects payment details from the shopper using our hosted payment page and sends them directly to our platform, allowing the merchant to minimize PCI DSS scope.",
        "properties": {
          "href": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/payment-sessions/rd8y9xhx7qh9yj6r4vpxpqcv",
            "format": "url",
            "title": "ResourceURL<PaymentSession>",
            "description": "PaymentSession [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "rd8y9xhx7qh9yj6r4vpxpqcv",
            "title": "ResourceID<PaymentSession>",
            "description": "PaymentSession [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp",
            "example": "2017-02-22T13:01:23.123Z",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Modification timestamp",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp",
            "example": "2017-02-22T13:11:23.123Z"
          },
          "merchant": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "account": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Account>",
            "description": "Account [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "URL that shoppers will use",
            "readOnly": true
          },
          "order": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/orders/p7hxrvrpgfc68w6gm7q3b47y",
            "format": "url",
            "title": "ResourceURL<Order>",
            "description": "Order [Resource URL](#section/Overview/Values) for which payment is being requested",
            "readOnly": true
          },
          "allowedPaymentMethods": {
            "type": "array",
            "description": "Used to specify the payment methods allowed to be shown in the hosted payments page.",
            "items": {
              "$ref": "#/components/schemas/PaymentMethod"
            },
            "readOnly": true
          },
          "allowedPaymentMethodOrigins": {
            "type": "array",
            "description": "The allowed origins of the payment methods listed in the allowedPaymentMethods field.",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodOrigin"
            },
            "readOnly": true
          },
          "paymentLink": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PaymentLink>",
            "description": "PaymentLink [Resource URL](#section/Overview/Values)"
          },
          "salesTax": {
            "type": "object",
            "description": "Sales Tax",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "tip": {
            "type": "object",
            "description": "tip",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "forexAdvice": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/forex-advices/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<ForexAdvice>",
            "description": "ForexAdvice [Resource URL](#section/Overview/Values)"
          },
          "surchargeAdvice": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<SurchargeAdvice>",
            "description": "Surcharge Advice [Resource URL](#section/Overview/Values)"
          },
          "transaction": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/transaction/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<Transaction>",
            "description": "Transaction [Resource URL](#section/Overview/Values)"
          },
          "hostedCard": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/hosted-cards/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<HostedCard>",
            "description": "HostedCard [Resource URL](#section/Overview/Values)"
          },
          "storedCard": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/stored-cards/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<StoredCard>",
            "description": "StoredCard [Resource URL](#section/Overview/Values)"
          },
          "hostedAchPayment": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/hosted-ach-payments/1It7ipiNiDruyoFEJasinAfR",
            "format": "url",
            "title": "ResourceURL<HostedAchPayment>",
            "description": "HostedAchPayment [Resource URL](#section/Overview/Values)"
          },
          "storedAchPayment": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/stored-sch-payments/splg4brigEdifrocukobruvi",
            "format": "url",
            "title": "ResourceURL<StoredAchPayment>",
            "description": "StoredAchPayment [Resource URL](#section/Overview/Values)"
          },
          "googlePayPayment": {
            "type": "string",
            "example": "[ACM]",
            "format": "url",
            "description": "GooglePayPayment obtained through the create Google Pay payment API call. Required for 'ecommerce' 'sale' transactions."
          },
          "applePayPayment": {
            "type": "string",
            "example": "[ACM]",
            "format": "url",
            "description": "ApplePayPayment obtained through the create Apple Pay payment API call. Required for 'ecommerce' 'sale' transactions."
          },
          "pazePayment": {
            "type": "string",
            "format": "url",
            "description": "PazePayment obtained through the create Paze payment API call. Required for 'ecommerce' 'sale' transactions."
          },
          "blik": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Blik"
              }
            ]
          },
          "shopper": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/shoppers/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<Shopper>",
            "description": "Shopper [Resource URL](#section/Overview/Values)"
          },
          "debtorAccount": {
            "description": "Account information required for MCC 6012/6050/6051 merchants",
            "allOf": [
              {
                "$ref": "#/components/schemas/DebtorAccount"
              }
            ]
          },
          "threeDSecure": {
            "description": "Additional data that's only needed for 3-D Secure version 2 processing.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ThreeDSecure"
              }
            ]
          },
          "shopperEmailAddress": {
            "type": "string",
            "example": "shopper@gmail.com",
            "description": "Shopper's email address, useful for fraud detection and to provide a receipt",
            "maxLength": 254
          },
          "billTo": {
            "description": "Billing contact details that will be used by default for the hosted card",
            "allOf": [
              {
                "$ref": "#/components/schemas/Contact"
              }
            ]
          },
          "shipTo": {
            "description": "Shipping contact details",
            "allOf": [
              {
                "$ref": "#/components/schemas/Contact"
              }
            ]
          },
          "hppType": {
            "description": "Hosted payments page type indicates the type of hosted payments page for the payment session, defaults to fullPageRedirect",
            "allOf": [
              {
                "$ref": "#/components/schemas/HppType"
              }
            ],
            "readOnly": true
          },
          "returnUrl": {
            "type": "string",
            "example": "https://merchant.com/return",
            "format": "url",
            "maxLength": 2048,
            "pattern": "https?://[^/]{2,}.*",
            "description": "URL to redirect to after payment details are collected. Required for hppType = fullPageRedirect. Must be null for lightbox and HPF.",
            "readOnly": true
          },
          "cancelUrl": {
            "type": "string",
            "example": "https://merchant.com/cancel",
            "format": "url",
            "maxLength": 2048,
            "pattern": "https?://[^/]{2,}.*",
            "description": "URL to redirect to if the shopper cancels. Required for hppType = fullPageRedirect. Must be null for lightbox and HPF.",
            "readOnly": true
          },
          "originUrl": {
            "type": "string",
            "format": "url",
            "maxLength": 2048,
            "pattern": "https?://[^/]{2,}.*",
            "description": "Origin where the hosted payment page will be embedded. Required if using the lightbox. Multiple origin URLs are allowed. Each URL must be separated by a space and each URL must follow the regex.",
            "readOnly": true
          },
          "defaultLanguageTag": {
            "type": "string",
            "maxLength": 255,
            "description": "Default IETF language tag, a tag that represents language names and countries, to be used in the Hosted Payment Page, such as en-GB meaning 'English (Great Britain)'.",
            "example": "en-GB",
            "readOnly": true
          },
          "shopperLanguageTag": {
            "type": "string",
            "maxLength": 255,
            "description": "The IETF language tag optionally chosen by the shopper in the Hosted Payment Page, which may vary from the defaultLanguageTag.",
            "example": "en-GB"
          },
          "doCreateTransaction": {
            "type": "boolean",
            "default": false,
            "description": "Determines whether or not a Hosted Payment Page will perform an end to end transaction. If set to 'true', information a cardholder submits into a hosted payment form will automatically be used to create a Transaction resource. If set to 'false', the information submitted through the hosted payment form will automatically be used to generate a [HostedCard resource](#tag/Hosted-Cards). This value defaults to false. For more information on using the hosted payment form, see the [integration guide](/docs/converge/hosted-payments-overview).\n\nIn addition, if set to 'false', then digital wallets are not prompted in the hosted payments page (HPP).\n",
            "readOnly": true
          },
          "doCapture": {
            "type": "boolean",
            "default": true,
            "description": "This value will be passed along to any transaction created later in the payment flow. See doCapture on transaction",
            "readOnly": true
          },
          "doThreeDSecure": {
            "type": "boolean",
            "description": "Determines whether or not the HPP will perform 3-D secure validation",
            "readOnly": true
          },
          "doReset": {
            "type": "boolean",
            "description": "Determines whether or not the HPP will be reset"
          },
          "useStoredPaymentMethod": {
            "type": "boolean",
            "example": true,
            "readOnly": true,
            "description": "When 'true', a shopper must be provided. The HPP will force the use of a stored payment method: \ncustomer will either pick an existing one (if applicable) or the payment information they \nenter will get saved to the associated shopper.\n\nWhen 'false', HPP will not present any existing stored payment methods to the customer and the \ncustomer will not be asked if they would like to save the payment method to their profile.\n\nWhen 'null' or not provided, if a shopper is associated with the payment session, the user will \nhave the option to select from any stored payment methods attached to their shopper record. They \nwill also be able to enter new payment information and optionally save it to their profile.\n"
          },
          "createdBy": {
            "type": "string",
            "description": "Who or what created the payment session?",
            "maxLength": 255
          },
          "previousTransactions": {
            "type": "array",
            "description": "Previous transactions",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "PaymentSessionInput": {
        "description": "A payment session securely collects payment details from the shopper using our hosted payment page and sends them directly to our platform, allowing the merchant to minimize PCI DSS scope.",
        "required": [
          "order"
        ],
        "properties": {
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp",
            "example": "2017-02-22T13:11:23.123Z"
          },
          "account": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Account>",
            "description": "Account [Resource URL](#section/Overview/Values). Defaults to merchant."
          },
          "order": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/orders/p7hxrvrpgfc68w6gm7q3b47y",
            "format": "url",
            "title": "ResourceURL<Order>",
            "description": "Order [Resource URL](#section/Overview/Values) for which payment is being requested"
          },
          "allowedPaymentMethods": {
            "type": "array",
            "description": "Used to specify the payment methods allowed to be shown in the hosted payments page.",
            "items": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          },
          "allowedPaymentMethodOrigins": {
            "type": "array",
            "description": "The allowed origins of the payment methods listed in the allowedPaymentMethods field.",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodOrigin"
            }
          },
          "paymentLink": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PaymentLink>",
            "description": "PaymentLink [Resource URL](#section/Overview/Values)"
          },
          "salesTax": {
            "type": "object",
            "description": "Sales Tax",
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "tip": {
            "type": "object",
            "description": "tip",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "forexAdvice": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/forex-advices/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<ForexAdvice>",
            "description": "ForexAdvice [Resource URL](#section/Overview/Values)"
          },
          "surchargeAdvice": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<SurchargeAdvice>",
            "description": "Surcharge Advice [Resource URL](#section/Overview/Values)"
          },
          "transaction": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/transaction/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<Transaction>",
            "description": "Transaction [Resource URL](#section/Overview/Values)"
          },
          "hostedCard": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/hosted-cards/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<HostedCard>",
            "description": "HostedCard [Resource URL](#section/Overview/Values)"
          },
          "storedCard": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/stored-cards/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<StoredCard>",
            "description": "StoredCard [Resource URL](#section/Overview/Values)"
          },
          "hostedAchPayment": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/hosted-ach-payments/1It7ipiNiDruyoFEJasinAfR",
            "format": "url",
            "title": "ResourceURL<HostedAchPayment>",
            "description": "HostedAchPayment [Resource URL](#section/Overview/Values)"
          },
          "storedAchPayment": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/stored-ach-payments/splg4brigEdifrocukobruvi",
            "format": "url",
            "title": "ResourceURL<StoredAchPayment>",
            "description": "StoredAchPayment [Resource URL](#section/Overview/Values)"
          },
          "googlePayPayment": {
            "type": "string",
            "example": "[ACM]",
            "format": "url",
            "description": "GooglePayPayment obtained through the create Google Pay payment API call. Required for 'ecommerce' 'sale' transactions."
          },
          "applePayPayment": {
            "type": "string",
            "example": "[ACM]",
            "format": "url",
            "description": "ApplePayPayment obtained through the create Apple Pay payment API call. Required for 'ecommerce' 'sale' transactions."
          },
          "pazePayment": {
            "type": "string",
            "example": "[ACM]",
            "format": "url",
            "description": "PazePayment obtained through the create Paze payment API call. Required for 'ecommerce' 'sale' transactions."
          },
          "blik": {
            "writeOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Blik"
              }
            ]
          },
          "shopper": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/shoppers/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<Shopper>",
            "description": "Shopper [Resource URL](#section/Overview/Values)"
          },
          "debtorAccount": {
            "description": "Account information required for MCC 6012/6050/6051 merchants",
            "allOf": [
              {
                "$ref": "#/components/schemas/DebtorAccount"
              }
            ]
          },
          "threeDSecure": {
            "description": "Additional data that's only needed for 3-D Secure version 2 processing.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ThreeDSecure"
              }
            ]
          },
          "shopperEmailAddress": {
            "type": "string",
            "example": "shopper@gmail.com",
            "description": "Shopper's email address, useful for fraud detection and to provide a receipt",
            "maxLength": 254
          },
          "billTo": {
            "description": "Billing contact details that will be used by default for the hosted card",
            "allOf": [
              {
                "$ref": "#/components/schemas/Contact"
              }
            ]
          },
          "shipTo": {
            "description": "Shipping contact details",
            "allOf": [
              {
                "$ref": "#/components/schemas/Contact"
              }
            ]
          },
          "hppType": {
            "description": "Hosted payments page type indicates the type of hosted payments page for the payment session, defaults to fullPageRedirect",
            "allOf": [
              {
                "$ref": "#/components/schemas/HppType"
              }
            ]
          },
          "returnUrl": {
            "type": "string",
            "example": "https://merchant.com/return",
            "format": "url",
            "maxLength": 2048,
            "pattern": "https?://[^/]{2,}.*",
            "description": "URL to redirect to after payment details are collected. Required for hppType = fullPageRedirect. Must be null for lightbox and HPF."
          },
          "cancelUrl": {
            "type": "string",
            "example": "https://merchant.com/cancel",
            "format": "url",
            "maxLength": 2048,
            "pattern": "https?://[^/]{2,}.*",
            "description": "URL to redirect to if the shopper cancels. Required for hppType = fullPageRedirect. Must be null for lightbox and HPF."
          },
          "originUrl": {
            "type": "string",
            "format": "url",
            "maxLength": 2048,
            "pattern": "https?://[^/]{2,}.*",
            "description": "Origin where the hosted payment page will be embedded. Required if using the lightbox. Multiple origin URLs are allowed. Each URL must be separated by a space and each URL must follow the regex."
          },
          "defaultLanguageTag": {
            "type": "string",
            "maxLength": 255,
            "description": "Default IETF language tag, a tag that represents language names and countries, to be used in the Hosted Payment Page, such as en-GB meaning 'English (Great Britain)'.",
            "example": "en-GB"
          },
          "shopperLanguageTag": {
            "type": "string",
            "maxLength": 255,
            "description": "The IETF language tag optionally chosen by the shopper in the Hosted Payment Page, which may vary from the defaultLanguageTag.",
            "example": "en-GB"
          },
          "doCreateTransaction": {
            "type": "boolean",
            "default": false,
            "description": "Determines whether or not a Hosted Payment Page will perform an end to end transaction. If set to 'true', information a cardholder submits into a hosted payment form will automatically be used to create a Transaction resource. If set to 'false', the information submitted through the hosted payment form will automatically be used to generate a [HostedCard resource](#tag/Hosted-Cards). This value defaults to false. For more information on using the hosted payment form, see the [integration guide](/docs/converge/hosted-payments-overview).\n\nIn addition, if set to 'false', then digital wallets are not prompted in the hosted payments page (HPP).\n"
          },
          "doCapture": {
            "type": "boolean",
            "default": true,
            "description": "This value will be passed along to any transaction created later in the payment flow. See doCapture on transaction"
          },
          "doThreeDSecure": {
            "type": "boolean",
            "description": "Determines whether or not the HPP will perform 3-D secure validation"
          },
          "doReset": {
            "type": "boolean",
            "description": "Determines whether or not the HPP will be reset"
          },
          "useStoredPaymentMethod": {
            "type": "boolean",
            "example": true,
            "description": "When 'true', a shopper must be provided. The HPP will force the use of a stored payment method: \ncustomer will either pick an existing one (if applicable) or the payment information they \nenter will get saved to the associated shopper.\n\nWhen 'false', HPP will not present any existing stored payment methods to the customer and the \ncustomer will not be asked if they would like to save the payment method to their profile.\n\nWhen 'null' or not provided, if a shopper is associated with the payment session, the user will \nhave the option to select from any stored payment methods attached to their shopper record. They \nwill also be able to enter new payment information and optionally save it to their profile.\n"
          },
          "createdBy": {
            "type": "string",
            "description": "Who or what created the payment session?",
            "maxLength": 255
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "PagedListOfAccounts": {
        "type": "object",
        "title": "PagedListOfAccounts",
        "description": "Paged list of Accounts",
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "description": "List of Accounts",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        ]
      },
      "PagedListOfBatches": {
        "title": "PagedListOfBatches",
        "description": "Paged list of batches",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PagedListOfBatches>",
            "description": "PagedListOfBatches [Resource URL](#section/Overview/Values) (Self link)",
            "readOnly": true
          },
          "first": {
            "type": "string",
            "format": "url",
            "description": "First page link.",
            "readOnly": true
          },
          "next": {
            "type": "string",
            "format": "url",
            "description": "Next page link, null if no more items",
            "readOnly": true
          },
          "pageToken": {
            "type": "string",
            "description": "An opaque continuation token for this page, null for the first page",
            "readOnly": true
          },
          "nextPageToken": {
            "type": "string",
            "description": "An opaque continuation token for the next page, null if no more items",
            "readOnly": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "example": 10,
            "description": "Maximum number of items to return on this page, at least 1, and might be adjusted to a smaller value",
            "readOnly": true
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "example": 10,
            "description": "The size of the items array for this page",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "description": "List of Batches",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Batch"
            }
          }
        }
      },
      "PagedListOfEmvKeys": {
        "type": "object",
        "title": "PagedListOfEmvKeys",
        "description": "Paged list of EMV Keys",
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "description": "List of EMV Keys",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/EmvKey"
                }
              }
            }
          }
        ]
      },
      "PagedListOfMerchants": {
        "type": "object",
        "title": "PagedListOfMerchants",
        "description": "Paged list of Merchants",
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "description": "List of Merchants",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Merchant"
                }
              }
            }
          }
        ]
      },
      "PagedListOfNotifications": {
        "title": "PagedListOfNotifications",
        "description": "Paged list of Notifications",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PagedListOfNotifications>",
            "description": "PagedListOfNotifications [Resource URL](#section/Overview/Values) (Self link)",
            "readOnly": true
          },
          "first": {
            "type": "string",
            "format": "url",
            "description": "First page link",
            "readOnly": true
          },
          "next": {
            "type": "string",
            "format": "url",
            "description": "Next page link, null if no more items",
            "readOnly": true
          },
          "pageToken": {
            "type": "string",
            "description": "An opaque continuation token for this page, null for the first page",
            "readOnly": true
          },
          "nextPageToken": {
            "type": "string",
            "description": "An opaque continuation token for the next page, null if no more items",
            "readOnly": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "example": 10,
            "description": "Maximum number of items to return on this page, at least 1, and might be adjusted to a smaller value",
            "readOnly": true
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "example": 10,
            "description": "The size of the items array for this page",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "description": "List of Notifications",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          }
        }
      },
      "PagedListOfOrders": {
        "title": "PagedListOfOrders",
        "description": "Paged list of Orders",
        "properties": {
          "href": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/orders/6xxFwvM8BqmM6T6DcF3DyTB3",
            "format": "url",
            "title": "ResourceURL<PagedListOfOrders>",
            "description": "PagedListOfOrders [Resource URL](#section/Overview/Values) (Self link)",
            "readOnly": true
          },
          "first": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/orders?limit=10",
            "format": "url",
            "description": "First page link",
            "readOnly": true
          },
          "next": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/orders?pageToken=MCwz&limit=10",
            "format": "url",
            "description": "Next page link, null if no more items",
            "readOnly": true
          },
          "pageToken": {
            "type": "string",
            "description": "An opaque continuation token for this page, null for the first page",
            "readOnly": true
          },
          "nextPageToken": {
            "type": "string",
            "example": "MCwz",
            "description": "An opaque continuation token for the next page, null if no more items",
            "readOnly": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "example": 10,
            "description": "Maximum number of items to return on this page, at least 1, and might be adjusted to a smaller value",
            "readOnly": true
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "example": 10,
            "description": "The size of the items array for this page",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "description": "List of Orders",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          }
        }
      },
      "PagedListOfPaymentLinks": {
        "type": "object",
        "title": "PagedListOfPaymentLinks",
        "description": "Paged list of PaymentLinks",
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "description": "List of PaymentLinks",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/PaymentLink"
                }
              }
            }
          }
        ]
      },
      "PagedListOfPaymentLinkEvents": {
        "type": "object",
        "title": "PagedListOfPaymentLinkEvents",
        "description": "Paged list of PaymentLinkEvents",
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "description": "List of PaymentLinkEvents",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/PaymentLinkEvent"
                }
              }
            }
          }
        ]
      },
      "PagedListOfPaymentMethodLinks": {
        "type": "object",
        "title": "PagedListOfPaymentMethodLinks",
        "description": "Paged list of PaymentMethodLinks",
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "description": "List of PaymentMethodLinks",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/PaymentMethodLink"
                }
              }
            }
          }
        ]
      },
      "PagedListOfPaymentMethodSessions": {
        "type": "object",
        "title": "PagedListOfPaymentMethodSessions",
        "description": "Paged list of PaymentMethodSessions",
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "description": "List of PaymentMethodSessions",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/PaymentMethodSession"
                }
              }
            }
          }
        ]
      },
      "PagedListOfPlans": {
        "type": "object",
        "title": "PagedListOfPlans",
        "description": "Paged list of Plans",
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "description": "List of Plans",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          }
        ]
      },
      "PagedListOfPlanLists": {
        "type": "object",
        "title": "PagedListOfPlanLists",
        "description": "Paged list of PlanLists",
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "description": "List of PlanLists",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/PlanList"
                }
              }
            }
          }
        ]
      },
      "PagedListOfProcessorAccounts": {
        "type": "object",
        "title": "PagedListOfProcessorAccounts",
        "description": "Paged list of ProcessorAccounts",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PagedListOfProcessorAccounts>",
            "description": "PagedListOfProcessorAccounts [Resource URL](#section/Overview/Values) (Self link)",
            "readOnly": true
          },
          "first": {
            "type": "string",
            "format": "url",
            "description": "First page link",
            "readOnly": true
          },
          "next": {
            "type": "string",
            "format": "url",
            "description": "Next page link, null if no more items",
            "readOnly": true
          },
          "pageToken": {
            "type": "string",
            "description": "An opaque continuation token for this page, null for the first page",
            "readOnly": true
          },
          "nextPageToken": {
            "type": "string",
            "description": "An opaque continuation token for the next page, null if no more items",
            "readOnly": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "example": 10,
            "description": "Maximum number of items to return on this page, at least 1, and might be adjusted to a smaller value",
            "readOnly": true
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "example": 10,
            "description": "The size of the items array for this page",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "description": "List of ProcessorAccounts",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/ProcessorAccount"
            }
          }
        }
      },
      "PagedListOfShoppers": {
        "title": "PagedListOfShoppers",
        "description": "Paged list of Shoppers",
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedList"
          },
          {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "description": "List of Shoppers",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Shopper"
                }
              }
            }
          }
        ]
      },
      "PagedListOfStoredAchPayments": {
        "type": "object",
        "title": "PagedListOfStoredAchPayments",
        "description": "Paged list of Stored ACH Payments",
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "description": "List of Stored ACH Payments",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/StoredAchPayment"
                }
              }
            }
          }
        ]
      },
      "PagedListOfStoredCards": {
        "type": "object",
        "title": "PagedListOfStoredCards",
        "description": "Paged list of StoredCards",
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "description": "List of StoredCards",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/StoredCard"
                }
              }
            }
          }
        ]
      },
      "PagedListOfSubscriptions": {
        "title": "PagedListOfSubscription",
        "description": "Paged list of Subscriptions",
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedList"
          },
          {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "description": "List of Subscriptions",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        ]
      },
      "PagedListOfTerminals": {
        "type": "object",
        "title": "PagedListOfTerminals",
        "description": "Paged list of Terminals",
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "description": "List of Terminals",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Terminal"
                }
              }
            }
          }
        ]
      },
      "PagedListOfTotalAdjustments": {
        "type": "object",
        "title": "PagedListOfTotalAdjustments",
        "description": "Paged list of total adjustments",
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "description": "List of total adjustments",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/TotalAdjustment"
                }
              }
            }
          }
        ]
      },
      "PagedListOfTransactions": {
        "title": "PagedListOfTransactions",
        "description": "Paged list of Transactions",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PagedListOfTransactions>",
            "description": "PagedListOfTransactions [Resource URL](#section/Overview/Values) (Self link)",
            "readOnly": true
          },
          "first": {
            "type": "string",
            "format": "url",
            "description": "First page link",
            "readOnly": true
          },
          "next": {
            "type": "string",
            "format": "url",
            "description": "Next page link, null if no more items",
            "readOnly": true
          },
          "pageToken": {
            "type": "string",
            "description": "An opaque continuation token for this page, null for the first page",
            "readOnly": true
          },
          "nextPageToken": {
            "type": "string",
            "description": "An opaque continuation token for the next page, null if no more items",
            "readOnly": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "example": 10,
            "description": "Maximum number of items to return on this page, at least 1, and might be adjusted to a smaller value",
            "readOnly": true
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "example": 10,
            "description": "The size of the items array for this page",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "description": "List of Transactions",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "PartialAuthorization": {
        "title": "PartialAuthorization",
        "description": "",
        "required": [
          "isPartiallyAuthorizable"
        ],
        "properties": {
          "isPartiallyAuthorizable": {
            "type": "boolean",
            "description": "Caller will allow a partial amount of the transaction total to be authorized",
            "readOnly": true
          },
          "isPartiallyAuthorized": {
            "type": "boolean",
            "description": "Processor only authorized a portion of the requested total",
            "readOnly": true
          },
          "totalRequested": {
            "type": "string",
            "description": "Amount processor authorized",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "totalRemaining": {
            "type": "string",
            "description": "The total requested minus the total authorized",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          }
        }
      },
      "PaymentLinkInput": {
        "type": "object",
        "description": "A PaymentLink contains the details necessary to complete a Transaction via HPP",
        "required": [
          "expiresAt",
          "total"
        ],
        "properties": {
          "account": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Account>",
            "description": "Account [Resource URL](#section/Overview/Values). Defaults to merchant."
          },
          "returnUrl": {
            "type": "string",
            "format": "url",
            "maxLength": 2048,
            "pattern": "https?://[^/]{2,}.*",
            "description": "URL to redirect a shopper to after collecting payment details.",
            "example": "https://merchant.com/return"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:11:23.123Z",
            "description": "The expiration timestamp. A payment link must expire within 1 year of its creation."
          },
          "doCancel": {
            "type": "boolean",
            "description": "Cancel payment link. Defaults to false."
          },
          "doCapture": {
            "type": "boolean",
            "default": true,
            "description": "This value will be passed along to any transaction created later in the payment flow. See doCapture on transaction"
          },
          "description": {
            "type": "string",
            "description": "Descriptive text indicating the purpose of the PaymentLink"
          },
          "total": {
            "description": "Total payment amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountAndCurrency"
              }
            ]
          },
          "conversionLimit": {
            "type": "integer",
            "example": 50,
            "description": "Number of times the PaymentLink may be used to complete a Transaction"
          },
          "debtorAccount": {
            "description": "Account information required for MCC 6012/6050/6051 merchants",
            "allOf": [
              {
                "$ref": "#/components/schemas/DebtorAccount"
              }
            ]
          },
          "orderReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional order reference which we'll display in the merchant dashboard."
          },
          "shopperEmailAddress": {
            "type": "string",
            "example": "shopper@gmail.com",
            "description": "Shopper's email address, useful for fraud detection and to provide a receipt",
            "maxLength": 254
          },
          "useStoredPaymentMethod": {
            "type": "boolean",
            "example": true,
            "description": "When 'true', a shopper must be provided. The HPP will force the use of a stored payment method: \ncustomer will either pick an existing one (if applicable) or the payment information they \nenter will get saved to the associated shopper.\n\nWhen 'false', HPP will not present any existing stored payment methods to the customer and the \ncustomer will not be asked if they would like to save the payment method to their profile.\n\nWhen 'null' or not provided, if a shopper is associated with the payment session, the user will \nhave the option to select from any stored payment methods attached to their shopper record. They \nwill also be able to enter new payment information and optionally save it to their profile.\n"
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          },
          "shopper": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/shoppers/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<Shopper>",
            "description": "Shopper [Resource URL](#section/Overview/Values)"
          }
        }
      },
      "PaymentLink": {
        "type": "object",
        "description": "A PaymentLink contains the details necessary to create a Transaction via HPP",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL",
            "description": "PaymentLink [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
            "description": "PaymentLink [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values). Suppressed when a public API key is used",
            "readOnly": true
          },
          "account": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Account>",
            "description": "Account [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "url",
            "description": "The external URL which is shared with the card holder",
            "readOnly": true
          },
          "returnUrl": {
            "type": "string",
            "format": "url",
            "description": "URL to redirect to after payment details are collected.",
            "readOnly": true,
            "example": "https://merchant.com/return"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp.",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "maxLength": 255,
            "description": "Who or what created the payment link?",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Modification timestamp.",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:11:23.123Z",
            "description": "An expiration timestamp."
          },
          "cancelledAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:11:23.123Z",
            "description": "Cancellation timestamp",
            "readOnly": true
          },
          "cancelledBy": {
            "type": "string",
            "maxLength": 255,
            "description": "Who or what cancelled the payment link?",
            "readOnly": true
          },
          "doCancel": {
            "type": "boolean",
            "description": "Cancel payment link. Defaults to false."
          },
          "doCapture": {
            "type": "boolean",
            "default": true,
            "description": "This value will be passed along to any transaction created later in the payment flow. See doCapture on transaction",
            "readOnly": true
          },
          "conversionCount": {
            "type": "integer",
            "description": "The number of authorized transactions created from this PaymentLink",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "Descriptive text indicating the purpose of the PaymentLink",
            "readOnly": true
          },
          "total": {
            "description": "Total payment amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountAndCurrency"
              }
            ],
            "readOnly": true
          },
          "salesTax": {
            "type": "object",
            "description": "Sales Tax",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "debtorAccount": {
            "description": "Account information required for MCC 6012/6050/6051 merchants",
            "allOf": [
              {
                "$ref": "#/components/schemas/DebtorAccount"
              }
            ],
            "readOnly": true
          },
          "orderReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional order reference which we'll display in the merchant dashboard.",
            "readOnly": true
          },
          "shopperEmailAddress": {
            "type": "string",
            "example": "shopper@gmail.com",
            "description": "Shopper's email address, useful for fraud detection and to provide a receipt",
            "maxLength": 254,
            "readOnly": true
          },
          "shopper": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/shoppers/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<Shopper>",
            "description": "Shopper [Resource URL](#section/Overview/Values)"
          },
          "status": {
            "type": "array",
            "description": "The  status of the paymentMethodLink.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/PaymentLinkStatus"
            }
          },
          "useStoredPaymentMethod": {
            "type": "boolean",
            "example": true,
            "description": "When 'true', a shopper must be provided. The HPP will force the use of a stored payment method: \ncustomer will either pick an existing one (if applicable) or the payment information they \nenter will get saved to the associated shopper.\n\nWhen 'false', HPP will not present any existing stored payment methods to the customer and the \ncustomer will not be asked if they would like to save the payment method to their profile.\n\nWhen 'null' or not provided, if a shopper is associated with the payment session, the user will \nhave the option to select from any stored payment methods attached to their shopper record. They \nwill also be able to enter new payment information and optionally save it to their profile.\n"
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "PaymentLinkEvent": {
        "type": "object",
        "description": "An event for a payment link, such as making a payment or sending an email reminder.",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL",
            "description": "PaymentLinkEvent [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "dhpymb8bc6q76mhdfq6ddbw3kbdh",
            "description": "PaymentLinkEvent [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values). Suppressed when a public API key is used.",
            "readOnly": true
          },
          "paymentLink": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PaymentLink>",
            "description": "PaymentLink [Resource URL](#section/Overview/Values)"
          },
          "type": {
            "$ref": "#/components/schemas/PaymentLinkEventType"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-02-07T18:49:20.886Z",
            "description": "Creation timestamp.",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "maxLength": 255,
            "example": "user@gmail.com",
            "description": "Who or what created the transaction? When created in Elavon's virtual terminal, this will be the email address of the currently logged in user. When created otherwise, the integrator may optionally provide any value that helps answer this question."
          },
          "transaction": {
            "type": "string",
            "format": "url",
            "example": "https://api.eu.convergepay.com/transaction/XrDXRBh9YHxwqQTj2Cmq7j49",
            "title": "ResourceURL<Transaction>",
            "description": "Transaction [Resource URL](#section/Overview/Values), required if event type is 'payment'.",
            "readOnly": true
          },
          "shopperEmailAddress": {
            "type": "string",
            "example": "shopper@gmail.com",
            "description": "Shopper's email address, required if event type is 'reminderSent'."
          }
        }
      },
      "PaymentLinkEventInput": {
        "type": "object",
        "description": "An event for a payment link, such as making a payment or sending an email reminder.",
        "required": [
          "paymentLink",
          "type",
          "shopperEmailAddress"
        ],
        "properties": {
          "paymentLink": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PaymentLink>",
            "description": "PaymentLink [Resource URL](#section/Overview/Values)"
          },
          "type": {
            "$ref": "#/components/schemas/PaymentLinkEventType"
          },
          "createdBy": {
            "type": "string",
            "maxLength": 255,
            "example": "user@gmail.com",
            "description": "Who or what created the transaction? When created in Elavon's virtual terminal, this will be the email address of the currently logged in user. When created otherwise, the integrator may optionally provide any value that helps answer this question."
          },
          "shopperEmailAddress": {
            "type": "string",
            "example": "shopper@gmail.com",
            "description": "Shopper's email address, required if event type is 'reminderSent'."
          }
        }
      },
      "PaymentLinkEventType": {
        "type": "string",
        "title": "PaymentLinkEventType",
        "example": "reminderSent",
        "description": "Type of event. You can only create payment link events with the 'reminderSent' type.",
        "enum": [
          "payment",
          "reminderSent",
          "unknown"
        ]
      },
      "PaymentLinkStatus": {
        "type": "string",
        "title": "PaymentLinkStatus",
        "description": "",
        "enum": [
          "active",
          "completed",
          "cancelled",
          "expired"
        ]
      },
      "PaymentMethod": {
        "type": "string",
        "title": "PaymentMethod",
        "description": "Payment method, such as a card issued by a bank or a local payment method.",
        "enum": [
          "Card",
          "BLIK",
          "ACH"
        ]
      },
      "PaymentMethodLink": {
        "type": "object",
        "description": "A link containing a URL that may be provided to shoppers in order to capture payment method using the HPP without requiring a transaction.",
        "properties": {
          "href": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/payament-method-links/q3rdjp2kfx4rwbgdcvr66wwhcfjw",
            "format": "url",
            "title": "ResourceURL<PaymentMethodLink>",
            "description": "PaymentMethodLink [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "93yx3m43dk7qchrb93b2m3mv7j63",
            "title": "ResourceURL<PaymentMethodLink>",
            "description": "Unique identifier assigned by server",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/merchants/yfv23vhdptrgd3c3dpg3khydw22f",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values),d",
            "readOnly": true
          },
          "account": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Account>",
            "description": "Account [Resource URL](#section/Overview/Values), defaults to Merchant",
            "example": "https://uat.api.converge.eu.elavonaws.com/accounts/XrDXRBh9XHxwqQTj2Cmq7j49",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "URL to send to shoppers",
            "readOnly": true
          },
          "returnUrl": {
            "type": "string",
            "description": "URL to redirect to after payment details are collected",
            "format": "url",
            "maxLength": 2048,
            "pattern": "https?://[^/]{2,}.*",
            "readOnly": true,
            "example": "https://merchant.com/return"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:33.567Z",
            "description": "Modification timestamp",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:11:23.123Z",
            "description": "An expiration timestamp."
          },
          "cancelledAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:11:23.123Z",
            "description": "Cancellation timestamp",
            "readOnly": true
          },
          "cancelledBy": {
            "type": "string",
            "maxLength": 255,
            "description": "Who or what cancelled the payment link?"
          },
          "doCancel": {
            "type": "boolean",
            "description": "Cancel payment link. Defaults to false.",
            "default": false,
            "example": false
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "Description of the payment.",
            "example": "March 2017 Rent",
            "readOnly": true
          },
          "shopper": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/shoppers/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<Shopper>",
            "description": "Shopper [Resource URL](#section/Overview/Values). Unique identifier of Shopper's information.",
            "readOnly": true
          },
          "status": {
            "type": "array",
            "description": "The  status of the paymentMethodLink.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/PaymentLinkStatus"
            }
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "PaymentMethodLinkInput": {
        "type": "object",
        "description": "A payment link containing a URL that may be provided to shoppers in order to take payment using the hosted payment page.",
        "required": [
          "expiresAt",
          "shopper"
        ],
        "properties": {
          "href": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/payament-method-links/q3rdjp2kfx4rwbgdcvr66wwhcfjw",
            "format": "url",
            "title": "ResourceURL<PaymentMethodLink>",
            "description": "PaymentMethodLink [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "93yx3m43dk7qchrb93b2m3mv7j63",
            "title": "ResourceURL<PaymentMethodLink>",
            "description": "Unique identifier assigned by server",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/merchants/yfv23vhdptrgd3c3dpg3khydw22f",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values),d",
            "readOnly": true
          },
          "account": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Account>",
            "description": "Account [Resource URL](#section/Overview/Values), defaults to Merchant",
            "example": "https://uat.api.converge.eu.elavonaws.com/accounts/XrDXRBh9XHxwqQTj2Cmq7j49",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "URL to send to shoppers",
            "readOnly": true
          },
          "returnUrl": {
            "type": "string",
            "description": "URL to redirect to after payment details are collected",
            "format": "url",
            "maxLength": 2048,
            "pattern": "https?://[^/]{2,}.*",
            "example": "https://merchant.com/return",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:33.567Z",
            "description": "Modification timestamp",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:11:23.123Z",
            "description": "An expiration timestamp."
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "Description of the payment.",
            "example": "March 2017 Rent",
            "readOnly": true
          },
          "shopper": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/shoppers/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<Shopper>",
            "description": "Shopper [Resource URL](#section/Overview/Values). Unique identifier of Shopper's information."
          },
          "status": {
            "type": "array",
            "description": "The  status of the paymentMethodLink.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/PaymentLinkStatus"
            }
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "PaymentMethodOrigin": {
        "type": "string",
        "title": "PaymentMethodOrigin",
        "description": "The origin of the payment method, which may differ from the payment method if, for example, a third party wallet (e.g. Apple Pay) originated a card payment method.",
        "enum": [
          "Card",
          "Apple Pay",
          "Google Pay",
          "Paze",
          "BLIK",
          "Polish Bank Transfer",
          "ACH",
          "Unknown Wallet"
        ]
      },
      "PaymentMethodSessionInput": {
        "type": "object",
        "description": "A payment session securely collects payment details from the shopper using our hosted payment page and sends them directly to our platform, allowing the merchant to minimize PCI DSS scope.",
        "properties": {
          "href": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/payment-method-session/q3rdjp2kfx4rwbgdcvr66wwhcfjw",
            "format": "url",
            "title": "ResourceURL<PaymentMethodLink>",
            "description": "PaymentMethodLink [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "93yx3m43dk7qchrb93b2m3mv7j64",
            "title": "ResourceURL<PaymentMethodSession>",
            "description": "Unique identifier assigned by server",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:33.567Z",
            "description": "Modification timestamp",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:11:23.123Z",
            "description": "An expiration timestamp."
          },
          "merchant": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/merchants/yfv23vhdptrgd3c3dpg3khydw22f",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "account": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Account>",
            "example": "https://uat.api.converge.eu.elavonaws.com/accounts/XrDXRBh9XHxwqQTj2Cmq7j49",
            "description": "Account [Resource URL](#section/Overview/Values). Defaults to merchant."
          },
          "url": {
            "type": "string",
            "description": "URL that shoppers will use.",
            "readOnly": true
          },
          "paymentMethodLink": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PaymentMethodLink>",
            "description": "Payment Method Link [Resource URL](#section/Overview/Values).",
            "example": "https://uat.api.converge.eu.elavonaws.com/payment-method-links/jOZEpu7IkEPlsWo4PafrlHEm94Ls"
          },
          "shopper": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/shoppers/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<Shopper>",
            "description": "Shopper [Resource URL](#section/Overview/Values)"
          },
          "hppType": {
            "description": "Indicates the type of hosted payments page for the payment session, defaults to fullPageRedirect.",
            "allOf": [
              {
                "$ref": "#/components/schemas/HppType"
              }
            ]
          },
          "returnUrl": {
            "type": "string",
            "description": "URL to redirect to after payment details are collected",
            "format": "url",
            "maxLength": 2048,
            "pattern": "https?://[^/]{2,}.*",
            "example": "https://merchant.com/return"
          },
          "cancelUrl": {
            "type": "string",
            "description": "URL to redirect to if shopper cancels",
            "format": "url",
            "maxLength": 2048,
            "pattern": "https?://[^/]{2,}.*",
            "example": "https://merchant.com/cancel"
          },
          "originUrl": {
            "type": "string",
            "description": "Origin where the HPP will be embedded. Required if using the lightbox.",
            "format": "url",
            "maxLength": 2048,
            "pattern": "https?://[^/]{2,}.*"
          },
          "defaultLanguageTag": {
            "type": "string",
            "maxLength": 255,
            "description": "Default IETF language tag, a tag that represents language names and countries, to be used in the Hosted Payment Page, such as en-GB meaning 'English (Great Britain)'.",
            "example": "en-GB"
          },
          "shopperLanguageTag": {
            "type": "string",
            "maxLength": 255,
            "description": "The IETF language tag optionally chosen by the shopper in the Hosted Payment Page, which may vary from the defaultLanguageTag.",
            "example": "en-GB"
          },
          "doThreeDSecure": {
            "type": "boolean",
            "description": "Determines whether or not the HPP will perform 3-D secure validation"
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values. Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "PaymentMethodSession": {
        "type": "object",
        "description": "A payment session securely collects payment details from the shopper using our hosted payment page and sends them directly to our platform, allowing the merchant to minimize PCI DSS scope.",
        "properties": {
          "href": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/payment-method-session/q3rdjp2kfx4rwbgdcvr66wwhcfjw",
            "format": "url",
            "title": "ResourceURL<PaymentMethodLink>",
            "description": "PaymentMethodLink [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "93yx3m43dk7qchrb93b2m3mv7j64",
            "title": "ResourceURL<PaymentMethodSession>",
            "description": "Unique identifier assigned by server",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:33.567Z",
            "description": "Modification timestamp",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:11:23.123Z",
            "description": "An expiration timestamp."
          },
          "merchant": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/merchants/yfv23vhdptrgd3c3dpg3khydw22f",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "account": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Account>",
            "example": "https://uat.api.converge.eu.elavonaws.com/accounts/XrDXRBh9XHxwqQTj2Cmq7j49",
            "description": "Account [Resource URL](#section/Overview/Values). Defaults to merchant.",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "URL to that shoppers wil use.",
            "readOnly": true
          },
          "paymentMethodLink": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PaymentMethodLink>",
            "description": "Payment Method Link [Resource URL](#section/Overview/Values).",
            "example": "https://uat.api.converge.eu.elavonaws.com/payment-method-links/jOZEpu7IkEPlsWo4PafrlHEm94Ls"
          },
          "storedCard": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<StoredCard>",
            "description": "StoredCard [Resource URL](#section/Overview/Values)"
          },
          "shopper": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/shoppers/XrDXRBh9YHxwqQTj2Cmq7j49",
            "format": "url",
            "title": "ResourceURL<Shopper>",
            "description": "Shopper [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "threeDSecure": {
            "description": "Additional data only needed for 3-D Secure version 2 processing.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ThreeDSecure"
              }
            ]
          },
          "billTo": {
            "description": "Billing contact details to be used by default for the hosted card",
            "allOf": [
              {
                "$ref": "#/components/schemas/Contact"
              }
            ]
          },
          "hppType": {
            "description": "Indicates the type of hosted payments page for the payment session, defaults to fullPageRedirect.",
            "allOf": [
              {
                "$ref": "#/components/schemas/HppType"
              }
            ],
            "readOnly": true
          },
          "returnUrl": {
            "type": "string",
            "description": "URL to redirect to after payment details are collected",
            "format": "url",
            "maxLength": 2048,
            "pattern": "https?://[^/]{2,}.*",
            "readOnly": true,
            "example": "https://merchant.com/return"
          },
          "cancelUrl": {
            "type": "string",
            "description": "URL to redirect to if shopper cancels",
            "format": "url",
            "maxLength": 2048,
            "pattern": "https?://[^/]{2,}.*",
            "readOnly": true,
            "example": "https://merchant.com/cancel"
          },
          "originUrl": {
            "type": "string",
            "description": "Origin where the HPP will be embedded. Required if using the lightbox.",
            "format": "url",
            "maxLength": 2048,
            "pattern": "https?://[^/]{2,}.*",
            "readOnly": true
          },
          "defaultLanguageTag": {
            "type": "string",
            "maxLength": 255,
            "description": "Default IETF language tag, a tag that represents language names and countries, to be used in the Hosted Payment Page, such as en-GB meaning 'English (Great Britain)'.",
            "example": "en-GB",
            "readOnly": true
          },
          "shopperLanguageTag": {
            "type": "string",
            "maxLength": 255,
            "description": "The IETF language tag optionally chosen by the shopper in the Hosted Payment Page, which may vary from the defaultLanguageTag.",
            "example": "en-GB"
          },
          "doThreeDSecure": {
            "type": "boolean",
            "description": "Determines whether or not the HPP will perform 3-D secure validation",
            "readOnly": true
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values. Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "PazePaymentInput": {
        "title": "PazePaymentInput",
        "description": "This captures all the card information that is encrypted within a transaction that uses PAZE as a form of payment. This cannot be used in conjunction with an ApplePay payment or a GooglePay payment. It may also be used when creating a payment session. Pass in the encrypted PAZE string in the token variable and get the decrypted value in the form of a card object.",
        "required": [
          "payloadId",
          "sessionId"
        ],
        "properties": {
          "card": {
            "description": "Only the Contact billTo info can be provided alongside the token. This is optional, but it does provide a more complete response with the decrypted Google Pay payment info.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ]
          },
          "payloadId": {
            "type": "string",
            "example": "afbexyzf-021x-ca50-e22e-1d15abc2ec01",
            "description": "An alphanumeric string returned from PAZE that refers to the current token and sessionId.",
            "maxLength": 64
          },
          "sessionId": {
            "type": "string",
            "example": "pr9i793q4lwcqnr5123",
            "description": "An alphanumeric string returned from PAZE that refers to the current token and payloadId.",
            "maxLength": 255
          },
          "token": {
            "type": "string",
            "description": "The encrypted payment data in JWT format associated with the payload ID and session ID that is to be decrypted to gather the card info within"
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "PazePayment": {
        "type": "object",
        "description": "This captures all the card information that is encrypted within a transaction that uses PAZE as a form of payment. This cannot be used in conjunction with an ApplePay payment or a GooglePay payment. It may also be used when creating a payment session. Pass in the encrypted PAZE string in the token variable and get the decrypted value in the form of a card object.",
        "properties": {
          "href": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/google-pay-payments/q3rdjp2kfx4rwbgdcvr66wwhcfjw",
            "format": "url",
            "title": "ResourceURL<PazePayment>",
            "description": "PazePayment [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "q3rdjp2kfx4rwbgdcvr66wwhcfjw",
            "title": "ResourceID<PazePayment>",
            "description": "PazePayment [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp",
            "example": "2023-01-04T13:44:36.597Z",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp",
            "example": "2023-01-04T14:14:36.597Z"
          },
          "merchant": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/merchants/yfv23vhdptrgd3c3dpg3khydw22f",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values), suppressed when a public API key is used",
            "readOnly": true
          },
          "processorAccount": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/mprocessor-accounts/d4xcjxf4282xrtvcdcpv3wrxq77v",
            "format": "url",
            "title": "ResourceURL<ProcessorAccount>",
            "description": "ProcessorAccount [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "card": {
            "description": "Only the Contact billTo info can be provided alongside the token. This is optional, but it does provide a more complete response with the decrypted Google Pay payment info.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ]
          },
          "payloadId": {
            "type": "string",
            "example": "afbexyzf-021x-ca50-e22e-1d15abc2ec01",
            "description": "An alphanumeric string returned from PAZE that refers to the current token and sessionId.",
            "maxLength": 64
          },
          "sessionId": {
            "type": "string",
            "example": "pr9i793q4lwcqnr5123",
            "description": "An alphanumeric string returned from PAZE that refers to the current token and payloadId.",
            "maxLength": 255
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          },
          "verificationResults": {
            "description": "Verification results (all fields except cryptogramSecurity will be unprovided always).",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationResults"
              }
            ]
          }
        }
      },
      "PinDeviceFormat": {
        "type": "string",
        "title": "PinDeviceFormat",
        "description": "",
        "enum": [
          "ingenicoTdesDukpt"
        ]
      },
      "PinEncryptedData": {
        "title": "PinEncryptedData",
        "description": "",
        "required": [
          "encryptedData",
          "keySerialNumber",
          "deviceFormat"
        ],
        "properties": {
          "encryptedData": {
            "type": "string",
            "description": ""
          },
          "keySerialNumber": {
            "type": "string",
            "description": ""
          },
          "deviceFormat": {
            "description": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/PinDeviceFormat"
              }
            ]
          }
        }
      },
      "PinLengthCapability": {
        "type": "string",
        "title": "PinLengthCapability",
        "description": "",
        "enum": [
          "unknown",
          "none",
          "four",
          "five",
          "six",
          "seven",
          "eight",
          "nine",
          "ten",
          "eleven",
          "twelve"
        ]
      },
      "PinlessDebit": {
        "title": "PinlessDebit",
        "description": "Enable in-person debit payments without requesting a PIN when the transaction amount is less than the threshold.",
        "properties": {
          "isEnabled": {
            "type": "boolean",
            "description": "Enable pinless debit.",
            "example": true
          },
          "threshold": {
            "description": "Pinless debit threshold",
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          }
        }
      },
      "PinlessDebitCardScheme": {
        "title": "PinlessDebitCardScheme",
        "description": "",
        "properties": {
          "cardScheme": {
            "description": "Card scheme",
            "$ref": "#/components/schemas/CardScheme"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Enable pinless debit.",
            "example": true
          },
          "threshold": {
            "description": "Pinless debit threshold",
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          }
        }
      },
      "Plan": {
        "type": "object",
        "title": "Plan",
        "description": "A plan provides a template for paying for something over time with multiple payments. See also subscriptions, which associates shoppers with plans.",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL",
            "description": "Plan [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
            "description": "Plan [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Modification timestamp",
            "readOnly": true
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Deletion timestamp",
            "example": "2017-02-22T13:01:33.567Z",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "planList": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PlanList>",
            "description": "PlanList [Resource URL] (#section/Overview/Values)",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "example": "Monthly Software License",
            "description": "Name",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "example": "A single user-license software license billed monthly",
            "description": "Description",
            "readOnly": true
          },
          "billingInterval": {
            "description": "Time period between bills",
            "allOf": [
              {
                "$ref": "#/components/schemas/BillingInterval"
              }
            ],
            "readOnly": true
          },
          "total": {
            "description": "Total for each bill, except for any initial ones which might be different",
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ],
            "readOnly": true
          },
          "salesTax": {
            "type": "object",
            "description": "Sales Tax",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "billCount": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of bills, if applicable",
            "readOnly": true
          },
          "initialTotal": {
            "description": "Optional total override for initial bills to allow for trials, one-time initiation fees, etc.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ],
            "readOnly": true
          },
          "initialSalesTax": {
            "type": "object",
            "description": "Optional sales tax override for initial bills",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "initialTotalBillCount": {
            "type": "integer",
            "format": "int32",
            "description": "The number of initial bills where initialTotal will be applied",
            "readOnly": true
          },
          "shopperStatement": {
            "description": "Dynamic overrides of what might appear on a shopper's statement",
            "allOf": [
              {
                "$ref": "#/components/schemas/ShopperStatement"
              }
            ],
            "readOnly": true
          },
          "isSubscribable": {
            "type": "boolean",
            "example": false,
            "description": "Can shoppers be subscribed to this plan? Defaults to true"
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "PlanInput": {
        "type": "object",
        "title": "PlanInput",
        "description": "A plan provides a template for paying for something over time with multiple payments. See also subscriptions, which associates shoppers with plans.",
        "required": [
          "name",
          "billingInterval",
          "total"
        ],
        "properties": {
          "planList": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PlanList>",
            "description": "PlanList [Resource URL](#section/Overview/Values)"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "example": "Monthly Software License",
            "description": "Name"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "example": "A single user-license software license billed monthly",
            "description": "Description"
          },
          "billingInterval": {
            "description": "Time period between bills",
            "allOf": [
              {
                "$ref": "#/components/schemas/BillingInterval"
              }
            ]
          },
          "total": {
            "description": "Total for each bill, except for any initial ones which might be different",
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "salesTax": {
            "type": "object",
            "description": "Sales Tax",
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "billCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "description": "The total number of bills, if applicable"
          },
          "initialTotal": {
            "description": "Optional total override for initial bills to allow for trials, one-time initiation fees, etc.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "initialSalesTax": {
            "type": "object",
            "description": "Optional sales tax override for initial bills",
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "initialTotalBillCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The number of initial bills where initialTotal will be applied"
          },
          "shopperStatement": {
            "description": "Dynamic overrides of what might appear on a shopper's statement",
            "allOf": [
              {
                "$ref": "#/components/schemas/ShopperStatement"
              }
            ]
          },
          "isSubscribable": {
            "type": "boolean",
            "default": true,
            "description": "Can shoppers be subscribed to this plan? Defaults to true"
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "PlanList": {
        "title": "PlanList",
        "description": "A Plan list associated with an account",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PlanList>",
            "description": "PlanList [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "f9g699w9v43r9gcp77y2bxq4rjcx",
            "title": "Resource<PlanList>",
            "description": "PlanList [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:33.567Z",
            "description": "Modification timestamp",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "example": "Sirius Cybernetics Corporation",
            "description": "Name"
          },
          "description": {
            "type": "string",
            "description": "Optional Description"
          }
        }
      },
      "PanToken": {
        "title": "PanToken",
        "properties": {
          "reference": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "description": "Arbitrary reference provided by the caller"
          },
          "number": {
            "type": "string",
            "maxLength": 23,
            "minLength": 1,
            "pattern": "[\\w \\-+:()/]*",
            "description": "Personal account number (PAN), not returned",
            "example": "4242 4242 4242 4242",
            "writeOnly": true
          },
          "panToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValueToken"
              }
            ]
          },
          "success": {
            "type": "boolean",
            "default": true,
            "description": "true for successful conversion",
            "readOnly": true
          },
          "cardExpirationMonth": {
            "type": "integer",
            "minimum": 1,
            "maximum": 12,
            "description": "Optional card expiration month. This should be set along with the card expiration year. If only one of the two fields is set, then a token is not created.",
            "writeOnly": true
          },
          "cardExpirationYear": {
            "type": "integer",
            "minimum": 2000,
            "maximum": 2099,
            "description": "Optional card expiration year. This should be set along with the card expiration month. If only one of the two fields is set, then a token is not created. This must be a 4-digit year between 2000 and 2099, inclusive.",
            "writeOnly": true
          }
        }
      },
      "PointOfInteraction": {
        "title": "PointOfInteraction",
        "description": "",
        "properties": {
          "laneNumber": {
            "type": "string",
            "description": "Lane Number",
            "pattern": "\\\\d{0,8}"
          }
        }
      },
      "PosEntryCapability": {
        "type": "string",
        "title": "PosEntryCapability",
        "description": "",
        "enum": [
          "keyEntry",
          "magneticStripe",
          "emvContact",
          "emvContactless"
        ]
      },
      "PositiveAmountAndCurrency": {
        "title": "PositiveAmountAndCurrency",
        "description": "A positive amount of currency",
        "required": [
          "amount",
          "currencyCode"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Positive [Currency](#section/Overview/Values) amount. At most 9 integer digits and at most 4 fractional digits.",
            "example": "1.23"
          },
          "currencyCode": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "example": "EUR",
            "description": "ISO 4217 three-letter currency code, a three-letter code where the first two letters are the same as the code for the country name, while the third letter often corresponds to the first letter of the currency name (e.g. USD for US dollar, CHF for Swiss franc, etc.)"
          }
        }
      },
      "ProcessorAccount": {
        "title": "ProcessorAccount",
        "description": "A merchant may have multiple processor accounts, although Elavon Payment Gateway currently only supports one. Each processor account tracks and processes transactions separately. For merchants with multiple stores, there might be a separate processor account for each store. As another example, the merchant may need to track ecommerce transactions separately from card-present transactions. Elavon Payment Gateway has plans of supporting more complex use cases where the merchant contracts with multiple payment processors.",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<ProcessorAccount>",
            "description": "ProcessorAccount [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
            "title": "ResourceID<ProcessorAccount>",
            "description": "ProcessorAccount [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "processorReference": {
            "type": "string",
            "description": "Reference assigned by the processor",
            "readOnly": true
          },
          "tradeName": {
            "type": "string",
            "description": "Trading as, operating as, doing business as, fictitious, or assumed name, which may be different than the legal name",
            "example": "Gringotts",
            "readOnly": true
          },
          "businessAddress": {
            "description": "Business Address",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "businessPhone": {
            "type": "string",
            "description": "Business phone",
            "example": "+44 020 7946 0123",
            "readOnly": true
          },
          "businessEmail": {
            "type": "string",
            "example": "sales@gringotts.com",
            "description": "Business email",
            "readOnly": true
          },
          "businessWebsite": {
            "type": "string",
            "description": "Business website",
            "example": "www.gringotts.com",
            "readOnly": true
          },
          "merchantCategoryCode": {
            "type": "string",
            "description": "Merchant category code (MCC), four-digit number from ISO 18245",
            "example": "8734",
            "readOnly": true
          },
          "marketSegment": {
            "description": "Market segment",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MarketSegment"
              }
            ]
          },
          "region": {
            "description": "Region, (e.g., NA, EU)",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Region"
              }
            ]
          },
          "settlementCurrencyCode": {
            "type": "string",
            "description": "Currency to settle funds in. Uses ISO 4217 three-letter currency code.",
            "example": "EUR",
            "readOnly": true
          },
          "languageTag": {
            "type": "string",
            "description": "Language tag",
            "readOnly": true
          },
          "supportedCardBrands": {
            "type": "array",
            "description": "Supported CardBrand(s)",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/CardBrand"
            }
          },
          "supportedPaymentMethods": {
            "type": "array",
            "description": "List of supported payment methods.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          },
          "supportedPaymentMethodOrigins": {
            "type": "array",
            "description": "List of supported payment method origins.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/PaymentMethodOrigin"
            }
          },
          "isDccEnabled": {
            "type": "boolean",
            "description": "Is this processor account DCC-enabled?",
            "readOnly": true
          },
          "isMccEnabled": {
            "type": "boolean",
            "description": "Is this processor account MCC-enabled?",
            "readOnly": true
          },
          "isStandaloneRefundEnabled": {
            "type": "boolean",
            "description": "Does this processor account support standalone refund?",
            "readOnly": true
          },
          "surcharging": {
            "description": "Surcharging",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Surcharging"
              }
            ]
          },
          "pinlessDebit": {
            "type": "array",
            "description": "List of pinless debit card schemes.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/PinlessDebitCardScheme"
            }
          },
          "debitSteering": {
            "description": "Debit steering",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/DebitSteering"
              }
            ]
          },
          "fieldPolicies": {
            "description": "Field policies",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessorAccountFieldPolicies"
              }
            ]
          }
        }
      },
      "ProcessorDirective": {
        "type": "string",
        "title": "ProcessorDirective",
        "description": "",
        "enum": [
          "none",
          "reversal"
        ]
      },
      "ProcessorAccountFieldPolicies": {
        "title": "ProcessorAccountFieldPolicies",
        "description": "",
        "properties": {
          "transaction": {
            "type": "string",
            "description": "Field policies for transaction",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessorAccountTransactionFieldPolicies"
              }
            ]
          }
        }
      },
      "ProcessorAccountTransactionFieldPolicies": {
        "title": "ProcessorAccountTransactionFieldPolicies",
        "description": "",
        "properties": {
          "cardBillToPostalCode": {
            "type": "string",
            "description": "Field policies for card.billTo.postalCode",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessorAccountTransactionPostalOrSecurityCodePolicies"
              }
            ]
          },
          "cardSecurityCode": {
            "type": "string",
            "description": "Field policies for card.securityCode",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessorAccountTransactionPostalOrSecurityCodePolicies"
              }
            ]
          }
        }
      },
      "ProcessorAccountTransactionPostalOrSecurityCodePolicies": {
        "title": "ProcessorAccountTransactionPostalOrSecurityCodePolicies",
        "description": "",
        "properties": {
          "whenTypeIsSaleAndAccountEntryModeIsKeyEnteredAndIsCardPresentIsTruePolicy": {
            "type": "string",
            "description": "Field policy when type is 'sale' and deviceInteraction.accountEntryMode is 'keyEntered' and deviceInteraction.isCardPresent is 'true'",
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldPolicy"
              }
            ]
          },
          "whenTypeIsSaleAndAccountEntryModeIsKeyEnteredAndIsCardPresentIsFalsePolicy": {
            "type": "string",
            "description": "Field policy when type is 'sale' and deviceInteraction.accountEntryMode is 'keyEntered' and deviceInteraction.isCardPresent is 'false'",
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldPolicy"
              }
            ]
          }
        }
      },
      "ProvisioningCode": {
        "title": "ProvisioningCode",
        "description": "",
        "required": [
          "terminal"
        ],
        "properties": {
          "terminal": {
            "title": "ResourceURL<Terminal>",
            "description": "Terminal [Resource URL](#section/Overview/Values)",
            "example": "2vj87dyvbjmcc4crgjcq9w4wg47k",
            "readOnly": true
          },
          "code": {
            "type": "string",
            "example": "f6whp4",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-03-07T13:01:23.123Z",
            "description": "Expires at",
            "readOnly": true
          }
        }
      },
      "RefundSurchargeAdvice": {
        "type": "object",
        "title": "RefundSurchargeAdvice",
        "description": "A refund surcharge advice calculates the amount of refundable surcharge and provides an adjusted refund transaction amount using the previous surcharge advice and the original parent transaction.",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL",
            "description": "RefundSurchargeAdvice [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "388jcqbr7mf73xtj77phbpdbcb86",
            "description": "RefundSurchargeAdvice [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-07-05T19:41:48.886Z",
            "description": "Creation timestamp.",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-07-05T20:11:48.886Z",
            "description": "Expiration timestamp.",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "processorAccount": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<ProcessorAccount>",
            "description": "ProcessorAccount [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "parentTransaction": {
            "type": "string",
            "example": "https://uat.api.converge.eu.elavonaws.com/transactions/99qmrqcpjt2h8cm6q67gwd7kxywy",
            "format": "url",
            "title": "ResourceURL<Transaction>",
            "description": "Transaction [Resource URL](#section/Overview/Values) of the parent transaction for surcharge."
          },
          "total": {
            "description": "The refund total excluding the surcharge amount. A value for partial refund can be specified.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "surchargeRate": {
            "type": "string",
            "description": "The merchant's surcharge rate. A value of 0.035 means 3.5%.",
            "readOnly": true
          },
          "surchargeTotal": {
            "description": "The calculated surcharge total. This value is prorated based on the total amount to be refunded.",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "adjustedTotal": {
            "description": "The adjusted total refund including the calculated surcharge. The calculated surcharge is prorated based on the total amount to be refunded.",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "RefundSurchargeAdviceInput": {
        "type": "object",
        "title": "RefundSurchargeAdvice",
        "description": "A refund surcharge advice calculates the amount of refundable surcharge and provides an adjusted refund transaction amount using the previous surcharge advice and the original parent transaction.",
        "required": [
          "parentTransaction"
        ],
        "properties": {
          "parentTransaction": {
            "type": "string",
            "example": "https://uat.api.converge.eu.elavonaws.com/transactions/99qmrqcpjt2h8cm6q67gwd7kxywy",
            "format": "url",
            "title": "ResourceURL<Transaction>",
            "description": "Transaction [Resource URL](#section/Overview/Values) of the parent transaction for surcharge."
          },
          "total": {
            "description": "The refund total excluding the surcharge amount. A value for partial refund can be specified.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "Region": {
        "type": "string",
        "title": "Region",
        "description": "",
        "enum": [
          "eu",
          "na",
          "unknown"
        ]
      },
      "ResourceType": {
        "type": "string",
        "title": "ResourceType",
        "description": "The type resource affected, if applicable.",
        "example": "transaction",
        "readOnly": true,
        "enum": [
          "merchant",
          "processorAccount",
          "account",
          "planList",
          "order",
          "paymentLink",
          "paymentSession",
          "hostedCard",
          "storedCard",
          "forexAdvice",
          "transaction",
          "batch",
          "shopper",
          "plan",
          "subscription",
          "surchargeAdvice",
          "refundSurchargeAdvice",
          "notification",
          "googlePayPayment",
          "applePayPayment",
          "applePayPaymentSession",
          "totalAdjustment",
          "unknown"
        ]
      },
      "SalesTaxDefaultEntryMethod": {
        "type": "string",
        "title": "SalesTaxDefaultEntryMethod",
        "description": "",
        "enum": [
          "amount",
          "percentage"
        ]
      },
      "Shopper": {
        "type": "object",
        "description": "Details for a Shopper that the Merchant wants to remember for later use.\n\nOther resources may then reference this shopper.\n",
        "required": [
          "fullName"
        ],
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL",
            "description": "Shopper [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
            "description": "Shopper [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Modification timestamp",
            "readOnly": true
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Deletion timestamp",
            "example": "2017-02-22T13:01:33.567Z",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "defaultStoredCard": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<StoredCard>",
            "description": "StoredCard [Resource URL](#section/Overview/Values)\n\nStoredCard to which all payments will be billed and which must belong to the provided Shopper\n"
          },
          "defaultStoredAchPayment": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<StoredAchPayment>",
            "description": "Default stored ACH payment"
          },
          "fullName": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "example": "John Doe",
            "description": "Name"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "example": "Big tipper",
            "description": "Additional info that the Merchant may wish to provide about the Shopper"
          },
          "company": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "example": "Acme",
            "description": "Company"
          },
          "primaryAddress": {
            "description": "Primary address that can be offered as a default for shipping and/or billing",
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "primaryPhone": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[\\w \\-+:()/]*",
            "example": "+44 020 7946 0123",
            "description": "Primary phone"
          },
          "alternatePhone": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[\\w \\-+:()/]*",
            "example": "+44 020 7946 0124",
            "description": "Alternate phone"
          },
          "fax": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[\\w \\-+:()/]*",
            "example": "+44 020 7946 0125",
            "description": "Fax"
          },
          "email": {
            "type": "string",
            "maxLength": 254,
            "example": "john@email.com",
            "description": "Email"
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "SaleTransaction": {
        "title": "Sale Transaction",
        "description": "Sale Transaction",
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionInput"
          },
          {
            "properties": {
              "source": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Source"
                  }
                ]
              },
              "processorAccount": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<ProcessorAccount>",
                "description": "ProcessorAccount [Resource URL](#section/Overview/Values)"
              },
              "account": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<Account>",
                "description": "Account [Resource URL](#section/Overview/Values). Defaults to merchant."
              },
              "total": {
                "description": "Transaction total",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PositiveAmountAndCurrency"
                  }
                ]
              },
              "salesTax": {
                "type": "object",
                "description": "Sales Tax",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
                  }
                ]
              },
              "forexAdvice": {
                "type": "string",
                "format": "url",
                "writeOnly": true,
                "title": "ResourceURL<ForexAdvice>",
                "description": "ForexAdvice [Resource URL](#section/Overview/Values) obtained through the Create ForexAdvice API call, not returned."
              },
              "surchargeAdvice": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<SurchargeAdvice>",
                "description": "Surcharge Advice [Resource URL](#section/Overview/Values) obtained through the create surchargeAdvice API call.",
                "writeOnly": true
              },
              "description": {
                "type": "string",
                "maxLength": 255,
                "description": "Description, which appears on the dashboard and might appear on receipts",
                "example": "March 2017 Rent"
              },
              "shopperStatement": {
                "description": "Dynamic overrides of what might appear on a shopper's statement",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ShopperStatement"
                  }
                ]
              },
              "debtorAccount": {
                "description": "Account information required for MCC 6012/6050/6051 merchants",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DebtorAccount"
                  }
                ]
              },
              "customReference": {
                "type": "string",
                "maxLength": 255,
                "description": "Optional reference provided by the merchant"
              },
              "shopperReference": {
                "type": "string",
                "maxLength": 255,
                "example": "PO 4358",
                "description": "Optional reference provided by the shopper, such as a purchase order"
              },
              "orderReference": {
                "type": "string",
                "maxLength": 255,
                "description": "Optional order reference which we'll display in the merchant dashboard. We'll automatically copy this from a 'sale'"
              },
              "shopperInteraction": {
                "$ref": "#/components/schemas/ShopperInteraction"
              },
              "shopper": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<Shopper>",
                "description": "Shopper [Resource URL](#section/Overview/Values)\n\nShopper, if applicable.\n"
              },
              "shipTo": {
                "description": "Shipping contact details",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Contact"
                  }
                ]
              },
              "shopperEmailAddress": {
                "type": "string",
                "example": "shopper@gmail.com",
                "description": "Shopper's email address, useful for fraud detection and to provide a receipt",
                "maxLength": 254
              },
              "shopperIpAddress": {
                "type": "string",
                "example": "10.9.234.22",
                "description": "Shopper's IP address, useful for fraud detection"
              },
              "shopperLanguageTag": {
                "type": "string",
                "maxLength": 255,
                "example": "en-GB",
                "description": "Shopper's IETF language tag, useful for localising the receipt."
              },
              "shopperTimeZone": {
                "type": "string",
                "example": "Europe/Berlin",
                "description": "Shopper's time zone, specified by the IANA Time Zone Database name.\n"
              },
              "order": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<Order>",
                "description": "Order [Resource URL](#section/Overview/Values)"
              },
              "credentialOnFileType": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CredentialOnFileType"
                  }
                ]
              },
              "credentialOnFileData": {
                "type": "string",
                "maxLength": 29,
                "description": "Value returned when creating an initial transaction for an integrator-managed card. This should be saved and set for succeeding transactions with the same integrator-managed card."
              },
              "card": {
                "$ref": "#/components/schemas/Card"
              },
              "hostedCard": {
                "type": "string",
                "format": "url",
                "writeOnly": true,
                "title": "ResourceURL<HostedCard>",
                "description": "HostedCard [Resource URL](#section/Overview/Values) obtained through the Create HostedCard API call, not returned. Required for 'ecommerce' 'sale' transactions."
              },
              "storedCard": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<StoredCard>",
                "description": "StoredCard [Resource URL](#section/Overview/Values)"
              },
              "achPayment": {
                "description": "ACH payment details",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AchPayment"
                  }
                ],
                "readOnly": true
              },
              "storedAchPayment": {
                "type": "string",
                "format": "url",
                "description": "StoredAchPayment [Resource URL](#section/Overview/Values)",
                "title": "ResourceURL<StoredAchPayment>",
                "readOnly": true
              },
              "hostedAchPayment": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<HostedAchPayment>",
                "description": "HostedAchPayment [Resource URL](#section/Overview/Values)",
                "readOnly": true
              },
              "blik": {
                "writeOnly": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Blik"
                  }
                ]
              },
              "paymentLink": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<PaymentLink>",
                "description": "PaymentLink [Resource URL](#section/Overview/Values)"
              },
              "paymentSession": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<PaymentSession>",
                "description": "PaymentSession [Resource URL](#section/Overview/Values)"
              },
              "threeDSecure": {
                "description": "Additional data that's only needed for 3-D Secure version 2 processing.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ThreeDSecure"
                  }
                ]
              },
              "createdBy": {
                "type": "string",
                "maxLength": 255,
                "example": "user@gmail.com",
                "description": "Who or what created the transaction? When created in Elavon's virtual terminal, this will be the email address of the currently logged in user. When created otherwise, the integrator may optionally provide any value that helps answer this question."
              },
              "customFields": {
                "description": "Custom fields, an object containing arbitrary string values. Field names and values must not exceed 64 and 1024 characters, respectively.",
                "additionalProperties": {
                  "type": "string",
                  "maxLength": 1024
                }
              },
              "doCapture": {
                "type": "boolean",
                "example": false,
                "description": "If false, authorize only; if true (default), authorize and capture funds for settlement"
              },
              "doSendReceipt": {
                "type": "boolean",
                "example": false,
                "description": "Send receipt to shopper's email address, default is false"
              }
            }
          }
        ]
      },
      "SalesTaxEntry": {
        "title": "SalesTaxEntry",
        "description": "",
        "properties": {
          "isEnabled": {
            "type": "boolean",
            "description": "Sales tax is allowed"
          },
          "defaultMethod": {
            "type": "string",
            "description": "Method of sales tax entry",
            "allOf": [
              {
                "$ref": "#/components/schemas/SalesTaxDefaultEntryMethod"
              }
            ]
          },
          "defaultPercent": {
            "type": "string",
            "description": "Value of percentage tax"
          }
        }
      },
      "Signature": {
        "title": "Signature",
        "description": "",
        "properties": {
          "isExpected": {
            "type": "boolean",
            "description": "Is signature expected?"
          },
          "isAvailable": {
            "type": "boolean",
            "description": "Is signature available?",
            "readOnly": true
          },
          "wasBypassed": {
            "readOnly": true,
            "description": "Was signature input requested but shopper declined to provide it?",
            "allOf": [
              {
                "$ref": "#/components/schemas/TrueFalseOrUnknown"
              }
            ]
          }
        }
      },
      "RefundTransaction": {
        "title": "Refund Transaction",
        "description": "Refund Transaction",
        "required": [
          "parentTransaction",
          "type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionInput"
          },
          {
            "properties": {
              "source": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Source"
                  }
                ]
              },
              "processorAccount": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<ProcessorAccount>",
                "description": "ProcessorAccount [Resource URL](#section/Overview/Values)"
              },
              "account": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<Account>",
                "description": "Account [Resource URL](#section/Overview/Values). Defaults to merchant."
              },
              "total": {
                "description": "Transaction total",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PositiveAmountAndCurrency"
                  }
                ]
              },
              "salesTax": {
                "type": "object",
                "description": "Sales Tax",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
                  }
                ]
              },
              "refundSurchargeAdvice": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<RefundSurchargeAdvice>",
                "description": "Refund Surcharge Advice [Resource URL](#section/Overview/Values) obtained through the create refundSurchargeAdvice API call.",
                "writeOnly": true
              },
              "parentTransaction": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<Transaction>",
                "description": "Transaction [Resource URL](#section/Overview/Values) of the parent Transaction"
              },
              "description": {
                "type": "string",
                "maxLength": 255,
                "description": "Description, which appears on the dashboard and might appear on receipts",
                "example": "March 2017 Rent"
              },
              "shopperStatement": {
                "description": "Dynamic overrides of what might appear on a shopper's statement",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ShopperStatement"
                  }
                ]
              },
              "customReference": {
                "type": "string",
                "maxLength": 255,
                "description": "Optional reference provided by the merchant"
              },
              "shopperReference": {
                "type": "string",
                "maxLength": 255,
                "example": "PO 4358",
                "description": "Optional reference provided by the shopper, such as a purchase order"
              },
              "shopperInteraction": {
                "$ref": "#/components/schemas/ShopperInteraction"
              },
              "shopperEmailAddress": {
                "type": "string",
                "example": "shopper@gmail.com",
                "description": "Shopper's email address, useful for fraud detection and to provide a receipt",
                "maxLength": 254
              },
              "shopperIpAddress": {
                "type": "string",
                "example": "10.9.234.22",
                "description": "Shopper's IP address, useful for fraud detection"
              },
              "shopperLanguageTag": {
                "type": "string",
                "maxLength": 255,
                "example": "en-GB",
                "description": "Shopper's IETF language tag, useful for localising the receipt"
              },
              "shopperTimeZone": {
                "type": "string",
                "example": "Europe/Berlin",
                "description": "Shopper's time zone, specified by the IANA Time Zone Database name"
              },
              "paymentLink": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<PaymentLink>",
                "description": "PaymentLink [Resource URL](#section/Overview/Values)"
              },
              "paymentSession": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<PaymentSession>",
                "description": "PaymentSession [Resource URL](#section/Overview/Values)"
              },
              "createdBy": {
                "type": "string",
                "maxLength": 255,
                "example": "user@gmail.com",
                "description": "Who or what created the transaction? When created in Elavon's virtual terminal, this will be the email address of the currently logged in user. When created otherwise, the integrator may optionally provide any value that helps answer this question."
              },
              "customFields": {
                "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
                "additionalProperties": {
                  "type": "string",
                  "maxLength": 1024
                }
              },
              "doCapture": {
                "type": "boolean",
                "example": false,
                "description": "If false, authorize only; if true (default), authorize and capture funds for settlement."
              },
              "doSendReceipt": {
                "type": "boolean",
                "example": false,
                "description": "Send receipt to shopper's email address, default is false."
              }
            }
          }
        ]
      },
      "ShopperInteraction": {
        "type": "string",
        "default": "ecommerce",
        "title": "ShopperInteraction",
        "description": "The type of interaction with the shopper that generated this payment session.\n\n  - **ecommerce** : The shopper generated this transaction with an ecommerce interaction.\n  - **mailOrder** : The shopper generated this transaction with a mail order.\n  - **telephoneOrder** : The shopper generated this transaction with a telephone Order.\n  - **merchantInitiated** : A merchant generated this transaction without shopper involvement.\n",
        "enum": [
          "ecommerce",
          "mailOrder",
          "telephoneOrder",
          "merchantInitiated",
          "inPerson"
        ]
      },
      "ShopperStatement": {
        "title": "ShopperStatement",
        "description": "Shopper Statement",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 25,
            "pattern": "[^%<>/\\[\\]{}\\\\]*",
            "example": "GLOBE THEATRE*OTHELLO"
          },
          "phone": {
            "type": "string",
            "maxLength": 20,
            "pattern": "[\\w \\-+:()/]*",
            "example": "02079021409"
          },
          "url": {
            "type": "string",
            "maxLength": 13,
            "example": "GLOBE"
          }
        }
      },
      "SignatureVerification": {
        "type": "string",
        "title": "SignatureVerification",
        "description": "",
        "enum": [
          "disabled",
          "optional",
          "magneticStripeOnly",
          "always"
        ]
      },
      "Source": {
        "type": "string",
        "example": "directApiCall",
        "title": "Source",
        "description": "Provided by the API caller to help identify how the transaction is submitted, defaults to 'directApiCall'.",
        "enum": [
          "directApiCall",
          "hppSubmitRedirect",
          "hppIframeLightbox",
          "hppIframeEmbedded",
          "hppSdk",
          "virtualTerminal",
          "gatewayRecurring",
          "payByLink",
          "monitoring",
          "hppFields",
          "physicalTerminal",
          "unknown"
        ]
      },
      "StoredAchPayment": {
        "type": "object",
        "title": "StoredAchPayment",
        "description": "An ACH payment that is stored for a Shopper and may be used for recurring payments.",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL",
            "description": "StoredAchPayment [Resource URL](#section/Overview/Values) (self link).",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "thl3tLtobOfriy2spepro9ep",
            "description": "StoredAchPayment [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp.",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Modification timestamp.",
            "readOnly": true
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Deletion timestamp.",
            "example": "2017-02-22T13:01:33.567Z",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "shopper": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Shopper>",
            "description": "Shopper [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "achPayment": {
            "description": "ACH payment details. Only accountName can be updated.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AchPayment"
              }
            ]
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "StoredAchPaymentInput": {
        "type": "object",
        "title": "StoredAchPaymentInput",
        "description": "An ACH payment that is stored for a Shopper and may be used for recurring payments.",
        "properties": {
          "shopper": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Shopper>",
            "description": "Shopper [Resource URL](#section/Overview/Values)"
          },
          "hostedAchPayment": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<HostedAchPayment>",
            "description": "HostedAchPayment from which to initialize this StoredAchPayment",
            "writeOnly": true
          },
          "achPayment": {
            "description": "ACH payment details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AchPayment"
              }
            ]
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "StoredCard": {
        "type": "object",
        "title": "StoredCard",
        "description": "A Card that is stored for a Shopper and may be used for recurring payments.",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL",
            "description": "StoredCard [Resource URL](#section/Overview/Values) (self link).",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
            "description": "StoredCard [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp.",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Modification timestamp.",
            "readOnly": true
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Deletion timestamp.",
            "example": "2017-02-22T13:01:33.567Z",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "shopper": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Shopper>",
            "description": "Shopper [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "shopperInteraction": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<ShopperInteraction>",
            "description": "Shopper interaction, defaults to 'ecommerce'",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ShopperInteraction"
              }
            ]
          },
          "hostedCard": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<HostedCard>",
            "writeOnly": true,
            "description": "HostedCard [Resource URL](#section/Overview/Values)\n\nThe hosted card details to use when initializing this stored card.\n"
          },
          "card": {
            "description": "Card details",
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ],
            "readOnly": true
          },
          "credentialOnFileType": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<CredentialOnFileType>",
            "description": "Credential on file type, used with cards in a wallet, defaults to 'unScheduled'",
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialOnFileType"
              }
            ],
            "readOnly": true,
            "default": "unscheduled"
          },
          "verificationResults": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationResults"
              }
            ]
          },
          "paymentMethodLink": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PaymentMethodLink>",
            "description": "Payment Method Link [Resource URL](#section/Overview/Values).",
            "example": "https://uat.api.converge.eu.elavonaws.com/payment-method-links/jOZEpu7IkEPlsWo4PafrlHEm94Ls"
          },
          "paymentMethodSession": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PaymentMethodSession>",
            "description": "Payment Method Session [Resource URL](#section/Overview/Values)."
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "StoredCardInput": {
        "type": "object",
        "title": "StoredCard",
        "description": "A Card that is stored for a Shopper and may be used for recurring payments",
        "required": [
          "shopper"
        ],
        "properties": {
          "shopper": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Shopper>",
            "description": "Shopper [Resource URL](#section/Overview/Values)"
          },
          "hostedCard": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<HostedCard>",
            "writeOnly": true,
            "description": "HostedCard [Resource URL](#section/Overview/Values)\n\nThe hosted card details to use when initializing this stored card.\n"
          },
          "card": {
            "description": "Card details",
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ]
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "Subscription": {
        "type": "object",
        "title": "Subscription",
        "description": "A subscription associates a shopper with a plan, and details exactly how and when the shopper will be billed",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL",
            "description": "Subscription [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
            "description": "Subscription [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Modification timestamp",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "plan": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Plan>",
            "description": "Plan [Resource URL](#section/Overview/Values)\n\nPlan determines the billing details and their frequency\n",
            "readOnly": true
          },
          "shopper": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Shopper>",
            "description": "Shopper [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "account": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Account>",
            "description": "Account [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "debtorAccount": {
            "description": "Account information required for MCC 6012 merchants when collecting debt payments.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DebtorAccount"
              }
            ],
            "readOnly": true
          },
          "doSendReceipt": {
            "type": "string",
            "description": "Send receipt to shopper's email address. The default value is 'DEFAULT', which will use the merchant setting for sending receipts for recurring sales",
            "default": "DEFAULT",
            "enum": [
              true,
              false,
              "DEFAULT"
            ]
          },
          "storedCard": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<StoredCard>",
            "description": "StoredCard [Resource URL](#section/Overview/Values)\n\nStoredCard to which all payments will be billed and which must belong to the provided Shopper\n",
            "readOnly": true
          },
          "storedAchPayment": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<StoredAchPayment>",
            "description": "An ACH payment that is stored for a shopper and may be used for recurring payments."
          },
          "billCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "description": "The total number of bills. May only be provided if not defined in plan",
            "readOnly": true
          },
          "timeZoneId": {
            "type": "string",
            "description": "The time zone ID for date fields in the subscription.",
            "example": "Europe/London",
            "readOnly": true
          },
          "firstBillAt": {
            "type": "string",
            "format": "date",
            "example": "2017-02-22",
            "description": "First bill date, which anchors the billing interval and determines all future bill dates. For monthly and yearly billing intervals, if the first bill date occurs on the last day of the month then all future bill dates will be adjusted to occur on the last day of the month.",
            "readOnly": true
          },
          "nextBillAt": {
            "type": "string",
            "format": "date",
            "example": "2017-02-22",
            "description": "Next bill date as calculated from the first or previous bill date according to the plan's billing interval",
            "readOnly": true
          },
          "previousBillAt": {
            "type": "string",
            "format": "date",
            "example": "2017-02-22",
            "description": "The most recent bill date, regardless of whether or not the payment has been successfully made",
            "readOnly": true
          },
          "finalBillAt": {
            "type": "string",
            "format": "date",
            "example": "2017-02-22",
            "readOnly": true,
            "description": "The date of final bill if not open ended payment plan"
          },
          "cancelRequestedAt": {
            "type": "string",
            "format": "date",
            "example": "2017-02-22",
            "description": "The date in which cancel was requested",
            "readOnly": true
          },
          "cancelAfterBillNumber": {
            "type": "integer",
            "format": "int32",
            "description": "The bill number after which no further billings will occur"
          },
          "nextBillNumber": {
            "type": "integer",
            "format": "int32",
            "description": "The number of the next bill according to the plan's schedule",
            "readOnly": true
          },
          "subscriptionState": {
            "$ref": "#/components/schemas/SubscriptionState",
            "readOnly": true
          },
          "failureCount": {
            "type": "integer",
            "description": "The count of consecutive failures performing current payment",
            "example": 1,
            "readOnly": true
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "SubscriptionInput": {
        "type": "object",
        "title": "Subscription",
        "description": "A subscription associates a shopper with a plan, detailing exactly how and when the shopper will be billed",
        "required": [
          "plan",
          "storedCard",
          "firstBillAt",
          "timeZoneId"
        ],
        "properties": {
          "plan": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Plan>",
            "description": "Plan [Resource URL](#section/Overview/Values).\n\nPlan determines the billing details and their frequency.\n"
          },
          "account": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Account>",
            "description": "Account [Resource URL](#section/Overview/Values). Defaults to merchant."
          },
          "doSendReceipt": {
            "type": "string",
            "description": "Send receipt to shopper's email address. The default value is 'DEFAULT', which will use the merchant setting for sending receipts for recurring sales",
            "default": "DEFAULT",
            "enum": [
              true,
              false,
              "DEFAULT"
            ]
          },
          "storedCard": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<StoredCard>",
            "description": "StoredCard [Resource URL](#section/Overview/Values)\n\nStoredCard to which all payments will be billed and which must belong to the provided Shopper.\n"
          },
          "storedAchPayment": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<StoredAchPayment>",
            "description": "An ACH payment that is stored for a shopper and may be used for recurring payments."
          },
          "billCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "description": "The total number of bills. May only be provided if not defined in plan."
          },
          "timeZoneId": {
            "type": "string",
            "description": "The time zone ID for date fields in the subscription. This follows the IANA Timezone Database Name convention.",
            "example": "Europe/London"
          },
          "firstBillAt": {
            "type": "string",
            "format": "date",
            "example": "2017-02-22",
            "description": "The first bill date. This value anchors the billing interval and determines all future bill dates.\nFor monthly and yearly billing intervals, if the first bill date occurs on the last day of the month then all future bill dates will be adjusted to occur on the last day of the month."
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "Surcharge": {
        "title": "Surcharge",
        "description": "Surcharge information if surchargeAdvice or refundSurchargeAdvice was created for the transaction.",
        "properties": {
          "unadjustedTotal": {
            "description": "Transaction total before adding surcharge total.",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "unadjustedRefundableTotal": {
            "description": "Amount of original unadjusted transaction still available for refund.",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "surchargeTotal": {
            "description": "Surcharge total.",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "rate": {
            "type": "string",
            "description": "The merchant's surcharge rate. A value of 0.035 means 3.5%.",
            "example": "0.035",
            "readOnly": true
          }
        }
      },
      "SurchargeAdvice": {
        "type": "object",
        "title": "SurchargeAdvice",
        "description": "A surcharge advice calculates the amount of available surcharge and provides an adjusted transaction total for specific personal account numbers or stored cards.",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL",
            "description": "SurchargeAdvice [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "h4jtcrxffvdbmvwg79xvkf8fqf6",
            "description": "SurchargeAdvice [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-07-05T19:27:44.570Z",
            "description": "Creation timestamp.",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-07-05T19:57:44.570Z",
            "description": "Expiration timestamp.",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "processorAccount": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<ProcessorAccount>",
            "description": "ProcessorAccount [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "hsmCard": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<HsmCard>",
            "description": "Hsm Card [Resource URL](#section/Overview/Values)"
          },
          "panToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValueToken"
              }
            ]
          },
          "maskedNumber": {
            "type": "string",
            "description": "Masked card number.",
            "example": "XXXX.XXXX.XXXX.4444",
            "readOnly": true
          },
          "last4": {
            "type": "string",
            "minLength": 4,
            "maxLength": 4,
            "description": "Last 4 digits of a card number.",
            "example": "4444",
            "readOnly": true
          },
          "bin": {
            "type": "string",
            "minLength": 6,
            "maxLength": 6,
            "description": "Issuer/Bank identification number / IIN / BIN.",
            "example": "425702",
            "readOnly": true
          },
          "panFingerprint": {
            "type": "string",
            "description": "Personal account number (PAN) fingerprint.",
            "readOnly": true
          },
          "total": {
            "description": "The transaction total excluding the surcharge amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "surchargeRate": {
            "type": "string",
            "description": "The merchant's surcharge rate. A value of 0.035 means 3.5%.",
            "readOnly": true
          },
          "surchargeTotal": {
            "description": "The calculated surcharge total.",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "adjustedTotal": {
            "description": "The adjusted total including the calculated surcharge.",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "SurchargeAdviceInput": {
        "type": "object",
        "title": "SurchargeAdvice",
        "description": "A surcharge advice calculates the amount of available surcharge and provides an adjusted transaction total for specific personal account numbers or stored cards. At least one of the following is required to create a surcharge advice request: storedCard, hostedCard, cardNumber, or panToken.",
        "required": [
          "total"
        ],
        "properties": {
          "storedCard": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<StoredCard>",
            "description": "StoredCard [Resource URL](#section/Overview/Values)",
            "writeOnly": true
          },
          "hostedCard": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<HostedCard>",
            "description": "HostedCard [Resource URL](#section/Overview/Values)",
            "writeOnly": true
          },
          "cardNumber": {
            "type": "string",
            "minLength": 13,
            "maxLength": 23,
            "pattern": "\\D*(?:\\d\\D*){13,19}",
            "writeOnly": true,
            "description": "Personal account number (PAN), not returned.",
            "example": "XXXX XXXX XXXX XXXX"
          },
          "panToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValueToken"
              }
            ]
          },
          "total": {
            "description": "The transaction total excluding the surcharge amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "Surcharging": {
        "title": "Surcharging",
        "description": "",
        "properties": {
          "isEnabled": {
            "type": "boolean",
            "description": "Surcharging is allowed"
          },
          "rate": {
            "type": "string",
            "description": "Surcharging rate percentage. A value of 0.0399 means 3.99%",
            "example": "0.0399"
          }
        }
      },
      "SubscriptionState": {
        "type": "string",
        "title": "SubscriptionState",
        "example": "active",
        "description": "Current state of the subscription",
        "readOnly": true,
        "enum": [
          "active",
          "completed",
          "cancelled",
          "unpaid",
          "pastDue",
          "unknown"
        ]
      },
      "TerminalOutputCapability": {
        "type": "string",
        "title": "TerminalOutputCapability",
        "description": "",
        "enum": [
          "printer",
          "display"
        ]
      },
      "Terminal": {
        "title": "Terminal",
        "description": "Information about the terminal",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier assigned to the terminal.",
            "readOnly": true
          },
          "merchant": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/merchants/yfv23vhdptrgd3c3dpg3khydw22f",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values), suppressed when a public API key is used",
            "readOnly": true
          },
          "processorAccount": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/mprocessor-accounts/d4xcjxf4282xrtvcdcpv3wrxq77v",
            "format": "url",
            "title": "ResourceURL<ProcessorAccount>",
            "description": "ProcessorAccount [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "processorReference": {
            "type": "string",
            "description": "Reference assigned by the processor.",
            "readOnly": true
          },
          "terminalType": {
            "type": "string",
            "description": "Terminal Type, HARDWARE or SOFTWARE.",
            "readOnly": true,
            "example": "HARDWARE",
            "allOf": [
              {
                "$ref": "#/components/schemas/TerminalType"
              }
            ]
          },
          "hostLastUpdatedEmvKeysAt": {
            "type": "string",
            "format": "date-time",
            "description": "Most recent date host updated their Emv Keys",
            "example": "2023-01-04T13:44:36.597Z",
            "readOnly": true
          },
          "provisionedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-02-22T13:01:23.123Z",
            "description": "Terminal provision timestamp",
            "readOnly": true
          },
          "transactedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-02-22T13:01:23.123Z",
            "description": "Terminal last transaction timestamp",
            "readOnly": true
          }
        }
      },
      "TerminalType": {
        "type": "string",
        "title": "TerminalType",
        "description": "",
        "enum": [
          "hardware",
          "software"
        ]
      },
      "ThreeDSecure": {
        "title": "ThreeDSecure",
        "description": "3-D Secure v2",
        "required": [
          "directoryServerTransactionId",
          "transactionStatus",
          "protocolVersion"
        ],
        "properties": {
          "directoryServerTransactionId": {
            "type": "string",
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[12345][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}",
            "description": "A universally unique transaction identifier assigned by the directory server that maps authentications to authorizations, in IETF RFC 4122 format\n",
            "example": "88093c16-4659-4b23-bc84-b5a790779107"
          },
          "transactionStatus": {
            "type": "string",
            "pattern": "[YNUA]",
            "description": "Often shortened to 'transStatus', a code to indicate the outcome of the shopper authentication\n\nMust be 'Y', 'N', 'U', or 'A'\n",
            "example": "Y"
          },
          "electronicCommerceIndicator": {
            "type": "string",
            "pattern": "0?[012567]",
            "description": "Often shortened to 'eci', a code to indicate the security level used to authenticate the shopper\n\nMust be '0', '1', '2', '5', '6', or '7', optionally with a leading zero\n",
            "example": "05"
          },
          "authenticationValue": {
            "type": "string",
            "minLength": 28,
            "maxLength": 28,
            "description": "Proof of authentication provided by the access control server, 20 bytes Base64 encoded giving a 28 character value\n",
            "example": "DO+j0b3yB6NR9vJ+BO6O099GvzY="
          },
          "protocolVersion": {
            "type": "string",
            "minLength": 1,
            "maxLength": 8,
            "pattern": "\\d+.\\d+.\\d+",
            "description": "Version provided by the access control server",
            "example": "2.1.0"
          }
        }
      },
      "TimeUnit": {
        "type": "string",
        "title": "TimeUnit",
        "description": "Unit of time for a",
        "enum": [
          "day",
          "week",
          "month",
          "year"
        ]
      },
      "TotalAdjustment": {
        "title": "TotalAdjustment",
        "description": "An adjustment to the total and/or tip of an existing transaction. Check the 'isAuthorized' field to see whether or not the adjustment was authorized. If not authorized, check the 'failures' array  to determine why.",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<TotalAdjustment>",
            "description": "TotalAdjustment [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "teKosOTAwec6blDRlD0iXeWo",
            "title": "ResourceID<Transaction>",
            "description": "TotalAdjustment [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "transaction": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/transactions/teKosOTAwec6blDRlD0iXeWo",
            "format": "url",
            "title": "ResourceURL<Transaction>",
            "description": "Transaction [Resource URL](#section/Overview/Values), suppressed when a public API key is used",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-02-22T13:01:23.123Z",
            "description": "Creation timestamp",
            "readOnly": true
          },
          "total": {
            "description": "The cumulative new total amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "totalAdjustment": {
            "description": "The positive or negative adjustment to the prior authorized amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountAndCurrency"
              }
            ]
          },
          "salesTax": {
            "description": "The cumulative new sales tax.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "salesTaxAdjustment": {
            "description": "The positive or negative adjustment to the prior salesTax amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountAndCurrency"
              }
            ]
          },
          "tip": {
            "description": "Tip amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "tipAdjustment": {
            "description": "The positive or negative adjustment to the prior tip amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountAndCurrency"
              }
            ]
          },
          "processorReference": {
            "type": "string",
            "description": "Reference assigned by the processor",
            "readOnly": true
          },
          "issuerReference": {
            "type": "string",
            "description": "Reference assigned by the processor",
            "readOnly": true
          },
          "doCapture": {
            "type": "boolean",
            "description": "If false, authorize only; if true (default), authorize and capture funds for settlement."
          },
          "isAuthorized": {
            "type": "boolean",
            "readOnly": true,
            "description": "Transaction is authorized?"
          },
          "authorizationCode": {
            "type": "string",
            "readOnly": true,
            "description": "Authorization code"
          },
          "issuerResponseCode": {
            "type": "string",
            "readOnly": true,
            "description": "Issuer response code"
          },
          "rawProcessorResponseInfo": {
            "type": "string",
            "readOnly": true,
            "description": "Raw response data from the processor."
          },
          "failures": {
            "type": "array",
            "description": "Failure details, if the transaction was not authorized",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Failure"
            }
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "TotalAdjustmentInput": {
        "title": "TotalAdjustmentInput",
        "description": "An adjustment to the total and/or tip of an existing transaction. Check the 'isAuthorized' field to see whether or not the adjustment was authorized. If not authorized, check the 'failures' array  to determine why.",
        "required": [
          "transaction"
        ],
        "properties": {
          "transaction": {
            "type": "string",
            "example": "https://api.eu.convergepay.com/transactions/teKosOTAwec6blDRlD0iXeWo",
            "format": "url",
            "title": "ResourceURL<Transaction>",
            "description": "Transaction [Resource URL](#section/Overview/Values), suppressed when a public API key is used"
          },
          "total": {
            "description": "The cumulative new total amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "totalAdjustment": {
            "description": "The positive or negative adjustment to the prior authorized amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountAndCurrency"
              }
            ]
          },
          "salesTax": {
            "description": "The cumulative new sales tax.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "salesTaxAdjustment": {
            "description": "The positive or negative adjustment to the prior salesTax amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountAndCurrency"
              }
            ]
          },
          "tip": {
            "description": "Tip amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "tipAdjustment": {
            "description": "The positive or negative adjustment to the prior tip amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountAndCurrency"
              }
            ]
          },
          "doCapture": {
            "type": "boolean",
            "description": "If false, authorize only; if true (default), authorize and capture funds for settlement."
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          }
        }
      },
      "Transaction": {
        "title": "Transaction",
        "description": "A payment transaction. Create a 'sale' transaction to take payment. Create a 'void' transaction and reference a parent 'sale' transaction to attempt to reverse a transaction that hasn't yet settled. If settled, a 'refund' transaction should be created instead. Check the 'isAuthorized' field to see whether or not the transaction was authorized, regardless of type. If not authorized, check the 'failures' array to determine why.",
        "properties": {
          "href": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Transaction>",
            "description": "Transaction [Resource URL](#section/Overview/Values) (self link)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
            "title": "ResourceID<Transaction>",
            "description": "Transaction [Resource ID](#section/Overview/Values) assigned by server.",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Creation timestamp",
            "readOnly": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Modification timestamp",
            "readOnly": true
          },
          "authorizationExpiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2017-02-22T13:01:23.123Z",
            "description": "Transaction's expiration timestamp",
            "readOnly": true
          },
          "refundableUntil": {
            "type": "string",
            "format": "date-time",
            "example": "2023-02-22T13:01:23.123Z",
            "description": "Refundable until timestamp",
            "readOnly": true
          },
          "type": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionType"
              }
            ]
          },
          "processorDirective": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessorDirective"
              }
            ]
          },
          "paymentMethod": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ]
          },
          "paymentMethodOrigin": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodOrigin"
              }
            ]
          },
          "paymentMethodQualifier": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodQualifier"
              }
            ]
          },
          "source": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ]
          },
          "merchant": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Merchant>",
            "description": "Merchant [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "processorAccount": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<ProcessorAccount>",
            "description": "ProcessorAccount [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "account": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Account>",
            "description": "Account [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "terminal": {
            "title": "ResourceURL<Terminal>",
            "description": "Terminal [Resource URL](#section/Overview/Values)"
          },
          "total": {
            "description": "Transaction total",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "totalRefunded": {
            "description": "The sum of all refunds against this transaction",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveAmountAndCurrency"
              }
            ]
          },
          "issuerTotal": {
            "description": "Total in the target currency",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountAndCurrency"
              }
            ]
          },
          "tip": {
            "type": "object",
            "description": "Tip amount.",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "salesTax": {
            "type": "object",
            "description": "Sales Tax",
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
              }
            ]
          },
          "conversionRate": {
            "type": "string",
            "description": "The currency exchange rate (1 unit of total currency = 11.89 units of issuer currency)",
            "example": "11.89",
            "readOnly": true
          },
          "markupRate": {
            "type": "string",
            "description": "The markup percent. A value of 0.0399 means 3.99%",
            "example": "0.0399",
            "readOnly": true
          },
          "markupRateAnnotation": {
            "$ref": "#/components/schemas/MarkupRateAnnotation"
          },
          "rateProviderName": {
            "type": "string",
            "description": "Rate provider name",
            "example": "US Bank",
            "readOnly": true
          },
          "forexAdvice": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "title": "ResourceURL<ForexAdvice>",
            "description": "ForexAdvice [Resource URL](#section/Overview/Values)"
          },
          "surcharge": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Surcharge"
              }
            ]
          },
          "parentTransaction": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Transaction>",
            "description": "Transaction [Resource URL](#section/Overview/Values) of the parent Transaction",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "Description, which appears on the dashboard and might appear on receipts",
            "example": "March 2017 Rent",
            "readOnly": true
          },
          "shopperStatement": {
            "description": "Dynamic overrides of what might appear on a shopper's statement",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ShopperStatement"
              }
            ]
          },
          "debtorAccount": {
            "description": "Account information required for MCC 6012/6050/6051 merchants",
            "allOf": [
              {
                "$ref": "#/components/schemas/DebtorAccount"
              }
            ],
            "readOnly": true
          },
          "customReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional reference provided by the merchant"
          },
          "shopperReference": {
            "type": "string",
            "maxLength": 255,
            "example": "PO 4358",
            "description": "Optional reference provided by the shopper, such as a purchase order",
            "readOnly": true
          },
          "purchaserReference": {
            "type": "string",
            "maxLength": 17,
            "description": "Optional identifier provided by the merchant/integrator to represent the shopper.",
            "readOnly": true
          },
          "processorReference": {
            "type": "string",
            "description": "Reference assigned by the processor",
            "readOnly": true
          },
          "issuerReference": {
            "type": "string",
            "description": "Reference assigned by the card issuer",
            "readOnly": true
          },
          "orderReference": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional order reference which we'll display in the merchant dashboard. We'll automatically copy this from a 'sale'",
            "readOnly": true
          },
          "invoiceNumber": {
            "type": "string",
            "maxLength": 25,
            "description": "Optional invoice number."
          },
          "marketSegment": {
            "description": "Market segment for this transaction, to be sent on to processor",
            "allOf": [
              {
                "$ref": "#/components/schemas/MarketSegment"
              }
            ]
          },
          "shopperInteraction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShopperInteraction"
              }
            ],
            "readOnly": true
          },
          "shopper": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Shopper>",
            "description": "Shopper [Resource URL](#section/Overview/Values)\n\nShopper, if applicable.\n",
            "readOnly": true
          },
          "shipTo": {
            "description": "Shipping contact details",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Contact"
              }
            ]
          },
          "shippingDate": {
            "type": "string",
            "format": "local-date",
            "example": "2024-05-17",
            "description": "Optional shipping date."
          },
          "shopperEmailAddress": {
            "type": "string",
            "example": "shopper@gmail.com",
            "description": "Shopper's email address, useful for fraud detection and to provide a receipt",
            "readOnly": true
          },
          "shopperIpAddress": {
            "type": "string",
            "example": "10.9.234.22",
            "description": "Shopper's IP address, useful for fraud detection",
            "readOnly": true
          },
          "shopperLanguageTag": {
            "type": "string",
            "maxLength": 255,
            "example": "en-GB",
            "description": "Shopper's IETF language tag, useful for localising the receipt",
            "readOnly": true
          },
          "shopperTimeZone": {
            "type": "string",
            "example": "Europe/Berlin",
            "description": "Shopper's time zone, specified by the IANA Time Zone Database name",
            "readOnly": true
          },
          "order": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Order>",
            "description": "Order [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "subscription": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Subscription>",
            "description": "Subscription [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "credentialOnFileType": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialOnFileType"
              }
            ]
          },
          "credentialOnFileData": {
            "type": "string",
            "maxLength": 29,
            "description": "Value returned when creating an initial transaction for an integrator-managed card. This should be saved and set for succeeding transactions with the same integrator-managed card."
          },
          "card": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ]
          },
          "hostedCard": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "title": "ResourceURL<HostedCard>",
            "description": "HostedCard [Resource URL](#section/Overview/Values) obtained through the Create HostedCard API call, not returned. Required for 'ecommerce' 'sale' transactions."
          },
          "hsmCard": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "title": "ResourceURL<HsmCard>",
            "description": "HsmCard [Resource URL](#section/Overview/Values) obtained through the card present API call, not returned."
          },
          "storedCard": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "title": "ResourceURL<StoredCard>",
            "description": "StoredCard [Resource URL](#section/Overview/Values)"
          },
          "achPayment": {
            "description": "ACH payment details",
            "allOf": [
              {
                "$ref": "#/components/schemas/AchPayment"
              }
            ],
            "readOnly": true
          },
          "storedAchPayment": {
            "type": "string",
            "format": "url",
            "description": "StoredAchPayment [Resource URL](#section/Overview/Values)",
            "title": "ResourceURL<StoredAchPayment>",
            "readOnly": true
          },
          "hostedAchPayment": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<HostedAchPayment>",
            "description": "HostedAchPayment [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "deviceInteraction": {
            "description": "Information when using a hardware terminal.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DeviceInteraction"
              }
            ]
          },
          "pointOfInteraction": {
            "description": "Information about location of interaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PointOfInteraction"
              }
            ]
          },
          "paymentLink": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PaymentLink>",
            "description": "PaymentLink [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "paymentSession": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PaymentSession>",
            "description": "PaymentSession [Resource URL](#section/Overview/Values)",
            "readOnly": true
          },
          "threeDSecure": {
            "description": "Additional data that's only needed for 3-D Secure version 2 processing.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ThreeDSecure"
              }
            ],
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "maxLength": 255,
            "example": "user@gmail.com",
            "description": "Who or what created the transaction? When created in Elavon's virtual terminal, this will be the email address of the currently logged in user. When created otherwise, the integrator may optionally provide any value that helps answer this question.",
            "readOnly": true
          },
          "customFields": {
            "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
            "additionalProperties": {
              "type": "string",
              "maxLength": 1024
            }
          },
          "isHeldForReview": {
            "type": "boolean",
            "example": false,
            "description": "If true, the transaction was authorized but has been held for review. While this is true, no further processing will occur for this transaction. All held transactions can be reviewed by the merchant in their dashboard. To approve with the API, update this field to false. To decline instead, create a 'void' transaction."
          },
          "isTotalAdjustable": {
            "type": "boolean",
            "example": true,
            "description": "If true, the authorized total for the transaction can be adjusted."
          },
          "doCapture": {
            "type": "boolean",
            "example": false,
            "description": "If false, authorize only; if true (default), authorize and capture funds for settlement"
          },
          "doSendReceipt": {
            "type": "boolean",
            "example": false,
            "description": "Send receipt to shopper's email address, default is false",
            "readOnly": true
          },
          "signature": {
            "description": "Point of Sale Signature",
            "allOf": [
              {
                "$ref": "#/components/schemas/Signature"
              }
            ]
          },
          "isAuthorized": {
            "type": "boolean",
            "example": true,
            "description": "Indicates whether a transaction is authorized. Transactions of type 'sale' are authorized by the gateway, the processor, and the issuer. Transactions of type 'void' and 'refund' are authorized by the gateway.",
            "readOnly": true
          },
          "partialAuthorization": {
            "description": "Partial Authorization Information",
            "allOf": [
              {
                "$ref": "#/components/schemas/PartialAuthorization"
              }
            ]
          },
          "authorizationCode": {
            "type": "string",
            "example": "546584",
            "description": "Authorization code",
            "readOnly": true
          },
          "issuerResponseCode": {
            "type": "string",
            "example": "00",
            "description": "Issuer response code",
            "readOnly": true
          },
          "verificationResults": {
            "description": "Verification results, if available",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationResults"
              }
            ]
          },
          "state": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionState"
              }
            ]
          },
          "batch": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<Batch>",
            "description": "Batch [Resource URL](#section/Overview/Values). The Batch in which this Transaction was settled.",
            "readOnly": true
          },
          "processorBatchReference": {
            "type": "string",
            "description": "Processor Batch reference txn is  settled in.",
            "readOnly": true
          },
          "pazePayment": {
            "type": "string",
            "format": "url",
            "title": "ResourceURL<PazePayment>",
            "description": "PazePayment [Resource URL](#section/Overview/Values). PazePayment used to create a transaction.",
            "readOnly": true
          },
          "relatedTransactions": {
            "type": "array",
            "title": "ResourceURL<Transaction>",
            "description": "Transaction [Resource URL](#section/Overview/Values)(s) related to this Transaction (e.g. refunds)",
            "readOnly": true,
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "failures": {
            "type": "array",
            "description": "Failure details, if the transaction was not authorized",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Failure"
            }
          },
          "history": {
            "type": "array",
            "description": "History",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/HistoryEntry"
            }
          }
        }
      },
      "TransactionInput": {
        "title": "Transaction",
        "description": "A payment transaction. Create a 'sale' transaction to take payment. Create a 'void' transaction and reference a parent 'sale' transaction to attempt to reverse a transaction that hasn't yet settled. If settled a 'refund' transaction should be created instead. Check the 'isAuthorized' field to see whether or not the transaction was authorized, regardless of type. If not authorized, check the 'failures' array to determine why.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of transaction, defaults to 'sale'",
            "default": "sale"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "sale": "#/components/schemas/SaleTransaction",
            "refund": "#/components/schemas/RefundTransaction",
            "void": "#/components/schemas/VoidTransaction"
          }
        }
      },
      "TransactionAdvice": {
        "type": "string",
        "title": "TransactionAdvice",
        "description": "Transaction advice",
        "enum": [
          "nonReloadablePrepaidCard",
          "singleUseVirtualCard",
          "consumerMultiUseVirtualCard"
        ]
      },
      "TransactionState": {
        "type": "string",
        "title": "TransactionState",
        "example": "authorized",
        "description": "Current state",
        "readOnly": true,
        "enum": [
          "declined",
          "authorized",
          "captured",
          "voided",
          "settled",
          "expired",
          "settlementDelayed",
          "rejected",
          "heldForReview",
          "unknown",
          "authorizationPending"
        ]
      },
      "TransactionType": {
        "type": "string",
        "title": "TransactionType",
        "description": "Type of transaction",
        "example": "sale",
        "enum": [
          "sale",
          "refund",
          "void"
        ]
      },
      "TrueFalseOrDefault": {
        "type": "string",
        "title": "TrueFalseOrDefault",
        "description": "True / False / Default",
        "example": "true",
        "enum": [
          true,
          false,
          "default"
        ]
      },
      "TrueFalseOrUnknown": {
        "type": "string",
        "title": "TrueFalseOrUnknown",
        "description": "True / False / Unknown",
        "example": "true",
        "enum": [
          true,
          false,
          "unknown"
        ]
      },
      "ValueToken": {
        "title": "ValueToken",
        "description": "Tokenized value",
        "required": [
          "provider",
          "token",
          "type"
        ],
        "properties": {
          "token": {
            "type": "string",
            "minLength": 1,
            "description": "Tokenized representation of a sensitive value, like a credit card number"
          },
          "provider": {
            "type": "string",
            "minLength": 1,
            "description": "Provider or method that generated the token"
          },
          "type": {
            "type": "string",
            "description": "Type of token as defined by the provider"
          }
        }
      },
      "Verification": {
        "type": "string",
        "title": "Verification",
        "description": "Result of a test of a submitted field",
        "enum": [
          "matched",
          "unmatched",
          "unprovided",
          "unsupported",
          "unavailable",
          "unknown"
        ]
      },
      "VerificationResults": {
        "title": "VerificationResults",
        "description": "Represents card verification results",
        "properties": {
          "name": {
            "description": "Credit card holder name result",
            "allOf": [
              {
                "$ref": "#/components/schemas/Verification"
              }
            ]
          },
          "securityCode": {
            "description": "Credit card security code result",
            "allOf": [
              {
                "$ref": "#/components/schemas/Verification"
              }
            ]
          },
          "addressStreet": {
            "description": "Credit card billing address street result",
            "allOf": [
              {
                "$ref": "#/components/schemas/Verification"
              }
            ]
          },
          "addressPostalCode": {
            "description": "Credit card billing address postal code result",
            "allOf": [
              {
                "$ref": "#/components/schemas/Verification"
              }
            ]
          },
          "threeDSecureV2": {
            "description": "Credit card 3-D secure authentication V2 result",
            "allOf": [
              {
                "$ref": "#/components/schemas/Verification"
              }
            ]
          },
          "cryptogramSecurity": {
            "description": "Credit card eWallet authentication result",
            "allOf": [
              {
                "$ref": "#/components/schemas/Verification"
              }
            ]
          }
        }
      },
      "VoidTransaction": {
        "title": "Void Transaction",
        "description": "Void Transaction",
        "required": [
          "parentTransaction",
          "type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionInput"
          },
          {
            "properties": {
              "source": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Source"
                  }
                ]
              },
              "processorAccount": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<ProcessorAccount>",
                "description": "ProcessorAccount [Resource URL](#section/Overview/Values)"
              },
              "account": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<Account>",
                "description": "Account [Resource URL](#section/Overview/Values). Defaults to merchant."
              },
              "salesTax": {
                "type": "object",
                "description": "Sales Tax",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NonNegativeAmountAndCurrency"
                  }
                ]
              },
              "parentTransaction": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<Transaction>",
                "description": "Transaction [Resource URL](#section/Overview/Values) of the parent Transaction"
              },
              "description": {
                "type": "string",
                "maxLength": 255,
                "description": "Description, which appears on the dashboard and might appear on receipts",
                "example": "March 2017 Rent"
              },
              "customReference": {
                "type": "string",
                "maxLength": 255,
                "description": "Optional reference provided by the merchant"
              },
              "shopperReference": {
                "type": "string",
                "maxLength": 255,
                "example": "PO 4358",
                "description": "Optional reference provided by the shopper, such as a purchase order"
              },
              "shopperInteraction": {
                "$ref": "#/components/schemas/ShopperInteraction"
              },
              "shopperIpAddress": {
                "type": "string",
                "example": "10.9.234.22",
                "description": "Shopper's IP address, useful for fraud detection"
              },
              "paymentLink": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<PaymentLink>",
                "description": "PaymentLink [Resource URL](#section/Overview/Values)"
              },
              "paymentSession": {
                "type": "string",
                "format": "url",
                "title": "ResourceURL<PaymentSession>",
                "description": "PaymentSession [Resource URL](#section/Overview/Values)"
              },
              "createdBy": {
                "type": "string",
                "maxLength": 255,
                "example": "user@gmail.com",
                "description": "Who or what created the transaction? When created in Elavon's virtual terminal, this will be the email address of the currently logged in user. When created otherwise, the integrator may optionally provide any value that helps answer this question."
              },
              "customFields": {
                "description": "Custom fields, an object containing arbitrary string values.  Field names and values must not exceed 64 and 1024 characters, respectively.",
                "additionalProperties": {
                  "type": "string",
                  "maxLength": 1024
                }
              },
              "doCapture": {
                "type": "boolean",
                "example": false,
                "description": "If false, authorize only; if true (default), authorize and capture funds for settlement"
              }
            }
          }
        ]
      }
    },
    "responses": {
      "202": {
        "description": "Accepted",
        "headers": {
          "Version": {
            "$ref": "#/components/headers/Version"
          }
        }
      },
      "204": {
        "description": "No Content",
        "headers": {
          "Version": {
            "$ref": "#/components/headers/Version"
          }
        }
      },
      "300": {
        "description": "Multiple Choices"
      },
      "301": {
        "description": "Moved Permanently"
      },
      "302": {
        "description": "Found"
      },
      "304": {
        "description": "Not Modified"
      },
      "400": {
        "description": "Bad Request. The request is invalid; correct all issues before resending",
        "headers": {
          "Content-Type": {
            "$ref": "#/components/headers/Content-Type"
          },
          "Version": {
            "$ref": "#/components/headers/Version"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureWrapper"
            },
            "examples": {
              "FieldValidationFailure": {
                "value": {
                  "status": 400,
                  "failures": [
                    {
                      "code": "badRequest",
                      "description": "The request is invalid; correct all issues before resending"
                    },
                    {
                      "code": "fieldValidationFailure",
                      "description": "field1 must be a number between 2000 and 2099, inclusive",
                      "field": "field1"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "A valid API key is required",
        "headers": {
          "Content-Type": {
            "$ref": "#/components/headers/Content-Type"
          },
          "Version": {
            "$ref": "#/components/headers/Version"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureWrapper"
            },
            "examples": {
              "InvalidApiKey": {
                "value": {
                  "status": 401,
                  "failures": [
                    {
                      "code": "unauthorized",
                      "description": "A valid API key is required",
                      "field": "Authorization header"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Public API keys may only be used to create and retrieve hosted cards",
        "headers": {
          "Content-Type": {
            "$ref": "#/components/headers/Content-Type"
          },
          "Version": {
            "$ref": "#/components/headers/Version"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureWrapper"
            },
            "examples": {
              "FieldValidationFailure": {
                "value": {
                  "status": 403,
                  "failures": [
                    {
                      "code": "forbidden",
                      "description": "Public API keys may only be used to create and retrieve hosted cards"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "headers": {
          "Content-Type": {
            "$ref": "#/components/headers/Content-Type"
          },
          "Version": {
            "$ref": "#/components/headers/Version"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureWrapper"
            },
            "examples": {
              "FieldValidationFailure": {
                "value": {
                  "status": 404,
                  "failures": [
                    {
                      "code": "notFound",
                      "description": "Not Found"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "405": {
        "description": "The given method may not be used here. Note that the X-HTTP-Method-Override header can only be used to override POST with either PATCH or DELETE",
        "headers": {
          "Content-Type": {
            "$ref": "#/components/headers/Content-Type"
          },
          "Version": {
            "$ref": "#/components/headers/Version"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureWrapper"
            },
            "examples": {
              "FieldValidationFailure": {
                "value": {
                  "status": 405,
                  "failures": [
                    {
                      "code": "methodNotAllowed",
                      "description": "The given method may not be used here. Note that the X-HTTP-Method-Override header can only be used to override POST with either PATCH or DELETE"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "406": {
        "description": "The Accept request header must specify 'application/json;charset=UTF-8'; the Accept-Version request header if present, must reference a valid API version",
        "headers": {
          "Content-Type": {
            "$ref": "#/components/headers/Content-Type"
          },
          "Version": {
            "$ref": "#/components/headers/Version"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureWrapper"
            },
            "examples": {
              "FieldValidationFailure": {
                "value": {
                  "status": 406,
                  "failures": [
                    {
                      "code": "notAcceptable",
                      "description": "The Accept request header must specify 'application/json;charset=UTF-8'; the Accept-Version request header if present, must reference a valid API version"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "411": {
        "description": "Length required",
        "headers": {
          "Content-Type": {
            "$ref": "#/components/headers/Content-Type"
          },
          "Version": {
            "$ref": "#/components/headers/Version"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureWrapper"
            },
            "examples": {
              "FieldValidationFailure": {
                "value": {
                  "status": 411,
                  "failures": [
                    {
                      "code": "lengthRequired",
                      "description": "Length required"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "413": {
        "description": "Request entity is too large",
        "headers": {
          "Content-Type": {
            "$ref": "#/components/headers/Content-Type"
          },
          "Version": {
            "$ref": "#/components/headers/Version"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureWrapper"
            },
            "examples": {
              "FieldValidationFailure": {
                "value": {
                  "status": 413,
                  "failures": [
                    {
                      "code": "payloadTooLarge",
                      "description": "Request entity is too large"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "415": {
        "description": "Unsupported Media Type. The Content-Type request header must specify 'application/json;charset=UTF-8'",
        "headers": {
          "Content-Type": {
            "$ref": "#/components/headers/Content-Type"
          },
          "Version": {
            "$ref": "#/components/headers/Version"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailureWrapper"
            },
            "examples": {
              "FieldValidationFailure": {
                "value": {
                  "status": 415,
                  "failures": [
                    {
                      "code": "unsupportedMediaType",
                      "description": "Unsupported Media Type. The Content-Type request header must specify 'application/json;charset=UTF-8'"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "Accept": {
        "name": "Accept",
        "in": "header",
        "description": "Media types the client will accept.",
        "schema": {
          "type": "string",
          "example": "application/json;charset=UTF-8"
        }
      },
      "Accept-Version": {
        "name": "Accept-Version",
        "in": "header",
        "description": "API version requested by client.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "example": 1
        }
      },
      "Content-Type": {
        "name": "Content-Type",
        "in": "header",
        "description": "Media type of the request body.",
        "schema": {
          "type": "string",
          "example": "application/json;charset=UTF-8"
        }
      },
      "pageToken": {
        "name": "pageToken",
        "in": "query",
        "description": "An opaque continuation token for this page, null for the first page.",
        "schema": {
          "type": "string"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of items to return on this page.\nElavon Payment Gateway can return a maximum of 200 items per page.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 200,
          "default": 10
        }
      },
      "queryParams": {
        "name": "queryParams",
        "in": "query",
        "description": "Query parameters used to filter the returned results.",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "headers": {
      "Content-Type": {
        "description": "Media type of the response body.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "application/json;charset=UTF-8"
        }
      },
      "Version": {
        "description": "API version.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "1"
        }
      },
      "Location": {
        "description": "[Resource URL](#section/Overview/Values).",
        "required": true,
        "schema": {
          "type": "string",
          "format": "url"
        }
      }
    }
  },
  "paths": {
    "/accounts/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Accept"
        },
        {
          "$ref": "#/components/parameters/Accept-Version"
        },
        {
          "name": "id",
          "in": "path",
          "description": "Account [Resource ID](#section/Overview/Values)",
          "required": true,
          "example": " f9g699w9v43r9gcp77y2bxq4rjcx ",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve Account",
        "tags": [
          "Accounts"
        ],
        "operationId": "Account",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "summary": "Retrieve Accounts",
        "description": "Retrieve a list of all accounts.\n\nSupported [Filter](#section/Overview/Collection-Filtering):\n* processorAccounts_contains_id\n",
        "operationId": "RetrieveAccounts",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfAccounts"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/apple-pay-payment-sessions": {
      "post": {
        "summary": "Create ApplePayPaymentSession",
        "description": "Create an Apple Pay payment session.",
        "operationId": "CreateApplePayPaymentSession",
        "tags": [
          "Apple Pay Payment Sessions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (ApplePayPaymentSession)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplePayPaymentSessionInput"
              },
              "examples": {
                "CreateApplePayPayment": {
                  "summary": "Create an Apple Pay payment session.",
                  "value": {
                    "account": "7btv9vr8cq3nq8r7p4wjmjkk58bt",
                    "initiativeContext": "mystore.example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplePayPaymentSession"
                },
                "examples": {
                  "CreateApplePayPayment": {
                    "summary": "Create an Apple Pay payment session.",
                    "value": {
                      "merchant": "https://uat.api.converge.eu.elavonaws.com/merchants/7btv9vr8cq3nq8r7p4wjmjkk58bt",
                      "account": "https://uat.api.converge.eu.elavonaws.com/accounts/7btv9vr8cq3nq8r7p4wjmjkk58bt",
                      "displayName": "My Store",
                      "initiativeContext": "mystore.example.com",
                      "paymentSession": "{\"epochTimestamp\":1669092385561,\"expiresAt\":1669095985561,\"merchantSessionIdentifier\":\"SSHA44AD988C59A48129B3B15227F590FA4_916523AAED1343F5BC5815E12BEE9250AFFDC1A17C46B0DE5A943F0F94927C24\",\"nonce\":\"dd818591\",\"merchantIdentifier\":\"2B61E0688F2FC23911AC584F4FEFA52AA675CA1C34A51658BCCC0ACE07450822\",\"domainName\":\"converge.eu.elavonaws.com\",\"displayName\":\"CONVERGE\",\"signature\":\"308006092a864886f70d010702a0803080020101310d300b0609608648016503040201308006092a864886f70d0107010000a080308203e330820388a00302010202084c304149519d5436300a06082a8648ce3d040302307a312e302c06035504030c254170706c65204170706c69636174696f6e20496e746567726174696f6e204341202d20473331263024060355040b0c1d4170706c652043657274696669636174696f6e20417574686f7269747931133011060355040a0c0a4170706c6520496e632e310b3009060355040613025553301e170d3139303531383031333235375a170d3234303531363031333235375a305f3125302306035504030c1c6563632d736d702d62726f6b65722d7369676e5f5543342d50524f4431143012060355040b0c0b694f532053797374656d7331133011060355040a0c0a4170706c6520496e632e310b30090603550406130255533059301306072a8648ce3d020106082a8648ce3d03010703420004c21577edebd6c7b2218f68dd7090a1218dc7b0bd6f2c283d846095d94af4a5411b83420ed811f3407e83331f1c54c3f7eb3220d6bad5d4eff49289893e7c0f13a38202113082020d300c0603551d130101ff04023000301f0603551d2304183016801423f249c44f93e4ef27e6c4f6286c3fa2bbfd2e4b304506082b0601050507010104393037303506082b060105050730018629687474703a2f2f6f6373702e6170706c652e636f6d2f6f63737030342d6170706c65616963613330323082011d0603551d2004820114308201103082010c06092a864886f7636405013081fe3081c306082b060105050702023081b60c81b352656c69616e6365206f6e207468697320636572746966696361746520627920616e7920706172747920617373756d657320616363657074616e6365206f6620746865207468656e206170706c696361626c65207374616e64617264207465726d7320616e6420636f6e646974696f6e73206f66207573652c20636572746966696361746520706f6c69637920616e642063657274696669636174696f6e2070726163746963652073746174656d656e74732e303606082b06010505070201162a687474703a2f2f7777772e6170706c652e636f6d2f6365727469666963617465617574686f726974792f30340603551d1f042d302b3029a027a0258623687474703a2f2f63726c2e6170706c652e636f6d2f6170706c6561696361332e63726c301d0603551d0e041604149457db6fd57481868989762f7e578507e79b5824300e0603551d0f0101ff040403020780300f06092a864886f76364061d04020500300a06082a8648ce3d0403020349003046022100be09571fe71e1e735b55e5afacb4c72feb445f30185222c7251002b61ebd6f55022100d18b350a5dd6dd6eb1746035b11eb2ce87cfa3e6af6cbd8380890dc82cddaa63308202ee30820275a0030201020208496d2fbf3a98da97300a06082a8648ce3d0403023067311b301906035504030c124170706c6520526f6f74204341202d20473331263024060355040b0c1d4170706c652043657274696669636174696f6e20417574686f7269747931133011060355040a0c0a4170706c6520496e632e310b3009060355040613025553301e170d3134303530363233343633305a170d3239303530363233343633305a307a312e302c06035504030c254170706c65204170706c69636174696f6e20496e746567726174696f6e204341202d20473331263024060355040b0c1d4170706c652043657274696669636174696f6e20417574686f7269747931133011060355040a0c0a4170706c6520496e632e310b30090603550406130255533059301306072a8648ce3d020106082a8648ce3d03010703420004f017118419d76485d51a5e25810776e880a2efde7bae4de08dfc4b93e13356d5665b35ae22d097760d224e7bba08fd7617ce88cb76bb6670bec8e82984ff5445a381f73081f4304606082b06010505070101043a3038303606082b06010505073001862a687474703a2f2f6f6373702e6170706c652e636f6d2f6f63737030342d6170706c65726f6f7463616733301d0603551d0e0416041423f249c44f93e4ef27e6c4f6286c3fa2bbfd2e4b300f0603551d130101ff040530030101ff301f0603551d23041830168014bbb0dea15833889aa48a99debebdebafdacb24ab30370603551d1f0430302e302ca02aa0288626687474703a2f2f63726c2e6170706c652e636f6d2f6170706c65726f6f74636167332e63726c300e0603551d0f0101ff0404030201063010060a2a864886f7636406020e04020500300a06082a8648ce3d040302036700306402303acf7283511699b186fb35c356ca62bff417edd90f754da28ebef19c815e42b789f898f79b599f98d5410d8f9de9c2fe0230322dd54421b0a305776c5df3383b9067fd177c2c216d964fc6726982126f54f87a7d1b99cb9b0989216106990f09921d00003182018830820184020101308186307a312e302c06035504030c254170706c65204170706c69636174696f6e20496e746567726174696f6e204341202d20473331263024060355040b0c1d4170706c652043657274696669636174696f6e20417574686f7269747931133011060355040a0c0a4170706c6520496e632e310b300906035504061302555302084c304149519d5436300b0609608648016503040201a08193301806092a864886f70d010903310b06092a864886f70d010701301c06092a864886f70d010905310f170d3232313132323034343632355a302806092a864886f70d010934311b3019300b0609608648016503040201a10a06082a8648ce3d040302302f06092a864886f70d01090431220420e2fd45a0dce42781f406b9baac8d18802d82945243c78766110a04d1a081c921300a06082a8648ce3d0403020447304502200c766c5172c0b91c713bd4c8eb85377dd1976af2690f4159b82227c23c2d9642022100f24f75a695b6769dbc0432a4d49037b1d98972fc937e8c94452ebbbad7b28435000000000000\",\"operationalAnalyticsIdentifier\":\"CONVERGE:2B61E0688F2FC23911AC584F4FEFA52AA675CA1C34A51658BCCC0ACE07450822\",\"retries\":0,\"pspId\":\"2B61E0688F2FC23911AC584F4FEFA52AA675CA1C34A51658BCCC0ACE07450822\"}"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/apple-pay-payments": {
      "post": {
        "summary": "Create ApplePayPayment",
        "description": "Create an Apple Pay payment.",
        "operationId": "CreateApplePayPayment",
        "tags": [
          "Apple Pay Payments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (ApplePayPayment)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplePayPaymentInput"
              },
              "examples": {
                "CreateApplePayPayment": {
                  "summary": "Create an Apple Pay payment.",
                  "value": {
                    "card": {
                      "holderName": "John Q Public",
                      "billTo": {
                        "fullName": "John Q Public",
                        "primaryPhone": "4045555555",
                        "street1": "24 James St",
                        "city": "Skowhegan",
                        "region": "New York",
                        "postalCode": "04976",
                        "countryCode": "USA"
                      }
                    },
                    "token": "{\"data\":\"fAlJ5pzTqvo5zw+cJnminC3AlL+45CzXm+qjwGg2p++4v09vaA/t3/9B1YVaMsn319GTI8jxTDhH9UaCBoFDNB++egeKMpls33yrwHjdvt59QTgcMiRxX2+xhQqiK56wqy1yzzz2MX+pyPFM1JViGdtUW5fMProKiBun4J1d2BLSUiQ4rEnIzWjHQN5U02lNc3SlxEzHRNkvkk1tVFOy0p5sHrn5/t/MDJDGvNfFwnNvkiayX3rVEavRNwuWc7k79Eqrc3G+ak+rHt2kyRE2pm2vTuJFEo6QbNTDQeP+41jCXKpIQ96ZYjDzQ7WJYHDWyIYQZvwNipF4VXJy4gtz84Yl1/X0/Crogh/XEC5IEOQ5M8/MnMxGkbsNOABz+1cCNVnB+nnn395nYrN0LrvX\",\"signature\":\"MIAGCSqGSIb3DQEHAqCAMIACAQExDTALBglghkgBZQMEAgEwgAYJKoZIhvcNAQcBAACggDCCA+MwggOIoAMCAQICCEwwQUlRnVQ2MAoGCCqGSM49BAMCMHoxLjAsBgNVBAMMJUFwcGxlIEFwcGxpY2F0aW9uIEludGVncmF0aW9uIENBIC0gRzMxJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzAeFw0xOTA1MTgwMTMyNTdaFw0yNDA1MTYwMTMyNTdaMF8xJTAjBgNVBAMMHGVjYy1zbXAtYnJva2VyLXNpZ25fVUM0LVBST0QxFDASBgNVBAsMC2lPUyBTeXN0ZW1zMRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABMIVd+3r1seyIY9o3XCQoSGNx7C9bywoPYRgldlK9KVBG4NCDtgR80B+gzMfHFTD9+syINa61dTv9JKJiT58DxOjggIRMIICDTAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFCPyScRPk+TvJ+bE9ihsP6K7/S5LMEUGCCsGAQUFBwEBBDkwNzA1BggrBgEFBQcwAYYpaHR0cDovL29jc3AuYXBwbGUuY29tL29jc3AwNC1hcHBsZWFpY2EzMDIwggEdBgNVHSAEggEUMIIBEDCCAQwGCSqGSIb3Y2QFATCB/jCBwwYIKwYBBQUHAgIwgbYMgbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjA2BggrBgEFBQcCARYqaHR0cDovL3d3dy5hcHBsZS5jb20vY2VydGlmaWNhdGVhdXRob3JpdHkvMDQGA1UdHwQtMCswKaAnoCWGI2h0dHA6Ly9jcmwuYXBwbGUuY29tL2FwcGxlYWljYTMuY3JsMB0GA1UdDgQWBBSUV9tv1XSBhomJdi9+V4UH55tYJDAOBgNVHQ8BAf8EBAMCB4AwDwYJKoZIhvdjZAYdBAIFADAKBggqhkjOPQQDAgNJADBGAiEAvglXH+ceHnNbVeWvrLTHL+tEXzAYUiLHJRACth69b1UCIQDRizUKXdbdbrF0YDWxHrLOh8+j5q9svYOAiQ3ILN2qYzCCAu4wggJ1oAMCAQICCEltL786mNqXMAoGCCqGSM49BAMCMGcxGzAZBgNVBAMMEkFwcGxlIFJvb3QgQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMB4XDTE0MDUwNjIzNDYzMFoXDTI5MDUwNjIzNDYzMFowejEuMCwGA1UEAwwlQXBwbGUgQXBwbGljYXRpb24gSW50ZWdyYXRpb24gQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE8BcRhBnXZIXVGl4lgQd26ICi7957rk3gjfxLk+EzVtVmWzWuItCXdg0iTnu6CP12F86Iy3a7ZnC+yOgphP9URaOB9zCB9DBGBggrBgEFBQcBAQQ6MDgwNgYIKwYBBQUHMAGGKmh0dHA6Ly9vY3NwLmFwcGxlLmNvbS9vY3NwMDQtYXBwbGVyb290Y2FnMzAdBgNVHQ4EFgQUI/JJxE+T5O8n5sT2KGw/orv9LkswDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBS7sN6hWDOImqSKmd6+veuv2sskqzA3BgNVHR8EMDAuMCygKqAohiZodHRwOi8vY3JsLmFwcGxlLmNvbS9hcHBsZXJvb3RjYWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwEAYKKoZIhvdjZAYCDgQCBQAwCgYIKoZIzj0EAwIDZwAwZAIwOs9yg1EWmbGG+zXDVspiv/QX7dkPdU2ijr7xnIFeQreJ+Jj3m1mfmNVBDY+d6cL+AjAyLdVEIbCjBXdsXfM4O5Bn/Rd8LCFtlk/GcmmCEm9U+Hp9G5nLmwmJIWEGmQ8Jkh0AADGCAYcwggGDAgEBMIGGMHoxLjAsBgNVBAMMJUFwcGxlIEFwcGxpY2F0aW9uIEludGVncmF0aW9uIENBIC0gRzMxJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUwIITDBBSVGdVDYwCwYJYIZIAWUDBAIBoIGTMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTIyMTAxMjEzMjkwMFowKAYJKoZIhvcNAQk0MRswGTALBglghkgBZQMEAgGhCgYIKoZIzj0EAwIwLwYJKoZIhvcNAQkEMSIEIAyH1LvHcsW6hSBIl9bHi7B9Q0w9W23kHgcgIhzwP5iZMAoGCCqGSM49BAMCBEYwRAIgGa9NBGr/+9V6ht+f5grKcQrqNPVYHdiS8kb/p0CX9xECIEgCUNPEDszSOzSo/1OZiXWDc7bXWnIusADdd1RFX3UTAAAAAAAA\",\"header\":{\"publicKeyHash\":\"nVbhfkzo2Kzr3MylFDBrS5u43yf0U9tBUtdQQ0gdcv8=\",\"ephemeralPublicKey\":\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUlCqorBXjCcEGJmvXqQfdJpz5lH905wPvlSu0NMTn1s8r8K/DQ4xwA4Y06RluSqmAiUkbBKwvDGs6iOR6pgirw==\",\"transactionId\":\"77184f48b78da840be0216d3eb12b31f8afcf35c3bda5b51be14c7717ddf79d1\"},\"version\":\"EC_v1\"}",
                    "customReference": "customReference",
                    "customFields": {
                      "name1": "value1",
                      "name2": "value2"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplePayPayment"
                },
                "examples": {
                  "CreateApplePayPayment": {
                    "summary": "Create an Apple Pay payment.",
                    "value": {
                      "href": "https://api.converge.eu.elavonaws.com/apple-pay-payments/8jmkgdx63t77xqtwq6j2f27cykrd",
                      "id": "8jmkgdx63t77xqtwq6j2f27cykrd",
                      "createdAt": "2022-11-22T06:08:49.949Z",
                      "expiresAt": "2022-11-22T06:38:49.000Z",
                      "merchant": "https://api.converge.eu.elavonaws.com/merchants/7btv9vr8cq3nq8r7p4wjmjkk58bt",
                      "processorAccount": "https://api.converge.eu.elavonaws.com/processor-accounts/kjgfcr2r9y2r2krhbrb36w28tp77",
                      "card": {
                        "holderName": "John Q Public",
                        "panFingerprint": "prtt98jgc4d7jj2jygvbpfbb4k8nd",
                        "expirationMonth": 9,
                        "expirationYear": 2026,
                        "billTo": {
                          "fullName": "John Q Public",
                          "company": null,
                          "street1": "24 James St",
                          "street2": null,
                          "city": "Skowhegan",
                          "region": "New York",
                          "postalCode": "04976",
                          "countryCode": "USA",
                          "primaryPhone": 4045555555,
                          "alternatePhone": null,
                          "fax": null,
                          "email": null
                        },
                        "maskedNumber": "XXXXXXXXXXX3333",
                        "last4": "3333",
                        "bin": "370295",
                        "scheme": "American Express",
                        "brand": "American Express",
                        "fundingSource": "unknown",
                        "issuingBank": null,
                        "issuingCountry": null,
                        "issuingCurrency": "EUR",
                        "isDebit": "false",
                        "isCorporate": "unknown",
                        "isDccAllowed": "false"
                      },
                      "customReference": null,
                      "customFields": null,
                      "verificationResults": {
                        "name": "unprovided",
                        "securityCode": "unprovided",
                        "addressStreet": "unprovided",
                        "addressPostalCode": "unprovided",
                        "threeDSecureV1": "unprovided",
                        "threeDSecureV2": "unprovided",
                        "cryptogramSecurity": "provided"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/apple-pay-payments/{id}": {
      "get": {
        "summary": "Retrieve ApplePayPayment",
        "description": "Retrieve an Apple Pay payment resource by ID.",
        "operationId": "RetrieveApplePayPayment",
        "tags": [
          "Apple Pay Payments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ApplePayPayment [Resource ID](#section/Overview/Values)",
            "required": true,
            "example": "8jmkgdx63t77xqtwq6j2f27cykrd",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplePayPayment"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/batches/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Accept"
        },
        {
          "$ref": "#/components/parameters/Accept-Version"
        },
        {
          "name": "id",
          "in": "path",
          "description": "Batch [Resource ID](#section/Overview/Values).",
          "required": true,
          "example": "wrKK4HcHCXcK3KkXwFRMXVjQ",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve Batch",
        "description": "Retrieve a single batch of transactions by ID.",
        "tags": [
          "Batches"
        ],
        "operationId": "RetrieveBatch",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Batch"
                },
                "examples": {
                  "Batch": {
                    "summary": "Single Batch",
                    "value": {
                      "href": "https://api.converge.eu.elavon.net/batches/wrKK4HcHCXcK3KkXwFRMXVjQ",
                      "id": "wrKK4HcHCXcK3KkXwFRMXVjQ",
                      "createdAt": "2018-07-31T00:00:01.508Z",
                      "modifiedAt": "2018-07-31T00:00:12.074Z",
                      "merchant": "https://api.converge.eu.elavon.net/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                      "processorAccount": "https://api.converge.eu.elavon.net/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                      "processorReference": "21280002",
                      "state": "settled",
                      "credits": {
                        "count": 0,
                        "total": {
                          "amount": "0.00",
                          "currencyCode": "EUR"
                        }
                      },
                      "debits": {
                        "count": 3,
                        "total": {
                          "amount": "22.00",
                          "currencyCode": "EUR"
                        }
                      },
                      "net": {
                        "count": 3,
                        "total": {
                          "amount": "22.00",
                          "currencyCode": "EUR"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/batches": {
      "get": {
        "summary": "Retrieve Batches",
        "description": "Retrieve a list of batches in descending chronological order. This resource supports filtering.",
        "operationId": "RetrieveBatches",
        "tags": [
          "Batches"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfBatches"
                },
                "examples": {
                  "ListOfBatches": {
                    "summary": "List Of Batches",
                    "value": {
                      "href": "https://api.converge.eu.elavon.net/batches?limit=10",
                      "first": "https://api.converge.eu.elavon.net/batches?limit=10",
                      "next": null,
                      "pageToken": null,
                      "nextPageToken": null,
                      "limit": 10,
                      "size": 2,
                      "items": [
                        {
                          "href": "https://api.converge.eu.elavon.net/batches/wrKK4HcHCXcK3KkXwFRMXVjQ",
                          "id": "wrKK4HcHCXcK3KkXwFRMXVjQ",
                          "createdAt": "2018-07-31T00:00:01.508Z",
                          "modifiedAt": "2018-07-31T00:00:12.074Z",
                          "merchant": "https://api.converge.eu.elavon.net/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                          "processorAccount": "https://api.converge.eu.elavon.net/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                          "processorReference": "21280002",
                          "state": "settled",
                          "credits": {
                            "count": 0,
                            "total": {
                              "amount": "0.00",
                              "currencyCode": "EUR"
                            }
                          },
                          "debits": {
                            "count": 3,
                            "total": {
                              "amount": "22.00",
                              "currencyCode": "EUR"
                            }
                          },
                          "net": {
                            "count": 3,
                            "total": {
                              "amount": "22.00",
                              "currencyCode": "EUR"
                            }
                          }
                        },
                        {
                          "href": "https://api.converge.eu.elavon.net/batches/DTTpbrDvwQQprQfg9dXr3gdP",
                          "id": "DTTpbrDvwQQprQfg9dXr3gdP",
                          "createdAt": "2018-07-30T00:00:05.088Z",
                          "modifiedAt": "2018-07-30T00:00:13.073Z",
                          "merchant": "https://api.converge.eu.elavon.net/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                          "processorAccount": "https://api.converge.eu.elavon.net/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                          "processorReference": "21180001",
                          "state": "settled",
                          "credits": {
                            "count": 1,
                            "total": {
                              "amount": "100.00",
                              "currencyCode": "EUR"
                            }
                          },
                          "debits": {
                            "count": 5,
                            "total": {
                              "amount": "318.00",
                              "currencyCode": "EUR"
                            }
                          },
                          "net": {
                            "count": 6,
                            "total": {
                              "amount": "218.00",
                              "currencyCode": "EUR"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "EmptyListOfBatches": {
                    "summary": "Empty List Of Batches",
                    "value": {
                      "href": "https://api.converge.eu.elavon.net/batches?limit=10",
                      "first": "https://api.converge.eu.elavon.net/batches?limit=10",
                      "limit": 10,
                      "size": 0
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/forex-advices": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Accept"
        },
        {
          "$ref": "#/components/parameters/Accept-Version"
        },
        {
          "$ref": "#/components/parameters/Content-Type"
        }
      ],
      "post": {
        "summary": "Create ForexAdvice",
        "description": "Creates a ForexAdvice resource. Each ForexAdvice captures a foreign exchange currency conversion operation.",
        "tags": [
          "Forex Advices"
        ],
        "operationId": "CreateForexAdvice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForexAdvice"
              },
              "examples": {
                "CreateForexAdvice": {
                  "summary": "Create a forex advice.",
                  "value": {
                    "total": {
                      "amount": "3.00",
                      "currencyCode": "USD"
                    },
                    "cardNumber": "XXXXXXXXXXXX0000",
                    "shopperInteraction": "telephoneOrder"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForexAdvice"
                },
                "examples": {
                  "CreateForexAdvice": {
                    "summary": "Create a forex advice.",
                    "value": {
                      "href": "https://uat.api.converge.eu.elavonaws.com/forex-advices/p2hck3h4g9bcdm2hr9yvycppjm8t",
                      "id": "p2hck3h4g9bcdm2hr9yvycppjm8t",
                      "createdAt": "2024-01-29T18:59:07.900Z",
                      "expiresAt": "2024-01-30T18:59:07.881Z",
                      "merchant": "https://uat.api.converge.eu.elavonaws.com/merchants/28kvwjbm67k36kxcvw6rgwdggkf6",
                      "panToken": {
                        "token": "9580733899373269555",
                        "provider": "ELAVON_C2_V1",
                        "type": "pan"
                      },
                      "maskedNumber": "XXXXXXXXXXXX0000",
                      "last4": "0000",
                      "bin": "512079",
                      "panFingerprint": "m7bh97bm36tpt6bdhgphfv8vdwdt",
                      "total": {
                        "amount": "3.00",
                        "currencyCode": "USD"
                      },
                      "issuerTotal": {
                        "amount": "405",
                        "currencyCode": "JPY"
                      },
                      "conversionRate": "135.05698",
                      "markupRate": "0.0325",
                      "markupRateAnnotation": "none",
                      "shopperInteraction": "telephoneOrder",
                      "customReference": null,
                      "customFields": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/forex-advices/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Accept"
        },
        {
          "$ref": "#/components/parameters/Accept-Version"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ForexAdvice [Resource ID](#section/Overview/Values).",
          "required": true,
          "example": "8Pmhg2rh8c7wytV9vb27X6VT",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve ForexAdvice",
        "description": "Retrieve a previously created ForexAdvice by id.",
        "tags": [
          "Forex Advices"
        ],
        "operationId": "RetrieveForexAdvice",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForexAdvice"
                },
                "examples": {
                  "RetrieveForexAdvice": {
                    "summary": "Retrieve a forex advice.",
                    "value": {
                      "href": "https://uat.api.converge.eu.elavonaws.com/forex-advices/p2hck3h4g9bcdm2hr9yvycppjm8t",
                      "id": "p2hck3h4g9bcdm2hr9yvycppjm8t",
                      "createdAt": "2024-01-29T18:59:07.900Z",
                      "expiresAt": "2024-01-30T18:59:07.881Z",
                      "merchant": "https://uat.api.converge.eu.elavonaws.com/merchants/28kvwjbm67k36kxcvw6rgwdggkf6",
                      "panToken": {
                        "token": "9580733899373269555",
                        "provider": "ELAVON_C2_V1",
                        "type": "pan"
                      },
                      "maskedNumber": "XXXXXXXXXXXX0000",
                      "last4": "0000",
                      "bin": "512079",
                      "panFingerprint": "m7bh97bm36tpt6bdhgphfv8vdwdt",
                      "total": {
                        "amount": "3.00",
                        "currencyCode": "USD"
                      },
                      "issuerTotal": {
                        "amount": "405",
                        "currencyCode": "JPY"
                      },
                      "conversionRate": "135.05698",
                      "markupRate": "0.0325",
                      "markupRateAnnotation": "none",
                      "shopperInteraction": "telephoneOrder",
                      "customReference": null,
                      "customFields": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/google-pay-payments": {
      "post": {
        "summary": "Create GooglePayPayment",
        "description": "Create a Google Pay payment.",
        "operationId": "CreateGooglePayPayment",
        "tags": [
          "Google Pay Payments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (GooglePayPayment)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GooglePayPaymentInput"
              },
              "examples": {
                "CreateGooglePayPayment": {
                  "summary": "Create a Google Pay payment.",
                  "value": {
                    "card": {
                      "holderName": "John Doe",
                      "billTo": {
                        "fullName": "John Doe",
                        "countryCode": "USA",
                        "postalCode": "94043",
                        "street1": "1600 Amphitheatre Parkway",
                        "city": "Mountain View",
                        "region": "CA"
                      }
                    },
                    "token": "{\"signature\":\"MEQCIH0nEUW6uEDnxNAeUlxJw7UgtV53jEtFycJG6QEX34u0AiBVm00R1O8oL22RLQ26MPDd7Sn/24m4+5AxzmD8tEctjA\\u003d\\u003d\",\"intermediateSigningKey\":{\"signedKey\":\"{\\\"keyValue\\\":\\\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAELNIQDI21szog5jsBdgYLhMZEDcvOr59V1XI3vWtDVWgd/dU+yx/y7VZ7UxqKkTgA/o5TikdJn/l4qc8wgR3LYw\\\\u003d\\\\u003d\\\",\\\"keyExpiration\\\":\\\"1673524261966\\\"}\",\"signatures\":[\"MEUCIGe/oQ5E1hg5ONxtGQR+E4IoMgHaazatEOszlMTOwyI5AiEAos7ETQoM46nsGCfNqEBUPE23voAKIIefJ6Sg870trts\\u003d\"]},\"protocolVersion\":\"ECv2\",\"signedMessage\":\"{\\\"encryptedMessage\\\":\\\"K8CTFde4vVSL+1ttpVxIciqQj94+ji/fu7l1tkR9dOElg65FU2lfEcFLDD374BVdZlZwgQLZOt8MOHc8vQLDKt1YYfTaZfrLfLrD+3Rv10YIsvgF0jXHQ9NmgDYGt06XNhg8E5lcmo+Fpk3d9qCSEXaCN3vk6uSmfsn2ZoMHEqhTpnSB+RKmMbkC8QfQn7gEeS12HKWSCRHGb/NsyFVNPrQYEpuhkZOJMKmS+nZVgtNdfg6hRpWFjg7Os4YwQIiYRJYh2st0zD1fUwDPSX4iJJ9BwFOrj8KMEoHNh5SnTcxeoAuXHm5boFxbVXZXJNPSHh5ZsboNdd2mYYnfr1QzF9Jy/TDhU1vkqRPAKypzPpGjNdgMFKpqpk2nwgrzmtP7sZitRC59qeutLkaI8IPXHUmeMCoAHsPTuk+OWBQI2N/mPM6AVo/ahu/V1G++vdhsfEi5W5KPhq6IW7j9gGh840ur489AjpV1W6ihLsZVIC/rgjPyOqrorwx/U1pJ+Sf0Beeyc5jDTRb/pmlCgy4p8F+Qy1eqw4YmKtP/da4IVtKWvXWe+KRTZqd/s17j5qciknMn83R1M70jCFIAWuM0UDvb6iFO7Qgq1bqZ\\\",\\\"ephemeralPublicKey\\\":\\\"BKgFE3NUYmE4kGiIbv/L6LwlXLLWbT1g9QEKdpzI9qRbGJ3xzYNSmJ2DvHrtTg4K2Wn2l08cZROjc2PwWRYhKCA\\\\u003d\\\",\\\"tag\\\":\\\"FDREH5rjJYvSYTSz7hw3jB3Vm+t3HTiS1thPM78eMaw\\\\u003d\\\"}\"}",
                    "customReference": "customReference",
                    "customFields": {
                      "name1": "value1",
                      "name2": "value2"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GooglePayPayment"
                },
                "examples": {
                  "CreateGooglePayPayment": {
                    "summary": "Create a Google Pay payment.",
                    "value": {
                      "href": "https://api.converge.eu.elavonaws.com/google-pay-payments/q3rdjp2kfx4rwbgdcvr66wwhcfjw",
                      "id": "q3rdjp2kfx4rwbgdcvr66wwhcfjw",
                      "createdAt": "2023-01-04T13:44:36.597Z",
                      "expiresAt": "2023-01-04T14:14:36.597Z",
                      "merchant": "https://api.converge.eu.elavonaws.com/merchants/yfv23vhdptrgd3c3dpg3khydw22f",
                      "processorAccount": "https://api.converge.eu.elavonaws.com/processor-accounts/d4xcjxf4282xrtvcdcpv3wrxq77v",
                      "card": {
                        "holderName": "John Doe",
                        "panFingerprint": "vdr9fxwq888xybphtfm2xhxv78vj",
                        "expirationMonth": 12,
                        "expirationYear": 2028,
                        "billTo": {
                          "fullName": "John Doe",
                          "company": null,
                          "street1": "1600 Amphitheatre Parkway",
                          "street2": null,
                          "city": "Mountain View",
                          "region": "CA",
                          "postalCode": "94043",
                          "countryCode": "USA",
                          "primaryPhone": null,
                          "alternatePhone": null,
                          "fax": null,
                          "email": null
                        },
                        "maskedNumber": "XXXXXXXXXXXX1111",
                        "last4": "1111",
                        "bin": "411111",
                        "scheme": "Visa",
                        "brand": "Visa Credit",
                        "fundingSource": "credit",
                        "issuingBank": "Google Pay Test",
                        "issuingCountry": "USA",
                        "issuingCurrency": "USD",
                        "isDebit": "false",
                        "isCorporate": "false",
                        "isDccAllowed": "true"
                      },
                      "customReference": null,
                      "customFields": null,
                      "verificationResults": {
                        "name": "unprovided",
                        "securityCode": "unprovided",
                        "addressStreet": "unprovided",
                        "addressPostalCode": "unprovided",
                        "threeDSecureV1": "unprovided",
                        "threeDSecureV2": "unprovided",
                        "cryptogramSecurity": "unprovided"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/google-pay-payments/{id}": {
      "get": {
        "summary": "Retrieve GooglePayPayment",
        "description": "Retrieve a Google Pay payment resource by ID.",
        "operationId": "RetrieveGooglePayPayment",
        "tags": [
          "Google Pay Payments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "name": "id",
            "in": "path",
            "description": "GooglePayPayment [Resource ID](#section/Overview/Values)",
            "required": true,
            "example": "q3rdjp2kfx4rwbgdcvr66wwhcfjw",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GooglePayPayment"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/hosted-ach-payments": {
      "post": {
        "summary": "Create a hosted ACH payment.",
        "description": "Creates a hosted ACH payment resource.",
        "operationId": "CreateHostedAchPayment",
        "tags": [
          "Hosted ACH Payments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (Hosted ACH Payment)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HostedAchPaymentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostedAchPayment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/hosted-ach-payments/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Hosted ACH Payments [Resource ID](#section/Overview/Values)",
          "required": true,
          "example": "prLs8eWreKa5utH7cuC26Wof",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve Hosted ACH Payment resource",
        "description": "Retrieve a Hosted ACH Payment by resource ID.",
        "operationId": "RetrieveHostedACHPayment",
        "tags": [
          "Hosted ACH Payments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostedAchPayment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/hosted-cards": {
      "post": {
        "summary": "Create HostedCard",
        "description": "Creates a HostedCard resource.",
        "tags": [
          "Hosted Cards"
        ],
        "operationId": "CreateHostedCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (HostedCard)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HostedCardInput"
              },
              "examples": {
                "HostedCard": {
                  "summary": "Create HostedCard",
                  "value": {
                    "card": {
                      "holderName": "Erlich Bachman",
                      "number": "XXXXXXXXXXXX0007",
                      "expirationMonth": 1,
                      "expirationYear": 2020,
                      "securityCode": "321",
                      "billTo": {
                        "fullName": "Full Name",
                        "company": "Company",
                        "street1": "2 Concourse Parkway",
                        "street2": "Suite A",
                        "city": "Atlanta",
                        "region": "GA",
                        "postalCode": "30328",
                        "countryCode": "USA",
                        "primaryPhone": "+1 678-731-5000",
                        "alternatePhone": "+1 678-731-5001",
                        "fax": "+1 678-731-5002",
                        "email": "noreply@elavon.com"
                      }
                    }
                  }
                },
                "HostedCardError": {
                  "summary": "Create HostedCard Error",
                  "value": {
                    "card": {
                      "number": "XXXXXXXXXXXX0007",
                      "expirationYear": 2020
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostedCard"
                },
                "examples": {
                  "CreatedHostedCard": {
                    "summary": "Created HostedCard",
                    "value": {
                      "href": "https://api.converge.eu.elavon.net/hosted-cards/8Pmhg2rh8c7wytV9vb27X6VT",
                      "id": "8Pmhg2rh8c7wytV9vb27X6VT",
                      "createdAt": "2018-08-09T17:16:47.272Z",
                      "modifiedAt": "2018-08-09T17:16:47.272Z",
                      "expiresAt": "2018-08-09T18:16:47.272Z",
                      "merchant": null,
                      "card": {
                        "holderName": "Erlich Bachman",
                        "expirationMonth": 1,
                        "expirationYear": 2020,
                        "billTo": {
                          "fullName": "Full Name",
                          "company": "Company",
                          "street1": "2 Concourse Parkway",
                          "street2": "Suite A",
                          "city": "Atlanta",
                          "region": "GA",
                          "postalCode": "30328",
                          "countryCode": "USA",
                          "primaryPhone": "+1 678-731-5000",
                          "alternatePhone": "+1 678-731-5001",
                          "fax": "+1 678-731-5002",
                          "email": "noreply@elavon.com"
                        },
                        "maskedNumber": "XXXXXXXXXXXX0007",
                        "last4": "0007",
                        "bin": "400880",
                        "scheme": "Visa",
                        "brand": "Visa",
                        "fundingSource": "credit",
                        "issuingBank": "THE ROYAL BANK OF SCOTLAND PLC",
                        "issuingCountry": "GBR",
                        "issuingCurrency": "GBP",
                        "isDebit": "false",
                        "isCorporate": "false",
                        "isDccAllowed": "true"
                      },
                      "customReference": null,
                      "customFields": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/hosted-cards/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "HostedCard [Resource ID](#section/Overview/Values).",
          "example": "8Pmhg2rh8c7wytV9vb27X6VT",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve HostedCard",
        "description": "Retrieve a hosted card resource by its resource ID.",
        "tags": [
          "Hosted Cards"
        ],
        "operationId": "RetrieveHostedCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostedCard"
                },
                "examples": {
                  "HostedCard": {
                    "value": {
                      "href": "https://api.converge.eu.elavon.net/hosted-cards/8Pmhg2rh8c7wytV9vb27X6VT",
                      "id": "8Pmhg2rh8c7wytV9vb27X6VT",
                      "createdAt": "2018-08-09T17:16:47.272Z",
                      "modifiedAt": "2018-08-09T17:16:47.272Z",
                      "expiresAt": "2018-08-09T18:16:47.272Z",
                      "merchant": "https://api.converge.eu.elavon.net/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                      "card": {
                        "holderName": "Erlich Bachman",
                        "expirationMonth": 1,
                        "expirationYear": 2020,
                        "billTo": {
                          "fullName": "Full Name",
                          "company": "Company",
                          "street1": "2 Concourse Parkway",
                          "street2": "Suite A",
                          "city": "Atlanta",
                          "region": "GA",
                          "postalCode": "30328",
                          "countryCode": "USA",
                          "primaryPhone": "+1 678-731-5000",
                          "alternatePhone": "+1 678-731-5001",
                          "fax": "+1 678-731-5002",
                          "email": "noreply@elavon.com"
                        },
                        "maskedNumber": "XXXXXXXXXXXX0007",
                        "last4": "0007",
                        "bin": "400880",
                        "scheme": "Visa",
                        "brand": "Visa",
                        "fundingSource": "credit",
                        "issuingBank": "THE ROYAL BANK OF SCOTLAND PLC",
                        "issuingCountry": "GBR",
                        "issuingCurrency": "GBP",
                        "isDebit": "false",
                        "isCorporate": "false",
                        "isDccAllowed": "true"
                      },
                      "customReference": null,
                      "customFields": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      },
      "post": {
        "summary": "Update HostedCard",
        "description": "Overwrite the details of an existing hosted card resource.",
        "tags": [
          "Hosted Cards"
        ],
        "operationId": "UpdateHostedCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (HostedCard)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HostedCard"
              },
              "examples": {
                "UpdatedHostedCard": {
                  "summary": "Update HostedCard Address",
                  "value": {
                    "card": {
                      "holderName": "Erlich Bachman",
                      "billTo": {
                        "fullName": "Erlich Bachman",
                        "company": "Company",
                        "street1": "123 Main Street",
                        "street2": null,
                        "city": "Marietta",
                        "region": "GA",
                        "postalCode": "30066"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostedCard"
                },
                "examples": {
                  "UpdatedHostedCard": {
                    "summary": "Updated HostedCard",
                    "value": {
                      "card": {
                        "holderName": "Erlich Bachman",
                        "number": "XXXXXXXXXXXX0007",
                        "expirationMonth": 1,
                        "expirationYear": 2020,
                        "securityCode": "321",
                        "billTo": {
                          "fullName": "Erlich Bachman",
                          "company": "Company",
                          "street1": "123 Main Street",
                          "street2": null,
                          "city": "Marietta",
                          "region": "GA",
                          "postalCode": "30066",
                          "countryCode": "USA",
                          "primaryPhone": "+1 678-731-5000",
                          "alternatePhone": "+1 678-731-5001",
                          "fax": "+1 678-731-5002",
                          "email": "noreply@elavon.com"
                        }
                      }
                    }
                  },
                  "Updated3DSecureHostedCard": {
                    "summary": "Update 3-D secure hosted card",
                    "value": {
                      "href": "https://api.eu.convergepay.com/hosted-cards/jqm7yjf83bydgytbpcmxbm49",
                      "id": "jqm7yjf83bydgytbpcmxbm49",
                      "createdAt": "2019-04-22T18:52:13.339Z",
                      "modifiedAt": "2019-04-22T18:52:17.244Z",
                      "expiresAt": "2019-04-22T19:22:13.339Z",
                      "merchant": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                      "card": {
                        "holderName": "Ela Von",
                        "panFingerprint": "gdytrqm8gfrb2m8p44fyc79b",
                        "expirationMonth": 1,
                        "expirationYear": 2020,
                        "billTo": {
                          "fullName": "Ela Von",
                          "company": "Company",
                          "street1": "2 Concourse Parkway",
                          "street2": "Suite A",
                          "city": "Atlanta",
                          "region": "GA",
                          "postalCode": "30328",
                          "countryCode": "USA",
                          "primaryPhone": "+1 678-731-5000",
                          "alternatePhone": "+1 678-731-5001",
                          "fax": "+1 678-731-5002",
                          "email": "noreply@elavon.com"
                        },
                        "maskedNumber": "XXXXXXXXXXXX0007",
                        "last4": "0007",
                        "bin": "400880",
                        "scheme": "Visa",
                        "brand": "Visa",
                        "fundingSource": "credit",
                        "issuingBank": "THE ROYAL BANK OF SCOTLAND PLC",
                        "issuingCountry": "GBR",
                        "issuingCurrency": "GBP",
                        "isDebit": "false",
                        "isCorporate": "false",
                        "isDccAllowed": "true"
                      },
                      "customReference": null,
                      "customFields": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/hsm-cards": {
      "post": {
        "summary": "Create HsmCard",
        "description": "Creates a HsmCard resource.",
        "tags": [
          "Hsm Cards"
        ],
        "operationId": "CreateHsmCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (HsmCard)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HsmCard"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HsmCard"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/hsm-cards/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "HsmCard [Resource ID](#section/Overview/Values).",
          "example": "8Pmhg2rh8c7wytV9vb27X6VT",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve HsmCard",
        "description": "Retrieve an hsm card resource by its resource ID.",
        "tags": [
          "Hsm Cards"
        ],
        "operationId": "RetrieveHsmCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HsmCard"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/merchants": {
      "get": {
        "summary": "Retrieve Merchants",
        "description": "Return the merchant based on the merchantAlias used to authenticate.",
        "operationId": "RetrieveMerchants",
        "tags": [
          "Merchants"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfMerchants"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/merchants/{id}": {
      "get": {
        "summary": "Retrieve Merchant",
        "description": "Retrieve a Merchant",
        "tags": [
          "Merchants"
        ],
        "operationId": "RetrieveMerchant",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Merchant [Resource ID](#section/Overview/Values).",
            "example": "kFhR9MJ396fvKPmg6GJg8R4G",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                },
                "examples": {
                  "RetrieveMerchant": {
                    "summary": "Retrieve Merchant",
                    "value": {
                      "href": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                      "id": "XrDXRBh9YHxwqQTj2Cmq7j49",
                      "legalName": "PRINCE CORPORATION"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/plan-lists/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Accept"
        },
        {
          "$ref": "#/components/parameters/Accept-Version"
        },
        {
          "name": "id",
          "in": "path",
          "description": "PlanList [Resource ID](#section/Overview/Values)",
          "required": true,
          "example": "‘ywcc2y6rxr7373hfrc9xjvdthghd'",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve PlanList",
        "tags": [
          "Plan Lists"
        ],
        "operationId": "RetrievePlanList",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/plan-lists": {
      "get": {
        "summary": "Retrieve PlanLists",
        "operationId": "RetrievePlanLists",
        "tags": [
          "Plan Lists"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfPlanLists"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/notifications/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Accept"
        },
        {
          "$ref": "#/components/parameters/Accept-Version"
        },
        {
          "name": "id",
          "in": "path",
          "description": "Notification [Resource ID](#section/Overview/Values)",
          "required": true,
          "example": "wrKK4HcHCXcK3KkXwFRMXVjQ",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve Notification",
        "tags": [
          "Notifications"
        ],
        "operationId": "RetrieveNotification",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "summary": "Retrieve Notifications",
        "description": "Get a list of Notifications.\n\nSupported [Filter](#section/Overview/Collection-Filtering):\n* createdAt_ge|gt|le|lt_timestamp\n",
        "operationId": "RetrieveNotifications",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfNotifications"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/orders": {
      "post": {
        "summary": "Create Order",
        "description": "Creates an order.",
        "tags": [
          "Orders"
        ],
        "operationId": "CreateOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (Order)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderInput"
              },
              "examples": {
                "CreateOrder": {
                  "summary": "Create Order",
                  "description": "Shows how to create an order, which may subsequently be used with a payment session.",
                  "value": {
                    "total": {
                      "amount": "3.23",
                      "currencyCode": "EUR"
                    },
                    "description": "parts",
                    "items": [
                      {
                        "total": {
                          "amount": "1.00",
                          "currencyCode": "EUR"
                        },
                        "description": "widget"
                      },
                      {
                        "total": {
                          "amount": "2.00",
                          "currencyCode": "EUR"
                        },
                        "unitPrice": {
                          "amount": "1.00",
                          "currencyCode": "EUR"
                        },
                        "quantity": 2,
                        "description": "cogs",
                        "type": "goods"
                      },
                      {
                        "total": {
                          "amount": ".23",
                          "currencyCode": "EUR"
                        },
                        "description": "tax",
                        "type": "tax"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "examples": {
                  "CreateOrder": {
                    "summary": "Create Order",
                    "value": {
                      "href": "https://api.eu.convergepay.com/orders/p7hxrvrpgfc68w6gm7q3b47y",
                      "id": "p7hxrvrpgfc68w6gm7q3b47y",
                      "createdAt": "2019-04-22T18:52:10.920Z",
                      "modifiedAt": "2019-04-22T18:52:10.920Z",
                      "merchant": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                      "total": {
                        "amount": "3.23",
                        "currencyCode": "EUR"
                      },
                      "description": "parts",
                      "shipTo": null,
                      "shopperEmailAddress": null,
                      "shopperReference": null,
                      "customReference": null,
                      "items": [
                        {
                          "total": {
                            "amount": "1.00",
                            "currencyCode": "EUR"
                          },
                          "description": "widget",
                          "unitPrice": null,
                          "quantity": 1,
                          "customReference": null,
                          "type": "unknown"
                        },
                        {
                          "total": {
                            "amount": "2.00",
                            "currencyCode": "EUR"
                          },
                          "description": "cogs",
                          "unitPrice": {
                            "amount": "1.00",
                            "currencyCode": "EUR"
                          },
                          "quantity": 2,
                          "customReference": null,
                          "type": "goods"
                        },
                        {
                          "total": {
                            "amount": "0.23",
                            "currencyCode": "EUR"
                          },
                          "description": "tax",
                          "unitPrice": null,
                          "quantity": 1,
                          "customReference": null,
                          "type": "tax"
                        }
                      ],
                      "customFields": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      },
      "get": {
        "summary": "Retrieve Orders",
        "description": "Retrieves all Orders. This resource is filterable.",
        "tags": [
          "Orders"
        ],
        "operationId": "RetrieveOrders",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfOrders"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/orders/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Order [Resource ID](#section/Overview/Values).",
          "required": true,
          "example": "p7hxrvrpgfc68w6gm7q3b47y",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve Order",
        "description": "Get an Order by resource ID.",
        "tags": [
          "Orders"
        ],
        "operationId": "RetrieveOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      },
      "post": {
        "summary": "Update Order",
        "description": "Overwrite an existing Order.",
        "tags": [
          "Orders"
        ],
        "operationId": "UpdateOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (Order)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/pan-tokens": {
      "post": {
        "summary": "Create PanTokens",
        "description": "Create PanTokens",
        "operationId": "CreatePanTokens",
        "tags": [
          "Pan Tokens"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (ListOfPanTokens)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfPanTokens"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfPanTokens"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/payment-links": {
      "post": {
        "tags": [
          "Payment Links"
        ],
        "summary": "Create PaymentLink",
        "description": "Create a Payment Link.",
        "operationId": "CreatePaymentLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentLinkInput"
              },
              "examples": {
                "PaymentLinkWithTotal": {
                  "summary": "PaymentLink with Total",
                  "value": {
                    "description": "Special Sale Offer",
                    "total": {
                      "amount": "1.23",
                      "currencyCode": "EUR"
                    },
                    "customReference": "Marketing Campaign #1",
                    "expiresAt": "2017-02-22T13:11:23.123Z",
                    "maximumNumberOfUses": 50,
                    "customFields": {
                      "merchantField1": "Merchant Value 1"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLink"
                },
                "examples": {
                  "PaymentLinkWithAmount": {
                    "summary": "Created PaymentLink with Total",
                    "value": {
                      "description": "Special Sale Offer",
                      "total": {
                        "amount": "1.23",
                        "currencyCode": "EUR"
                      },
                      "customReference": "Marketing Campaign #1",
                      "expiresAt": "2017-02-22T13:11:23.123Z",
                      "maximumNumberOfUses": 50,
                      "url": "https://api.converge.eu.elavon.net/payment-links/sdghjkfdghjfhdjgfhdjlkgf",
                      "numberOfClicks": 0,
                      "numberOfConversions": 0,
                      "customFields": {
                        "merchantField1": "Merchant Value 1"
                      }
                    }
                  },
                  "PaymentLinkWithoutAmount": {
                    "summary": "Created PaymentLink without Total",
                    "value": {
                      "description": "Special Sale Offer",
                      "customReference": "Marketing Campaign #1",
                      "expiresAt": "2017-02-22T13:11:23.123Z",
                      "maximumNumberOfUses": 50,
                      "numberOfClicks": 0,
                      "numberOfConversions": 0,
                      "url": "https://api.converge.eu.elavon.net/payment-links/sdghjkfdghjfhdjgfhdjlkgf",
                      "customFields": {
                        "merchantField1": "Merchant Value 1"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      },
      "get": {
        "summary": "Retrieve PaymentLinks",
        "description": "Get a list of Payment Links.\n\nSupported [Filter](#section/Overview/Collection-Filtering):\n* account_eq_id\n* customReference_eq_string\n",
        "operationId": "RetrievePaymentLinks",
        "tags": [
          "Payment Links"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfPaymentLinks"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/payment-links/{id}": {
      "get": {
        "tags": [
          "Payment Links"
        ],
        "summary": "Retrieve PaymentLink",
        "description": "Retrieve a Payment Link by ID.",
        "operationId": "RetrievePaymentLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "name": "id",
            "in": "path",
            "description": "PaymentLink [Resource ID](#section/Overview/Values).",
            "required": true,
            "example": "wrKK4HcHCXcK3KkXwFRMXVjQ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLink"
                },
                "examples": {
                  "PaymentLink": {
                    "summary": "PaymentLink",
                    "value": {
                      "description": "Special Sale Offer",
                      "total": {
                        "amount": "1.23",
                        "currencyCode": "EUR"
                      },
                      "customReference": "Marketing Campaign #1",
                      "expiresAt": "2017-02-22T13:11:23.123Z",
                      "maximumNumberOfUses": 50,
                      "url": "https://api.converge.eu.elavon.net/payment-links/wrKK4HcHCXcK3KkXwFRMXVjQ",
                      "numberOfClicks": 0,
                      "numberOfConversions": 0,
                      "customFields": {
                        "merchantField1": "Merchant Value 1"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      },
      "post": {
        "tags": [
          "Payment Links"
        ],
        "summary": "Update PaymentLink",
        "description": "Overwrite an existing Payment Link.",
        "operationId": "UpdatePaymentLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "name": "id",
            "in": "path",
            "description": "PaymentLink [Resource ID](#section/Overview/Values).",
            "required": true,
            "example": "wrKK4HcHCXcK3KkXwFRMXVjQ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentLink"
              },
              "examples": {
                "UpdateCustomReference": {
                  "summary": "Update Custom Reference",
                  "value": {
                    "customReference": "Marketing Campaign #2"
                  }
                },
                "UpdateCustomFields": {
                  "summary": "Update Custom Fields",
                  "value": {
                    "customFields": {
                      "merchantField1": "Merchant Value 2"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLink"
                },
                "examples": {
                  "UpdatedCustomReference": {
                    "summary": "Updated Custom Reference",
                    "value": {
                      "description": "Special Sale Offer",
                      "total": {
                        "amount": "1.23",
                        "currencyCode": "EUR"
                      },
                      "customReference": "Marketing Campaign #2",
                      "expiresAt": "2017-02-22T13:11:23.123Z",
                      "maximumNumberOfUses": 50,
                      "url": "https://api.converge.eu.elavon.net/payment-links/sdghjkfdghjfhdjgfhdjlkgf",
                      "numberOfClicks": 0,
                      "numberOfConversions": 0,
                      "customFields": {
                        "merchantField1": "Merchant Value 1"
                      }
                    }
                  },
                  "UpdatedCustomFields": {
                    "summary": "Updated Custom Fields",
                    "value": {
                      "description": "Special Sale Offer",
                      "total": {
                        "amount": "1.23",
                        "currencyCode": "EUR"
                      },
                      "customReference": "Marketing Campaign #1",
                      "expiresAt": "2017-02-22T13:11:23.123Z",
                      "maximumNumberOfUses": 50,
                      "url": "https://api.converge.eu.elavon.net/payment-links/sdghjkfdghjfhdjgfhdjlkgf",
                      "numberOfClicks": 0,
                      "numberOfConversions": 0,
                      "customFields": {
                        "merchantField1": "Merchant Value 2"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/payment-links/{id}/payment-link-events": {
      "get": {
        "summary": "Retrieve PaymentLinks PaymentLinkEvents",
        "description": "Retrieve a list of Payment Link Events associated with a Payment Link.",
        "operationId": "RetrievePaymentLinksPaymentLinkEvents",
        "tags": [
          "Payment Links"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "PaymentLink [Resource ID](#section/Overview/Values).",
            "required": true,
            "example": "wrKK4HcHCXcK3KkXwFRMXVjQ",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfPaymentLinkEvents"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/payment-link-events": {
      "post": {
        "tags": [
          "Payment Link Events"
        ],
        "summary": "Create PaymentLinkEvent",
        "description": "Create a Payment Link Event.",
        "operationId": "CreatePaymentLinkEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentLinkEventInput"
              },
              "examples": {
                "PaymentLinkEvent": {
                  "summary": "PaymentLinkEvent",
                  "value": {
                    "paymentLink": "https://uat.api.converge.eu.elavonaws.com/payment-links/xhvm3qm4yxh8h9tbdj9fm3ycgpdp",
                    "type": "reminderSent",
                    "shopperEmailAddress": "john.doe@email.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinkEvent"
                },
                "examples": {
                  "PaymentLinkEvent": {
                    "summary": "Created PaymentLinkEvent",
                    "value": {
                      "href": "https://uat.api.converge.eu.elavonaws.com/payment-link-events/dhpymb8bc6q76mhdfq6ddbw3kbdh",
                      "id": "dhpymb8bc6q76mhdfq6ddbw3kbdh",
                      "merchant": "https://uat.api.converge.eu.elavonaws.com/merchants/8dkkmt7yh4w4vdcwfk3mtg4qb9qt",
                      "paymentLink": "https://uat.api.converge.eu.elavonaws.com/payment-links/xhvm3qm4yxh8h9tbdj9fm3ycgpdp",
                      "type": "reminderSent",
                      "createdAt": "2023-02-07T18:49:20.886Z",
                      "createdBy": null,
                      "transaction": null,
                      "shopperEmailAddress": "john.doe@email.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      },
      "get": {
        "summary": "Retrieve PaymentLinkEvents",
        "description": "Get a list of Payment Link Events.",
        "operationId": "RetrievePaymentLinkEvents",
        "tags": [
          "Payment Link Events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfPaymentLinkEvents"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/payment-link-events/{id}": {
      "get": {
        "tags": [
          "Payment Link Events"
        ],
        "summary": "Retrieve PaymentLinkEvent",
        "description": "Retrieve a Payment Link Event by ID.",
        "operationId": "RetrievePaymentLinkEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "name": "id",
            "in": "path",
            "description": "PaymentLinkEvent [Resource ID](#section/Overview/Values).",
            "required": true,
            "example": "dhpymb8bc6q76mhdfq6ddbw3kbdh",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinkEvent"
                },
                "examples": {
                  "PaymentLinkEvent": {
                    "summary": "PaymentLinkEvent",
                    "value": {
                      "href": "https://uat.api.converge.eu.elavonaws.com/payment-link-events/dhpymb8bc6q76mhdfq6ddbw3kbdh",
                      "id": "dhpymb8bc6q76mhdfq6ddbw3kbdh",
                      "merchant": "https://uat.api.converge.eu.elavonaws.com/merchants/8dkkmt7yh4w4vdcwfk3mtg4qb9qt",
                      "paymentLink": "https://uat.api.converge.eu.elavonaws.com/payment-links/xhvm3qm4yxh8h9tbdj9fm3ycgpdp",
                      "type": "reminderSent",
                      "createdAt": "2023-02-07T18:49:20.886Z",
                      "createdBy": null,
                      "transaction": null,
                      "shopperEmailAddress": "john.doe@email.com"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/payment-sessions/{id}": {
      "get": {
        "summary": "Retrieve PaymentSession",
        "description": "Retrieve a payment session resource by ID.\n\nSupported [Filters](#section/Overview/Collection-Filtering):\n* paymentLink_eq_id\n* customReference_eq_string\n",
        "tags": [
          "Payment Sessions"
        ],
        "operationId": "RetrievePaymentSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "name": "id",
            "in": "path",
            "description": "PaymentSession [Resource ID](#section/Overview/Values)",
            "required": true,
            "example": "rd8y9xhx7qh9yj6r4vpxpqcv",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentSession"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      },
      "post": {
        "summary": "Update PaymentSession",
        "description": "Overwrite an existing payment session with new information.",
        "tags": [
          "Payment Sessions"
        ],
        "operationId": "UpdatePaymentSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "name": "id",
            "in": "path",
            "description": "PaymentSession [Resource ID](#section/Overview/Values)",
            "required": true,
            "example": "rd8y9xhx7qh9yj6r4vpxpqcv",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "object (PaymentSession)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSession"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentSession"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/paze-payments": {
      "post": {
        "summary": "Create PazePayment",
        "description": "Create a Paze payment.",
        "operationId": "CreatePazePayment",
        "tags": [
          "Paze Payments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (PazePayment)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PazePaymentInput"
              },
              "examples": {
                "CreateGooglePayPayment": {
                  "summary": "Create a Paze payment.",
                  "value": {
                    "card": {
                      "holderName": "John Doe",
                      "billTo": {
                        "fullName": "John Doe",
                        "countryCode": "USA",
                        "postalCode": "94043",
                        "street1": "1600 Amphitheatre Parkway",
                        "city": "Mountain View",
                        "region": "CA"
                      }
                    },
                    "token": "{\"signature\":\"MEQCIH0nEUW6uEDnxNAeUlxJw7UgtV53jEtFycJG6QEX34u0AiBVm00R1O8oL22RLQ26MPDd7Sn/24m4+5AxzmD8tEctjA\\u003d\\u003d\",\"intermediateSigningKey\":{\"signedKey\":\"{\\\"keyValue\\\":\\\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAELNIQDI21szog5jsBdgYLhMZEDcvOr59V1XI3vWtDVWgd/dU+yx/y7VZ7UxqKkTgA/o5TikdJn/l4qc8wgR3LYw\\\\u003d\\\\u003d\\\",\\\"keyExpiration\\\":\\\"1673524261966\\\"}\",\"signatures\":[\"MEUCIGe/oQ5E1hg5ONxtGQR+E4IoMgHaazatEOszlMTOwyI5AiEAos7ETQoM46nsGCfNqEBUPE23voAKIIefJ6Sg870trts\\u003d\"]},\"protocolVersion\":\"ECv2\",\"signedMessage\":\"{\\\"encryptedMessage\\\":\\\"K8CTFde4vVSL+1ttpVxIciqQj94+ji/fu7l1tkR9dOElg65FU2lfEcFLDD374BVdZlZwgQLZOt8MOHc8vQLDKt1YYfTaZfrLfLrD+3Rv10YIsvgF0jXHQ9NmgDYGt06XNhg8E5lcmo+Fpk3d9qCSEXaCN3vk6uSmfsn2ZoMHEqhTpnSB+RKmMbkC8QfQn7gEeS12HKWSCRHGb/NsyFVNPrQYEpuhkZOJMKmS+nZVgtNdfg6hRpWFjg7Os4YwQIiYRJYh2st0zD1fUwDPSX4iJJ9BwFOrj8KMEoHNh5SnTcxeoAuXHm5boFxbVXZXJNPSHh5ZsboNdd2mYYnfr1QzF9Jy/TDhU1vkqRPAKypzPpGjNdgMFKpqpk2nwgrzmtP7sZitRC59qeutLkaI8IPXHUmeMCoAHsPTuk+OWBQI2N/mPM6AVo/ahu/V1G++vdhsfEi5W5KPhq6IW7j9gGh840ur489AjpV1W6ihLsZVIC/rgjPyOqrorwx/U1pJ+Sf0Beeyc5jDTRb/pmlCgy4p8F+Qy1eqw4YmKtP/da4IVtKWvXWe+KRTZqd/s17j5qciknMn83R1M70jCFIAWuM0UDvb6iFO7Qgq1bqZ\\\",\\\"ephemeralPublicKey\\\":\\\"BKgFE3NUYmE4kGiIbv/L6LwlXLLWbT1g9QEKdpzI9qRbGJ3xzYNSmJ2DvHrtTg4K2Wn2l08cZROjc2PwWRYhKCA\\\\u003d\\\",\\\"tag\\\":\\\"FDREH5rjJYvSYTSz7hw3jB3Vm+t3HTiS1thPM78eMaw\\\\u003d\\\"}\"}",
                    "payloadId": "afbexyzf-021x-ca50-e22e-1d15abc2ec01",
                    "sessionId": "pr9i793q4lwcqnr5123",
                    "customReference": "customReference",
                    "customFields": {
                      "name1": "value1",
                      "name2": "value2"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PazePayment"
                },
                "examples": {
                  "CreatePazePayment": {
                    "summary": "Create a Paze payment.",
                    "value": {
                      "href": "https://api.converge.eu.elavonaws.com/google-pay-payments/q3rdjp2kfx4rwbgdcvr66wwhcfjw",
                      "id": "q3rdjp2kfx4rwbgdcvr66wwhcfjw",
                      "createdAt": "2023-01-04T13:44:36.597Z",
                      "expiresAt": "2023-01-04T14:14:36.597Z",
                      "merchant": "https://api.converge.eu.elavonaws.com/merchants/yfv23vhdptrgd3c3dpg3khydw22f",
                      "processorAccount": "https://api.converge.eu.elavonaws.com/processor-accounts/d4xcjxf4282xrtvcdcpv3wrxq77v",
                      "card": {
                        "holderName": "John Doe",
                        "panFingerprint": "vdr9fxwq888xybphtfm2xhxv78vj",
                        "expirationMonth": 12,
                        "expirationYear": 2028,
                        "billTo": {
                          "fullName": "John Doe",
                          "company": null,
                          "street1": "1600 Amphitheatre Parkway",
                          "street2": null,
                          "city": "Mountain View",
                          "region": "CA",
                          "postalCode": "94043",
                          "countryCode": "USA",
                          "primaryPhone": null,
                          "alternatePhone": null,
                          "fax": null,
                          "email": null
                        },
                        "maskedNumber": "XXXXXXXXXXXX1111",
                        "last4": "1111",
                        "bin": "411111",
                        "scheme": "Visa",
                        "brand": "Visa Credit",
                        "fundingSource": "credit",
                        "issuingBank": "Google Pay Test",
                        "issuingCountry": "USA",
                        "issuingCurrency": "USD",
                        "isDebit": "false",
                        "isCorporate": "false",
                        "isDccAllowed": "true"
                      },
                      "customReference": null,
                      "customFields": null,
                      "verificationResults": {
                        "name": "unprovided",
                        "securityCode": "unprovided",
                        "addressStreet": "unprovided",
                        "addressPostalCode": "unprovided",
                        "threeDSecureV1": "unprovided",
                        "threeDSecureV2": "unprovided",
                        "cryptogramSecurity": "unprovided"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/paze-payments/{id}": {
      "get": {
        "summary": "Retrieve PazePayment",
        "description": "Retrieve a Paze payment resource by ID.",
        "operationId": "RetrievePazePayment",
        "tags": [
          "Paze Payments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "name": "id",
            "in": "path",
            "description": "PazePayment [Resource ID](#section/Overview/Values)",
            "required": true,
            "example": "q3rdjp2kfx4rwbgdcvr66wwhcfjw",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PazePayment"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/plans": {
      "post": {
        "summary": "Create Plan",
        "description": "Creates a Plan.",
        "operationId": "CreatePlan",
        "tags": [
          "Plans"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (Plan)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      },
      "get": {
        "summary": "Retrieve Plans",
        "description": "Retrieve all Plans. This resource is filterable.",
        "operationId": "RetrievePlans",
        "tags": [
          "Plans"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfPlans"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/plans/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Plan [Resource ID](#section/Overview/Values)",
          "required": true,
          "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve Plan",
        "description": "Retrieve a Plan by resource ID.",
        "operationId": "RetrievePlan",
        "tags": [
          "Plans"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      },
      "post": {
        "summary": "Update Plan",
        "description": "Overwrite an existing Plan.",
        "operationId": "UpdatePlan",
        "tags": [
          "Plans"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (Plan)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Plan"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      },
      "delete": {
        "summary": "Delete Plan",
        "description": "Delete a Plan.",
        "operationId": "DeletePlan",
        "tags": [
          "Plans"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "headers": {
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/processor-accounts": {
      "get": {
        "summary": "Retrieve ProcessorAccounts",
        "description": "Retrieve all processor accounts. This resource is filterable.",
        "operationId": "RetrieveProcessorAccounts",
        "tags": [
          "Processor Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfProcessorAccounts"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/payment-sessions": {
      "post": {
        "summary": "Create PaymentSession",
        "description": "Create a payment session.",
        "tags": [
          "Payment Sessions"
        ],
        "operationId": "CreatePaymentSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (PaymentSession)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSessionInput"
              },
              "examples": {
                "CreatePaymentSession": {
                  "summary": "Create payment session",
                  "description": "Shows how to create a payment session from an order, which  is required for hosted payment page integration.",
                  "value": {
                    "order": "https://uat.api.converge.eu.elavonaws.com/orders/txdjjwg49k4pdkcyyhbpb9tffmbg",
                    "returnUrl": "https://merchant.com/return",
                    "cancelUrl": "https://merchant.com/cancel",
                    "doCreateTransaction": "true"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentSession"
                },
                "examples": {
                  "CreatePaymentSession": {
                    "summary": "Create payment session",
                    "value": {
                      "href": "https://uat.api.converge.eu.elavonaws.com/payment-sessions/2jd2thg4bqrtrdrf8rqmykqtmj9v",
                      "id": "2jd2thg4bqrtrdrf8rqmykqtmj9v",
                      "createdAt": "2024-02-01T13:59:08.352Z",
                      "modifiedAt": "2024-02-01T13:59:08.352Z",
                      "expiresAt": "2024-02-01T14:29:08.352Z",
                      "merchant": "https://uat.api.converge.eu.elavonaws.com/merchants/28kvwjbm67k36kxcvw6rgwdggkf6",
                      "account": "https://uat.api.converge.eu.elavonaws.com/accounts/28kvwjbm67k36kxcvw6rgwdggkf6",
                      "order": "https://uat.api.converge.eu.elavonaws.com/orders/txdjjwg49k4pdkcyyhbpb9tffmbg",
                      "allowedPaymentMethods": [
                        "Card"
                      ],
                      "allowedPaymentMethodOrigins": [
                        "Google Pay",
                        "Card",
                        "Apple Pay"
                      ],
                      "paymentLink": null,
                      "salesTax": null,
                      "forexAdvice": null,
                      "surchargeAdvice": null,
                      "transaction": null,
                      "hostedCard": null,
                      "storedCard": null,
                      "googlePayPayment": null,
                      "applePayPayment": null,
                      "blik": null,
                      "shopper": null,
                      "debtorAccount": null,
                      "threeDSecure": null,
                      "shopperEmailAddress": null,
                      "billTo": null,
                      "shipTo": null,
                      "hppType": "fullPageRedirect",
                      "returnUrl": "https://merchant.com/return",
                      "cancelUrl": "https://merchant.com/cancel",
                      "originUrl": null,
                      "defaultLanguageTag": null,
                      "shopperLanguageTag": null,
                      "doCreateTransaction": true,
                      "doCapture": null,
                      "doThreeDSecure": true,
                      "doReset": false,
                      "previousTransactions": [],
                      "customReference": null,
                      "customFields": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/payment-method-links": {
      "post": {
        "summary": "Create PaymentMethodLink",
        "description": "Create a payment method link.",
        "tags": [
          "Payment Method Links"
        ],
        "operationId": "CreatePaymentMethodLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (PaymentMethodLink)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodLinkInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodLink"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      },
      "get": {
        "summary": "Retrieve Payment Method Links",
        "description": "Retrieves all Payment Method Links.",
        "tags": [
          "Payment Method Links"
        ],
        "operationId": "RetrievePaymentMethodLinks",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfPaymentMethodLinks"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/payment-method-links/{id}": {
      "get": {
        "summary": "Retrieve PaymentMethodLink",
        "description": "Retrieve a payment method link resource by ID.\n",
        "tags": [
          "Payment Method Links"
        ],
        "operationId": "RetrievePaymentMethodLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "name": "id",
            "in": "path",
            "description": "PaymentMethodLink [Resource ID](#section/Overview/Values)",
            "required": true,
            "example": "rd8y9xhx7qh9yj6r4vpxpqcv",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodLink"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      },
      "post": {
        "summary": "Update PaymentMethodLink",
        "description": "Overwrite an existing payment method session with new information.",
        "tags": [
          "Payment Method Links"
        ],
        "operationId": "UpdatePaymentMethodLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "name": "id",
            "in": "path",
            "description": "PaymentMethodLink [Resource ID](#section/Overview/Values)",
            "required": true,
            "example": "rd8y9xhx7qh9yj6r4vpxpqcv",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "object (PaymentMethodLink)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodLink"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodLink"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/payment-method-sessions": {
      "post": {
        "summary": "Create PaymentMethodSession",
        "description": "Create a payment method session.",
        "tags": [
          "Payment Method Sessions"
        ],
        "operationId": "CreatePaymentMethodSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (PaymentMethodSession)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodSessionInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodSessionInput"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      },
      "get": {
        "summary": "Retrieve Payment Method Sessions",
        "description": "Retrieves all Payment Method Sessions.",
        "tags": [
          "Payment Method Sessions"
        ],
        "operationId": "RetrievePaymentMethodSessions",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfPaymentMethodSessions"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/payment-method-sessions/{id}": {
      "post": {
        "summary": "Update PaymentMethodSession",
        "description": "Overwrite an existing payment method session with new information.",
        "tags": [
          "Payment Method Sessions"
        ],
        "operationId": "UpdatePaymentMethodSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "name": "id",
            "in": "path",
            "description": "PaymentMethodSession [Resource ID](#section/Overview/Values)",
            "required": true,
            "example": "rd8y9xhx7qh9yj6r4vpxpqcv",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "object (PaymentMethodSession)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodSession"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodSession"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      },
      "get": {
        "summary": "Retrieve PaymentMethodSession",
        "description": "Retrieve a payment method session resource by ID.\n",
        "tags": [
          "Payment Method Sessions"
        ],
        "operationId": "RetrievePaymentMethodSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "name": "id",
            "in": "path",
            "description": "PaymentMethodSession [Resource ID](#section/Overview/Values)",
            "required": true,
            "example": "rd8y9xhx7qh9yj6r4vpxpqcv",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodSession"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/processor-accounts/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Accept"
        },
        {
          "$ref": "#/components/parameters/Accept-Version"
        },
        {
          "name": "id",
          "in": "path",
          "description": "ProcessorAccount [Resource ID](#section/Overview/Values).",
          "required": true,
          "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve ProcessorAccount",
        "description": "Retrieve a Processor Account by resource ID.",
        "tags": [
          "Processor Accounts"
        ],
        "operationId": "RetrieveProcessorAccount",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessorAccount"
                },
                "examples": {
                  "RetrieveProcessorAccount": {
                    "summary": "Retrieve Processor Account",
                    "description": "Shows the provided read-only processor account resource referenced by transactions.",
                    "value": {
                      "href": "https://api.eu.convergepay.com/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                      "id": "KmvmfQJpCBJpXHyP2kgrK2hD",
                      "merchant": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                      "processorReference": "2100187113",
                      "tradeName": "PRINCE CORPORATION",
                      "businessAddress": {
                        "street1": "10 Downing Street",
                        "street2": null,
                        "city": "London",
                        "region": null,
                        "postalCode": "SW1A 2AA",
                        "countryCode": "GBR"
                      },
                      "businessPhone": "+353 72683105804",
                      "businessEmail": "info@aviato.com",
                      "businessWebsite": "www.aviato.com",
                      "merchantCategoryCode": "4722",
                      "settlementCurrencyCode": "EUR"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/refund-surcharge-advices": {
      "post": {
        "summary": "Create RefundSurchargeAdvice",
        "description": "Create a refund surcharge advice.",
        "operationId": "CreateRefundSurchargeAdvice",
        "tags": [
          "Refund Surcharge Advices"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (RefundSurchargeAdvice)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundSurchargeAdviceInput"
              },
              "examples": {
                "CreateRefundSurchargeAdvice": {
                  "summary": "Create a refund surcharge advice.",
                  "value": {
                    "parentTransaction": "https://uat.api.converge.eu.elavonaws.com/transactions/99qmrqcpjt2h8cm6q67gwd7kxywy",
                    "total": {
                      "amount": "2.00",
                      "currencyCode": "USD"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundSurchargeAdvice"
                },
                "examples": {
                  "CreateRefundSurchargeAdvice": {
                    "summary": "Create a refund surcharge advice.",
                    "value": {
                      "href": "https://uat.api.converge.eu.elavonaws.com/refund-surcharge-advices/djg8rwkkbb7jbwjv7hjf4bbj26r7",
                      "id": "djg8rwkkbb7jbwjv7hjf4bbj26r7",
                      "createdAt": "2024-01-26T18:17:14.168Z",
                      "expiresAt": "2024-01-26T18:47:14.168Z",
                      "merchant": "https://uat.api.converge.eu.elavonaws.com/merchants/28kvwjbm67k36kxcvw6rgwdggkf6",
                      "processorAccount": "https://uat.api.converge.eu.elavonaws.com/processor-accounts/prrgxhfwxw4ptwxvqdp7q9qydbd9",
                      "parentTransaction": "https://uat.api.converge.eu.elavonaws.com/transactions/gdw9tb67tfbf4ddv6jxc82t8ypyr",
                      "total": {
                        "amount": "2.00",
                        "currencyCode": "USD"
                      },
                      "surchargeRate": "0.03",
                      "surchargeTotal": {
                        "amount": "0.06",
                        "currencyCode": "USD"
                      },
                      "adjustedTotal": {
                        "amount": "2.06",
                        "currencyCode": "USD"
                      },
                      "customReference": null,
                      "customFields": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/refund-surcharge-advices/{id}": {
      "get": {
        "summary": "Retrieve RefundSurchargeAdvice",
        "description": "Retrieve a refund surcharge advice resource by ID.",
        "operationId": "RetrieveRefundSurchargeAdvice",
        "tags": [
          "Refund Surcharge Advices"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "name": "id",
            "in": "path",
            "description": "RefundSurchargeAdvice [Resource ID](#section/Overview/Values)",
            "required": true,
            "example": "388jcqbr7mf73xtj77phbpdbcb86",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundSurchargeAdvice"
                },
                "examples": {
                  "RetrieveRefundSurchargeAdvice": {
                    "summary": "Retrieve a refund surcharge advice.",
                    "value": {
                      "href": "https://uat.api.converge.eu.elavonaws.com/refund-surcharge-advices/388jcqbr7mf73xtj77phbpdbcb86",
                      "id": "388jcqbr7mf73xtj77phbpdbcb86",
                      "createdAt": "2023-07-05T19:41:48.886Z",
                      "expiresAt": "2023-07-05T20:11:48.886Z",
                      "merchant": "https://uat.api.converge.eu.elavonaws.com/merchants/28kvwjbm67k36kxcvw6rgwdggkf6",
                      "processorAccount": "https://uat.api.converge.eu.elavonaws.com/processor-accounts/prrgxhfwxw4ptwxvqdp7q9qydbd9",
                      "parentTransaction": "https://uat.api.converge.eu.elavonaws.com/transactions/99qmrqcpjt2h8cm6q67gwd7kxywy",
                      "total": {
                        "amount": "5.00",
                        "currencyCode": "USD"
                      },
                      "surchargeRate": "0.01",
                      "surchargeTotal": {
                        "amount": "0.05",
                        "currencyCode": "USD"
                      },
                      "adjustedTotal": {
                        "amount": "5.05",
                        "currencyCode": "USD"
                      },
                      "customReference": null,
                      "customFields": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/shoppers": {
      "post": {
        "summary": "Create Shopper",
        "description": "Create a Shopper resource.",
        "operationId": "CreateShopper",
        "tags": [
          "Shoppers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (Shopper)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shopper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shopper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      },
      "get": {
        "summary": "Retrieve Shoppers",
        "description": "Retrieve a list of all shoppers.\n\nSupported [Filter](#section/Overview/Collection-Filtering):\n* customReference_eq_string\n",
        "operationId": "RetrieveShoppers",
        "tags": [
          "Shoppers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfShoppers"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/shoppers/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Shopper [Resource ID](#section/Overview/Values).",
          "required": true,
          "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve Shopper",
        "description": "Retrieve a Shopper by resource ID.",
        "operationId": "RetrieveShopper",
        "tags": [
          "Shoppers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shopper"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      },
      "post": {
        "summary": "Update Shopper",
        "description": "Overwrite an existing Shopper resource.",
        "operationId": "UpdateShopper",
        "tags": [
          "Shoppers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (Shopper)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shopper"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shopper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      },
      "delete": {
        "summary": "Delete Shopper",
        "description": "Delete a Shopper.",
        "operationId": "DeleteShopper",
        "tags": [
          "Shoppers"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "headers": {
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/shoppers/{id}/stored-cards": {
      "get": {
        "summary": "Retrieve Shoppers StoredCards",
        "description": "Retrieve a list of Stored Cards associated with a Shopper.",
        "operationId": "RetrieveShoppersStoredCards",
        "tags": [
          "Shoppers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Shopper [Resource ID](#section/Overview/Values).",
            "required": true,
            "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfStoredCards"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/stored-ach-payments": {
      "post": {
        "summary": "Create Stored ACH payment",
        "description": "Create a Stored ACH payment resource.",
        "operationId": "CreateStoredAchPayment",
        "tags": [
          "Stored ACH Payments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (StoredAchPayment)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoredAchPaymentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredAchPayment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/stored-ach-payments/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "StoredAchPayment [Resource ID](#section/Overview/Values)",
          "required": true,
          "example": "fupudr0spiswothosWaf3asw",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve StoredAchPayment",
        "description": "Retrieve a stored ACH payment by resource ID.",
        "operationId": "RetrieveStoredAchPayment",
        "tags": [
          "Stored ACH Payments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredAchPayment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      },
      "post": {
        "summary": "Update StoredAchPayment",
        "description": "Overwrite an existing stored ACH payment resource. Note that only **achPayment**.*accountName* can be updated.",
        "operationId": "UpdateStoredAchPayment",
        "tags": [
          "Stored ACH Payments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (StoredAchPayment)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoredAchPayment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredAchPayment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      },
      "delete": {
        "summary": "Delete StoredAchPayment",
        "description": "Delete a stored ACH payment resource.",
        "operationId": "DeleteStoredAchPayment",
        "tags": [
          "Stored ACH Payments"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "headers": {
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/stored-cards": {
      "post": {
        "summary": "Create StoredCard",
        "description": "Create a Stored Card resource.",
        "operationId": "CreateStoredCard",
        "tags": [
          "Stored Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (StoredCard)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoredCardInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredCard"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/stored-cards/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "StoredCard [Resource ID](#section/Overview/Values)",
          "required": true,
          "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve StoredCard",
        "description": "Retrieve a stored card by resource ID.",
        "operationId": "RetrieveStoredCard",
        "tags": [
          "Stored Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredCard"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      },
      "post": {
        "summary": "Update StoredCard",
        "description": "Overwrite an existing stored card resource.",
        "operationId": "UpdateStoredCard",
        "tags": [
          "Stored Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (StoredCard)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoredCard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredCard"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      },
      "delete": {
        "summary": "Delete StoredCard",
        "description": "Delete a stored card resource.",
        "operationId": "DeleteStoredCard",
        "tags": [
          "Stored Cards"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "headers": {
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/subscriptions": {
      "post": {
        "summary": "Create Subscription",
        "description": "Create a subscription for a customer. The subscription will generate recurring payments based on timing and amount details from a [plan](#tag/Plans) and using a specific stored card for the payment.",
        "operationId": "CreateSubscription",
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (Subscription)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      },
      "get": {
        "summary": "Retrieve Subscriptions",
        "description": "Retrieve all subscriptions. This method accepts resource filtering.",
        "operationId": "RetrieveSubscriptions",
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfSubscriptions"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/subscriptions/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Subscription [Resource ID](#section/Overview/Values)",
          "required": true,
          "example": "6xxFwvM8BqmM6T6DcF3DyTB3",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve Subscription",
        "description": "Retrieve a subscription by resource ID.",
        "operationId": "RetrieveSubscription",
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      },
      "post": {
        "summary": "Update Subscription",
        "description": "Overwrite an existing subscription resource.",
        "operationId": "UpdateSubscription",
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (Subscription)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/surcharge-advices": {
      "post": {
        "summary": "Create SurchargeAdvice",
        "description": "Create a surcharge advice.",
        "operationId": "CreateSurchargeAdvice",
        "tags": [
          "Surcharge Advices"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (SurchargeAdvice)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SurchargeAdviceInput"
              },
              "examples": {
                "CreateSurchargeAdvice": {
                  "summary": "Create a surcharge advice.",
                  "value": {
                    "total": {
                      "amount": "5.00",
                      "currencyCode": "USD"
                    },
                    "cardNumber": "XXXX.XXXX.XXXX.4444"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SurchargeAdvice"
                },
                "examples": {
                  "CreateSurchargeAdvice": {
                    "summary": "Create a surcharge advice.",
                    "value": {
                      "href": "https://uat.api.converge.eu.elavonaws.com/surcharge-advices/ph4jtcrxffvdbmvwg79xvkf8fqf6",
                      "id": "ph4jtcrxffvdbmvwg79xvkf8fqf6",
                      "createdAt": "2023-07-05T19:27:44.570Z",
                      "expiresAt": "2023-07-05T19:57:44.570Z",
                      "merchant": "https://uat.api.converge.eu.elavonaws.com/merchants/28kvwjbm67k36kxcvw6rgwdggkf6",
                      "processorAccount": "https://uat.api.converge.eu.elavonaws.com/processor-accounts/prrgxhfwxw4ptwxvqdp7q9qydbd9",
                      "panToken": {
                        "token": "9467275901658927495",
                        "provider": "ELAVON_C2_V1",
                        "type": "pan"
                      },
                      "maskedNumber": "XXXXXXXXXXXX4444",
                      "last4": "4444",
                      "bin": "425702",
                      "panFingerprint": "f8gcmwwc7g998tgqqm8pp23pdt9f",
                      "total": {
                        "amount": "5.00",
                        "currencyCode": "USD"
                      },
                      "surchargeRate": "0.01",
                      "surchargeTotal": {
                        "amount": "0.05",
                        "currencyCode": "USD"
                      },
                      "adjustedTotal": {
                        "amount": "5.05",
                        "currencyCode": "USD"
                      },
                      "customReference": null,
                      "customFields": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request is invalid; correct all issues before resending",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureWrapper"
                },
                "examples": {
                  "FieldValidationFailure": {
                    "value": {
                      "status": 400,
                      "failures": [
                        {
                          "code": "badRequest",
                          "description": "The request is invalid; correct all issues before resending",
                          "field": null
                        },
                        {
                          "code": "surchargeNotSupported",
                          "description": "Surcharging is not supported for this card",
                          "field": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/surcharge-advices/{id}": {
      "get": {
        "summary": "Retrieve SurchargeAdvice",
        "description": "Retrieve a surcharge advice resource by ID.",
        "operationId": "RetrieveSurchargeAdvice",
        "tags": [
          "Surcharge Advices"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "name": "id",
            "in": "path",
            "description": "SurchargeAdvice [Resource ID](#section/Overview/Values)",
            "required": true,
            "example": "ph4jtcrxffvdbmvwg79xvkf8fqf6",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SurchargeAdvice"
                },
                "examples": {
                  "RetrieveSurchargeAdvice": {
                    "summary": "Retrieve a surcharge advice.",
                    "value": {
                      "href": "https://uat.api.converge.eu.elavonaws.com/surcharge-advices/ph4jtcrxffvdbmvwg79xvkf8fqf6",
                      "id": "ph4jtcrxffvdbmvwg79xvkf8fqf6",
                      "createdAt": "2023-07-05T19:27:44.570Z",
                      "expiresAt": "2023-07-05T19:57:44.570Z",
                      "merchant": "https://uat.api.converge.eu.elavonaws.com/merchants/28kvwjbm67k36kxcvw6rgwdggkf6",
                      "processorAccount": "https://uat.api.converge.eu.elavonaws.com/processor-accounts/prrgxhfwxw4ptwxvqdp7q9qydbd9",
                      "panToken": {
                        "token": "9467275901658927495",
                        "provider": "ELAVON_C2_V1",
                        "type": "pan"
                      },
                      "maskedNumber": "XXXXXXXXXXXX4444",
                      "last4": "4444",
                      "bin": "425702",
                      "panFingerprint": "f8gcmwwc7g998tgqqm8pp23pdt9f",
                      "total": {
                        "amount": "5.00",
                        "currencyCode": "USD"
                      },
                      "surchargeRate": "0.01",
                      "surchargeTotal": {
                        "amount": "0.05",
                        "currencyCode": "USD"
                      },
                      "adjustedTotal": {
                        "amount": "5.05",
                        "currencyCode": "USD"
                      },
                      "customReference": null,
                      "customFields": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/terminals": {
      "get": {
        "summary": "Retrieve Terminals",
        "description": "Retrieve a list of all terminals.",
        "operationId": "RetrieveTerminals",
        "tags": [
          "Terminals"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfTerminals"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/terminals/{id}": {
      "get": {
        "summary": "Retrieve Terminal details",
        "description": "Retrieve terminal resource by ID.",
        "operationId": "RetrieveTerminal",
        "tags": [
          "Terminals"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Terminal [Resource ID](#section/Overview/Values)",
            "required": true,
            "example": "xthgtxg7q8vrwkb3grmyjxr73d2v",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Terminal"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/terminals/{id}/emv-keys": {
      "get": {
        "summary": "Retrieve EMV keys",
        "description": "Retrieve a list of all EMV keys.",
        "operationId": "RetrieveEmvKeys",
        "tags": [
          "Terminals"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfEmvKeys"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/terminals/{id}/provisioning-codes": {
      "get": {
        "summary": "Retrieve Provisioning Code",
        "description": "Retrieve the provisioning code.",
        "operationId": "RetrieveProvisioningCode",
        "tags": [
          "Terminals"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Terminal [Resource ID](#section/Overview/Values)",
            "required": true,
            "example": "f6whp4",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningCode"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/transactions": {
      "post": {
        "summary": "Create Transaction",
        "description": "Create a Transaction.",
        "tags": [
          "Transactions"
        ],
        "operationId": "CreateTransaction",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (Transaction)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInput"
              },
              "examples": {
                "saleexpiredcard": {
                  "summary": "Create 'sale' transaction with expired card",
                  "description": "Shows how creating a transaction that passes validation successfully creates a declined transaction. Note that 'isAuthorized' is 'false' and there are 'failures'.",
                  "value": {
                    "total": {
                      "amount": "45.23",
                      "currencyCode": "EUR"
                    },
                    "card": {
                      "holderName": "John Smith",
                      "number": "xxxx xxxx xxxx 0007",
                      "expirationMonth": "1",
                      "expirationYear": "2010"
                    },
                    "shopperInteraction": "telephoneOrder"
                  }
                },
                "salehostedcard": {
                  "summary": "Create 'sale' transaction with a hosted card.",
                  "description": "Shows a successfully authorized transaction. In this sample, the request provides card details through a hosted card. Most field values are provided default values, but we've opted to override the default 'doCapture' value.",
                  "value": {
                    "total": {
                      "amount": "6.00",
                      "currencyCode": "EUR"
                    },
                    "hostedCard": "https://api.eu.convergepay.com/hosted-cards/jqm7yjf83bydgytbpcmxbm49",
                    "doCapture": "false"
                  }
                },
                "voidsaletransaction": {
                  "summary": "Create 'void' transaction for 'sale' transaction",
                  "description": "Shows how to void a transaction by creating a new 'void' transaction with 'parentTransaction' set to the transaction's 'href'.",
                  "value": {
                    "type": "void",
                    "parentTransaction": "https://api.eu.convergepay.com/transactions/vmq47jxwv82q7w2htvqj2byr"
                  }
                },
                "fullrefundsale": {
                  "summary": "Create full 'refund' transaction for 'sale' transaction",
                  "description": "Shows how omitting 'total' on a 'refund' transaction will refund the full amount of the original 'sale' transaction.",
                  "value": {
                    "type": "refund",
                    "parentTransaction": "https://api.eu.convergepay.com/transactions/bdt22gvkywfh6fd492xhd2j7"
                  }
                },
                "partialrefundsale": {
                  "summary": "Create partial 'refund' transaction for 'sale' transaction",
                  "description": "Shows how the 'total' field may be used to specify exactly how much of the original 'sale' transaction's 'total' to refund. Subsequent partial refunds are possible as long as the original 'sale' transaction's 'total' isn't exceeded.",
                  "value": {
                    "type": "refund",
                    "total": {
                      "amount": "75.00",
                      "currencyCode": "GBP"
                    },
                    "parentTransaction": "https://api.eu.convergepay.com/transactions/3rdtf3y7h99tjcfkjwqxxhr4"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                },
                "examples": {
                  "saleexpiredcard": {
                    "summary": "Create 'sale' transaction with expired card",
                    "description": "Shows how creating a transaction that passes validation creates a declined transaction. Note that 'isAuthorized' is 'false' and there are 'failures'.",
                    "value": {
                      "href": "https://api.eu.convergepay.com/transactions/xdthhybp77468cp68b8v62rk",
                      "id": "xdthhybp77468cp68b8v62rk",
                      "createdAt": "2019-04-22T18:52:08.173Z",
                      "modifiedAt": "2019-04-22T18:52:08.173Z",
                      "type": "sale",
                      "merchant": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                      "processorAccount": "https://api.eu.convergepay.com/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                      "total": {
                        "amount": "45.23",
                        "currencyCode": "EUR"
                      },
                      "totalRefunded": null,
                      "parentTransaction": null,
                      "description": null,
                      "shopperStatement": null,
                      "customReference": null,
                      "shopperReference": null,
                      "processorReference": "HAQMP6JGDI4",
                      "issuerReference": null,
                      "orderReference": null,
                      "shopperInteraction": "telephoneOrder",
                      "shipTo": null,
                      "shopperEmailAddress": null,
                      "shopperIpAddress": null,
                      "shopperLanguageTag": null,
                      "shopperTimeZone": null,
                      "order": null,
                      "subscription": null,
                      "credentialOnFileType": "none",
                      "credentialOnFileData": null,
                      "card": {
                        "holderName": "John Smith",
                        "panFingerprint": "3rkd4vvcgywtvdcj7ch4mptm",
                        "expirationMonth": 1,
                        "expirationYear": 2010,
                        "billTo": null,
                        "maskedNumber": "XXXX XXXX XXXX 0007",
                        "last4": "0007",
                        "bin": "400880",
                        "scheme": "Visa",
                        "brand": "Visa",
                        "fundingSource": "credit",
                        "issuingBank": "THE ROYAL BANK OF SCOTLAND PLC",
                        "issuingCountry": "GBR",
                        "issuingCurrency": "GBP",
                        "isDebit": "false",
                        "isCorporate": "false",
                        "isDccAllowed": "true"
                      },
                      "createdBy": null,
                      "isHeldForReview": false,
                      "doCapture": true,
                      "doSendReceipt": false,
                      "isAuthorized": false,
                      "authorizationCode": null,
                      "verificationResults": {
                        "name": "unsupported",
                        "securityCode": "unprovided",
                        "addressStreet": "unprovided",
                        "addressPostalCode": "unprovided"
                      },
                      "state": "declined",
                      "batch": null,
                      "customFields": null,
                      "relatedTransactions": [],
                      "failures": [
                        {
                          "code": "declinedByProcessor",
                          "description": "Transaction was declined by the payment processor",
                          "field": null
                        },
                        {
                          "code": "cardExpired",
                          "description": "Transaction was declined because the card has expired",
                          "field": null
                        }
                      ],
                      "history": []
                    }
                  },
                  "salehostedcard": {
                    "summary": "Create 'sale' transaction with hosted card",
                    "value": {
                      "href": "https://api.eu.convergepay.com/transactions/bdf87mqhtj4rjpvhy49cvdpp",
                      "id": "bdf87mqhtj4rjpvhy49cvdpp",
                      "createdAt": "2019-04-22T18:52:17.990Z",
                      "modifiedAt": "2019-04-22T18:52:17.990Z",
                      "type": "sale",
                      "merchant": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                      "processorAccount": "https://api.eu.convergepay.com/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                      "total": {
                        "amount": "6.00",
                        "currencyCode": "EUR"
                      },
                      "totalRefunded": null,
                      "parentTransaction": null,
                      "description": null,
                      "shopperStatement": null,
                      "customReference": null,
                      "shopperReference": null,
                      "processorReference": "HARJSDUEPE6",
                      "issuerReference": "919112156106790",
                      "orderReference": null,
                      "shopperInteraction": "ecommerce",
                      "shipTo": null,
                      "shopperEmailAddress": null,
                      "shopperIpAddress": null,
                      "shopperLanguageTag": null,
                      "shopperTimeZone": null,
                      "order": null,
                      "subscription": null,
                      "credentialOnFileType": "none",
                      "credentialOnFileData": null,
                      "card": {
                        "holderName": "Ela Von",
                        "panFingerprint": "gdytrqm8gfrb2m8p44fyc79b",
                        "expirationMonth": 1,
                        "expirationYear": 2020,
                        "billTo": {
                          "fullName": "Ela Von",
                          "company": "Company",
                          "street1": "2 Concourse Parkway",
                          "street2": "Suite A",
                          "city": "Atlanta",
                          "region": "GA",
                          "postalCode": "30328",
                          "countryCode": "USA",
                          "primaryPhone": "+1 678-731-5000",
                          "alternatePhone": "+1 678-731-5001",
                          "fax": "+1 678-731-5002",
                          "email": "noreply@elavon.com"
                        },
                        "maskedNumber": "XXXXXXXXXXXX0007",
                        "last4": "0007",
                        "bin": "400880",
                        "scheme": "Visa",
                        "brand": "Visa",
                        "fundingSource": "credit",
                        "issuingBank": "THE ROYAL BANK OF SCOTLAND PLC",
                        "issuingCountry": "GBR",
                        "issuingCurrency": "GBP",
                        "isDebit": "false",
                        "isCorporate": "false",
                        "isDccAllowed": "true"
                      },
                      "createdBy": null,
                      "isHeldForReview": false,
                      "doCapture": false,
                      "doSendReceipt": false,
                      "isAuthorized": true,
                      "authorizationCode": "405225",
                      "verificationResults": {
                        "name": "unsupported",
                        "securityCode": "matched",
                        "addressStreet": "matched",
                        "addressPostalCode": "matched"
                      },
                      "state": "authorized",
                      "batch": null,
                      "customFields": null,
                      "relatedTransactions": [],
                      "failures": [],
                      "history": []
                    }
                  },
                  "voidsaletransaction": {
                    "summary": "Create 'void' transaction for 'sale' transaction",
                    "value": {
                      "href": "https://api.eu.convergepay.com/transactions/fw7b7m839whtr2x7gdh7wg84",
                      "id": "fw7b7m839whtr2x7gdh7wg84",
                      "createdAt": "2019-04-22T18:52:21.640Z",
                      "modifiedAt": "2019-04-22T18:52:21.640Z",
                      "type": "void",
                      "merchant": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                      "processorAccount": "https://api.eu.convergepay.com/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                      "total": {
                        "amount": "100.00",
                        "currencyCode": "GBP"
                      },
                      "totalRefunded": null,
                      "parentTransaction": "https://api.eu.convergepay.com/transactions/vmq47jxwv82q7w2htvqj2byr",
                      "description": null,
                      "shopperStatement": null,
                      "customReference": null,
                      "shopperReference": null,
                      "processorReference": null,
                      "issuerReference": null,
                      "orderReference": null,
                      "shopperInteraction": "ecommerce",
                      "shipTo": null,
                      "shopperEmailAddress": null,
                      "shopperIpAddress": null,
                      "shopperLanguageTag": null,
                      "shopperTimeZone": null,
                      "order": null,
                      "subscription": null,
                      "credentialOnFileType": "none",
                      "credentialOnFileData": null,
                      "card": {
                        "holderName": "Jane Doe",
                        "panFingerprint": "3rkd4vvcgywtvdcj7ch4mptm",
                        "expirationMonth": 1,
                        "expirationYear": 2030,
                        "billTo": null,
                        "maskedNumber": "XXXX XXXX XXXX 0007",
                        "last4": "0007",
                        "bin": "400880",
                        "scheme": "Visa",
                        "brand": "Visa",
                        "fundingSource": "credit",
                        "issuingBank": "THE ROYAL BANK OF SCOTLAND PLC",
                        "issuingCountry": "GBR",
                        "issuingCurrency": "GBP",
                        "isDebit": "false",
                        "isCorporate": "false",
                        "isDccAllowed": "true"
                      },
                      "createdBy": null,
                      "isHeldForReview": false,
                      "doCapture": null,
                      "doSendReceipt": null,
                      "isAuthorized": true,
                      "authorizationCode": null,
                      "verificationResults": null,
                      "state": "authorized",
                      "batch": null,
                      "customFields": null,
                      "relatedTransactions": [],
                      "failures": [],
                      "history": []
                    }
                  },
                  "fullrefundsale": {
                    "summary": "Create full 'refund' transaction for 'sale' transaction",
                    "description": "Shows how omitting 'total' on a 'refund' transaction will refund the full amount of the original 'sale' transaction.",
                    "value": {
                      "href": "https://api.eu.convergepay.com/transactions/c2fkpt276g6rf6pwmfxmbyjf",
                      "id": "c2fkpt276g6rf6pwmfxmbyjf",
                      "createdAt": "2019-04-22T18:52:24.256Z",
                      "modifiedAt": "2019-04-22T18:52:24.256Z",
                      "type": "refund",
                      "merchant": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                      "processorAccount": "https://api.eu.convergepay.com/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                      "total": {
                        "amount": "100.00",
                        "currencyCode": "GBP"
                      },
                      "totalRefunded": null,
                      "parentTransaction": "https://api.eu.convergepay.com/transactions/bdt22gvkywfh6fd492xhd2j7",
                      "description": null,
                      "shopperStatement": null,
                      "customReference": null,
                      "shopperReference": null,
                      "processorReference": null,
                      "issuerReference": null,
                      "orderReference": null,
                      "shopperInteraction": "ecommerce",
                      "shipTo": null,
                      "shopperEmailAddress": null,
                      "shopperIpAddress": null,
                      "shopperLanguageTag": null,
                      "shopperTimeZone": null,
                      "order": null,
                      "subscription": null,
                      "credentialOnFileType": "none",
                      "credentialOnFileData": null,
                      "card": {
                        "holderName": "Jane Doe",
                        "panFingerprint": "3rkd4vvcgywtvdcj7ch4mptm",
                        "expirationMonth": 1,
                        "expirationYear": 2030,
                        "billTo": null,
                        "maskedNumber": "XXXX XXXX XXXX 0007",
                        "last4": "0007",
                        "bin": "400880",
                        "scheme": "Visa",
                        "brand": "Visa",
                        "fundingSource": "credit",
                        "issuingBank": "THE ROYAL BANK OF SCOTLAND PLC",
                        "issuingCountry": "GBR",
                        "issuingCurrency": "GBP",
                        "isDebit": "false",
                        "isCorporate": "false",
                        "isDccAllowed": "true"
                      },
                      "createdBy": null,
                      "isHeldForReview": false,
                      "doCapture": null,
                      "doSendReceipt": false,
                      "isAuthorized": true,
                      "authorizationCode": null,
                      "verificationResults": null,
                      "state": "authorized",
                      "batch": null,
                      "customFields": null,
                      "relatedTransactions": [],
                      "failures": [],
                      "history": []
                    }
                  },
                  "partialrefundsale": {
                    "summary": "Create partial 'refund' transaction for 'sale' transaction",
                    "description": "Shows how the 'total' field may be used to specify exactly how much of the original 'sale' transaction's 'total' to refund. Subsequent partial refunds are possible as long as the original 'sale' transaction's 'total' isn't exceeded.",
                    "value": {
                      "href": "https://api.eu.convergepay.com/transactions/cwdgw42hd6vfy3pt89xk2j3v",
                      "id": "cwdgw42hd6vfy3pt89xk2j3v",
                      "createdAt": "2019-04-22T18:52:26.431Z",
                      "modifiedAt": "2019-04-22T18:52:26.431Z",
                      "type": "refund",
                      "merchant": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                      "processorAccount": "https://api.eu.convergepay.com/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                      "total": {
                        "amount": "75.00",
                        "currencyCode": "GBP"
                      },
                      "totalRefunded": null,
                      "parentTransaction": "https://api.eu.convergepay.com/transactions/3rdtf3y7h99tjcfkjwqxxhr4",
                      "description": null,
                      "shopperStatement": null,
                      "customReference": null,
                      "shopperReference": null,
                      "processorReference": null,
                      "issuerReference": null,
                      "orderReference": null,
                      "shopperInteraction": "ecommerce",
                      "shipTo": null,
                      "shopperEmailAddress": null,
                      "shopperIpAddress": null,
                      "shopperLanguageTag": null,
                      "shopperTimeZone": null,
                      "order": null,
                      "subscription": null,
                      "credentialOnFileType": "none",
                      "credentialOnFileData": null,
                      "card": {
                        "holderName": "Jane Doe",
                        "panFingerprint": "gdytrqm8gfrb2m8p44fyc79b",
                        "expirationMonth": 1,
                        "expirationYear": 2030,
                        "billTo": null,
                        "maskedNumber": "XXXX XXXX XXXX 0007",
                        "last4": "0007",
                        "bin": "400880",
                        "scheme": "Visa",
                        "brand": "Visa",
                        "fundingSource": "credit",
                        "issuingBank": "THE ROYAL BANK OF SCOTLAND PLC",
                        "issuingCountry": "GBR",
                        "issuingCurrency": "GBP",
                        "isDebit": "false",
                        "isCorporate": "false",
                        "isDccAllowed": "true"
                      },
                      "createdBy": null,
                      "isHeldForReview": false,
                      "doCapture": null,
                      "doSendReceipt": false,
                      "isAuthorized": true,
                      "authorizationCode": null,
                      "verificationResults": null,
                      "state": "authorized",
                      "batch": null,
                      "customFields": null,
                      "relatedTransactions": [],
                      "failures": [],
                      "history": []
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      },
      "get": {
        "summary": "Retrieve Transactions",
        "description": "Retrieve all Transactions.\n\nSupported [Filters](#section/Overview/Collection-Filtering):\n\n* shopper_eq_id\n* subscription_eq_id\n* account_eq_id\n* isHeldForReview_eq_boolean\n* batch_eq_id\n* createdAt_ge|gt|le|lt_timestamp\n* type_ne|eq|in_string\n* orderReference_eq_string\n* paymentLink_eq_id\n* customReference_eq_string\n* card.last4_eq_string\n* paymentGroup_eq_id\n* terminal_eq_id\n* description_eq|like_string\n* total.amount_eq|ge|gt|le|lt_amount\n* card.holderName_eq|like_string\n* salesTax.amount_eq|ge|gt|le|lt_amount\n* tip.amount_eq|ge|gt|le|lt_amount\n* card.scheme_eq_string\n* paymentMethod_eq_string\n* paymentMethodOrigin_eq_string\n* createdBy_eq_string\n* state_in_string\n* parentTransaction_eq|is|isnot_id\n* doCapture_eq_boolean\n",
        "tags": [
          "Transactions"
        ],
        "operationId": "RetrieveTransactions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/queryParams"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfTransactions"
                },
                "examples": {
                  "ListRecentTransactions": {
                    "summary": "List recent transactions",
                    "description": "Shows how to list a resource using a custom page limit.",
                    "value": {
                      "href": "https://api.eu.convergepay.com/transactions?limit=3",
                      "first": "https://api.eu.convergepay.com/transactions?limit=3",
                      "next": "https://api.eu.convergepay.com/transactions?pageToken=MCwz&limit=3",
                      "pageToken": null,
                      "nextPageToken": "MCwz",
                      "limit": 3,
                      "items": [
                        {
                          "href": "https://api.eu.convergepay.com/transactions/cwdgw42hd6vfy3pt89xk2j3v",
                          "id": "cwdgw42hd6vfy3pt89xk2j3v",
                          "createdAt": "2019-04-22T18:52:26.431Z",
                          "modifiedAt": "2019-04-22T18:52:26.597Z",
                          "type": "refund",
                          "merchant": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                          "processorAccount": "https://api.eu.convergepay.com/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                          "total": {
                            "amount": "75.00",
                            "currencyCode": "GBP"
                          },
                          "totalRefunded": null,
                          "parentTransaction": "https://api.eu.convergepay.com/transactions/3rdtf3y7h99tjcfkjwqxxhr4",
                          "description": null,
                          "shopperStatement": null,
                          "customReference": null,
                          "shopperReference": null,
                          "processorReference": null,
                          "issuerReference": null,
                          "orderReference": null,
                          "shopperInteraction": "ecommerce",
                          "shipTo": null,
                          "shopperEmailAddress": null,
                          "shopperIpAddress": null,
                          "shopperLanguageTag": null,
                          "shopperTimeZone": null,
                          "order": null,
                          "subscription": null,
                          "credentialOnFileType": "none",
                          "credentialOnFileData": null,
                          "card": {
                            "holderName": "Jane Doe",
                            "panFingerprint": "gdytrqm8gfrb2m8p44fyc79b",
                            "expirationMonth": 1,
                            "expirationYear": 2030,
                            "billTo": null,
                            "maskedNumber": "XXXX XXXX XXXX 0007",
                            "last4": "0007",
                            "bin": "400880",
                            "scheme": "Visa",
                            "brand": "Visa",
                            "fundingSource": "credit",
                            "issuingBank": "THE ROYAL BANK OF SCOTLAND PLC",
                            "issuingCountry": "GBR",
                            "issuingCurrency": "GBP",
                            "isDebit": "false",
                            "isCorporate": "false",
                            "isDccAllowed": "true"
                          },
                          "createdBy": null,
                          "isHeldForReview": false,
                          "doCapture": null,
                          "doSendReceipt": false,
                          "isAuthorized": true,
                          "authorizationCode": null,
                          "verificationResults": null,
                          "state": "captured",
                          "batch": null,
                          "customFields": null,
                          "relatedTransactions": [],
                          "failures": [],
                          "history": [
                            {
                              "state": "authorized",
                              "modifiedAt": "2019-04-22T18:52:26.431Z"
                            }
                          ]
                        },
                        {
                          "href": "https://api.eu.convergepay.com/transactions/3rdtf3y7h99tjcfkjwqxxhr4",
                          "id": "3rdtf3y7h99tjcfkjwqxxhr4",
                          "createdAt": "2019-04-22T18:52:25.256Z",
                          "modifiedAt": "2019-04-22T18:52:25.786Z",
                          "type": "sale",
                          "merchant": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                          "processorAccount": "https://api.eu.convergepay.com/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                          "total": {
                            "amount": "100.00",
                            "currencyCode": "GBP"
                          },
                          "totalRefunded": {
                            "amount": "75.00",
                            "currencyCode": "GBP"
                          },
                          "parentTransaction": null,
                          "description": null,
                          "shopperStatement": null,
                          "customReference": null,
                          "shopperReference": null,
                          "processorReference": "HAS88EHR7IL",
                          "issuerReference": "919112323457227",
                          "orderReference": null,
                          "shopperInteraction": "telephoneOrder",
                          "shipTo": null,
                          "shopperEmailAddress": null,
                          "shopperIpAddress": null,
                          "shopperLanguageTag": null,
                          "shopperTimeZone": null,
                          "order": null,
                          "card": {
                            "holderName": "Jane Doe",
                            "panFingerprint": "gdytrqm8gfrb2m8p44fyc79b",
                            "expirationMonth": 1,
                            "expirationYear": 2030,
                            "billTo": null,
                            "maskedNumber": "XXXX XXXX XXXX 0007",
                            "last4": "0007",
                            "bin": "400880",
                            "scheme": "Visa",
                            "brand": "Visa",
                            "fundingSource": "credit",
                            "issuingBank": "THE ROYAL BANK OF SCOTLAND PLC",
                            "issuingCountry": "GBR",
                            "issuingCurrency": "GBP",
                            "isDebit": "false",
                            "isCorporate": "false",
                            "isDccAllowed": "true"
                          },
                          "createdBy": null,
                          "isHeldForReview": false,
                          "doCapture": true,
                          "doSendReceipt": false,
                          "isAuthorized": true,
                          "authorizationCode": "405232",
                          "verificationResults": {
                            "name": "unsupported",
                            "securityCode": "unprovided",
                            "addressStreet": "unprovided",
                            "addressPostalCode": "unprovided"
                          },
                          "state": "captured",
                          "batch": null,
                          "customFields": null,
                          "relatedTransactions": [
                            "https://api.eu.convergepay.com/transactions/cwdgw42hd6vfy3pt89xk2j3v"
                          ],
                          "failures": [],
                          "history": [
                            {
                              "state": "authorized",
                              "modifiedAt": "2019-04-22T18:52:25.256Z"
                            }
                          ]
                        },
                        {
                          "href": "https://api.eu.convergepay.com/transactions/c2fkpt276g6rf6pwmfxmbyjf",
                          "id": "c2fkpt276g6rf6pwmfxmbyjf",
                          "createdAt": "2019-04-22T18:52:24.256Z",
                          "modifiedAt": "2019-04-22T18:52:24.429Z",
                          "type": "refund",
                          "merchant": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                          "processorAccount": "https://api.eu.convergepay.com/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                          "total": {
                            "amount": "100.00",
                            "currencyCode": "GBP"
                          },
                          "totalRefunded": null,
                          "parentTransaction": "https://api.eu.convergepay.com/transactions/bdt22gvkywfh6fd492xhd2j7",
                          "description": null,
                          "shopperStatement": null,
                          "customReference": null,
                          "shopperReference": null,
                          "processorReference": null,
                          "issuerReference": null,
                          "orderReference": null,
                          "shopperInteraction": "ecommerce",
                          "shipTo": null,
                          "shopperEmailAddress": null,
                          "shopperIpAddress": null,
                          "shopperLanguageTag": null,
                          "shopperTimeZone": null,
                          "order": null,
                          "card": {
                            "holderName": "Jane Doe",
                            "panFingerprint": "3rkd4vvcgywtvdcj7ch4mptm",
                            "expirationMonth": 1,
                            "expirationYear": 2030,
                            "billTo": null,
                            "maskedNumber": "XXXX XXXX XXXX 0007",
                            "last4": "0007",
                            "bin": "400880",
                            "scheme": "Visa",
                            "brand": "Visa",
                            "fundingSource": "credit",
                            "issuingBank": "THE ROYAL BANK OF SCOTLAND PLC",
                            "issuingCountry": "GBR",
                            "issuingCurrency": "GBP",
                            "isDebit": "false",
                            "isCorporate": "false",
                            "isDccAllowed": "true"
                          },
                          "createdBy": null,
                          "isHeldForReview": false,
                          "doCapture": null,
                          "doSendReceipt": false,
                          "isAuthorized": true,
                          "authorizationCode": null,
                          "verificationResults": null,
                          "state": "captured",
                          "batch": null,
                          "customFields": null,
                          "relatedTransactions": [],
                          "failures": [],
                          "history": [
                            {
                              "state": "authorized",
                              "modifiedAt": "2019-04-22T18:52:24.256Z"
                            }
                          ]
                        }
                      ],
                      "size": 3
                    }
                  },
                  "ListTransactionswithFilters": {
                    "summary": "List transactions with filters",
                    "description": "Shows how to list a resource using a few filters.",
                    "value": {
                      "href": "https://api.eu.convergepay.com/transactions?limit=2&filter=type_eq_refund&filter=createdAt_gt_2019",
                      "first": "https://api.eu.convergepay.com/transactions?limit=2&filter=type_eq_refund&filter=createdAt_gt_2019",
                      "next": "https://api.eu.convergepay.com/transactions?pageToken=MCwy&limit=2&filter=type_eq_refund&filter=createdAt_gt_2019",
                      "pageToken": null,
                      "nextPageToken": "MCwy",
                      "limit": 2,
                      "items": [
                        {
                          "href": "https://api.eu.convergepay.com/transactions/cwdgw42hd6vfy3pt89xk2j3v",
                          "id": "cwdgw42hd6vfy3pt89xk2j3v",
                          "createdAt": "2019-04-22T18:52:26.431Z",
                          "modifiedAt": "2019-04-22T18:52:26.597Z",
                          "type": "refund",
                          "merchant": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                          "processorAccount": "https://api.eu.convergepay.com/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                          "total": {
                            "amount": "75.00",
                            "currencyCode": "GBP"
                          },
                          "totalRefunded": null,
                          "parentTransaction": "https://api.eu.convergepay.com/transactions/3rdtf3y7h99tjcfkjwqxxhr4",
                          "description": null,
                          "shopperStatement": null,
                          "customReference": null,
                          "shopperReference": null,
                          "processorReference": null,
                          "issuerReference": null,
                          "orderReference": null,
                          "shopperInteraction": "ecommerce",
                          "shipTo": null,
                          "shopperEmailAddress": null,
                          "shopperIpAddress": null,
                          "shopperLanguageTag": null,
                          "shopperTimeZone": null,
                          "order": null,
                          "card": {
                            "holderName": "Jane Doe",
                            "panFingerprint": "gdytrqm8gfrb2m8p44fyc79b",
                            "expirationMonth": 1,
                            "expirationYear": 2030,
                            "billTo": null,
                            "maskedNumber": "XXXX XXXX XXXX 0007",
                            "last4": "0007",
                            "bin": "400880",
                            "scheme": "Visa",
                            "brand": "Visa",
                            "fundingSource": "credit",
                            "issuingBank": "THE ROYAL BANK OF SCOTLAND PLC",
                            "issuingCountry": "GBR",
                            "issuingCurrency": "GBP",
                            "isDebit": "false",
                            "isCorporate": "false",
                            "isDccAllowed": "true"
                          },
                          "createdBy": null,
                          "isHeldForReview": false,
                          "doCapture": null,
                          "doSendReceipt": false,
                          "isAuthorized": true,
                          "authorizationCode": null,
                          "verificationResults": null,
                          "state": "captured",
                          "batch": null,
                          "customFields": null,
                          "relatedTransactions": [],
                          "failures": [],
                          "history": [
                            {
                              "state": "authorized",
                              "modifiedAt": "2019-04-22T18:52:26.431Z"
                            }
                          ]
                        },
                        {
                          "href": "https://api.eu.convergepay.com/transactions/c2fkpt276g6rf6pwmfxmbyjf",
                          "id": "c2fkpt276g6rf6pwmfxmbyjf",
                          "createdAt": "2019-04-22T18:52:24.256Z",
                          "modifiedAt": "2019-04-22T18:52:24.429Z",
                          "type": "refund",
                          "merchant": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                          "processorAccount": "https://api.eu.convergepay.com/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                          "total": {
                            "amount": "100.00",
                            "currencyCode": "GBP"
                          },
                          "totalRefunded": null,
                          "parentTransaction": "https://api.eu.convergepay.com/transactions/bdt22gvkywfh6fd492xhd2j7",
                          "description": null,
                          "shopperStatement": null,
                          "customReference": null,
                          "shopperReference": null,
                          "processorReference": null,
                          "issuerReference": null,
                          "orderReference": null,
                          "shopperInteraction": "ecommerce",
                          "shipTo": null,
                          "shopperEmailAddress": null,
                          "shopperIpAddress": null,
                          "shopperLanguageTag": null,
                          "shopperTimeZone": null,
                          "order": null,
                          "card": {
                            "holderName": "Jane Doe",
                            "panFingerprint": "3rkd4vvcgywtvdcj7ch4mptm",
                            "expirationMonth": 1,
                            "expirationYear": 2030,
                            "billTo": null,
                            "maskedNumber": "XXXX XXXX XXXX 0007",
                            "last4": "0007",
                            "bin": "400880",
                            "scheme": "Visa",
                            "brand": "Visa",
                            "fundingSource": "credit",
                            "issuingBank": "THE ROYAL BANK OF SCOTLAND PLC",
                            "issuingCountry": "GBR",
                            "issuingCurrency": "GBP",
                            "isDebit": "false",
                            "isCorporate": "false",
                            "isDccAllowed": "true"
                          },
                          "createdBy": null,
                          "isHeldForReview": false,
                          "doCapture": null,
                          "doSendReceipt": false,
                          "isAuthorized": true,
                          "authorizationCode": null,
                          "verificationResults": null,
                          "state": "captured",
                          "batch": null,
                          "customFields": null,
                          "relatedTransactions": [],
                          "failures": [],
                          "history": [
                            {
                              "state": "authorized",
                              "modifiedAt": "2019-04-22T18:52:24.256Z"
                            }
                          ]
                        }
                      ],
                      "size": 2
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Transaction [Resource ID](#section/Overview/Values).",
          "example": "c2fkpt276g6rf6pwmfxmbyjf",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve Transaction",
        "description": "Retrieve a Transaction by ID.",
        "tags": [
          "Transactions"
        ],
        "operationId": "RetrieveTransaction",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                },
                "examples": {
                  "retrieverefundedsaletransaction": {
                    "summary": "Retrieve refunded 'sale' transaction",
                    "description": "Retrieve refunded 'sale' transaction",
                    "value": {
                      "href": "https://api.eu.convergepay.com/transactions/3rdtf3y7h99tjcfkjwqxxhr4",
                      "id": "3rdtf3y7h99tjcfkjwqxxhr4",
                      "createdAt": "2019-04-22T18:52:25.256Z",
                      "modifiedAt": "2019-04-22T18:52:25.786Z",
                      "type": "sale",
                      "merchant": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                      "processorAccount": "https://api.eu.convergepay.com/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                      "total": {
                        "amount": "100.00",
                        "currencyCode": "GBP"
                      },
                      "totalRefunded": {
                        "amount": "75.00",
                        "currencyCode": "GBP"
                      },
                      "parentTransaction": null,
                      "description": null,
                      "shopperStatement": null,
                      "customReference": null,
                      "shopperReference": null,
                      "processorReference": "HAS88EHR7IL",
                      "issuerReference": "919112323457227",
                      "orderReference": null,
                      "shopperInteraction": "telephoneOrder",
                      "shipTo": null,
                      "shopperEmailAddress": null,
                      "shopperIpAddress": null,
                      "shopperLanguageTag": null,
                      "shopperTimeZone": null,
                      "order": null,
                      "subscription": null,
                      "credentialOnFileType": "none",
                      "credentialOnFileData": null,
                      "card": {
                        "holderName": "Jane Doe",
                        "panFingerprint": "gdytrqm8gfrb2m8p44fyc79b",
                        "expirationMonth": 1,
                        "expirationYear": 2030,
                        "billTo": null,
                        "maskedNumber": "XXXX XXXX XXXX 0007",
                        "last4": "0007",
                        "bin": "400880",
                        "scheme": "Visa",
                        "brand": "Visa",
                        "fundingSource": "credit",
                        "issuingBank": "THE ROYAL BANK OF SCOTLAND PLC",
                        "issuingCountry": "GBR",
                        "issuingCurrency": "GBP",
                        "isDebit": "false",
                        "isCorporate": "false",
                        "isDccAllowed": "true"
                      },
                      "createdBy": null,
                      "isHeldForReview": false,
                      "doCapture": true,
                      "doSendReceipt": false,
                      "isAuthorized": true,
                      "authorizationCode": "405232",
                      "verificationResults": {
                        "name": "unsupported",
                        "securityCode": "unprovided",
                        "addressStreet": "unprovided",
                        "addressPostalCode": "unprovided"
                      },
                      "state": "captured",
                      "batch": null,
                      "customFields": null,
                      "relatedTransactions": [
                        "https://api.eu.convergepay.com/transactions/cwdgw42hd6vfy3pt89xk2j3v"
                      ],
                      "failures": [],
                      "history": [
                        {
                          "state": "authorized",
                          "modifiedAt": "2019-04-22T18:52:25.256Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Update Transaction",
        "description": "Overwrite an existing Transaction.",
        "tags": [
          "Transactions"
        ],
        "operationId": "UpdateTransaction",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (Transaction)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              },
              "examples": {
                "updatecapturesaletransaction": {
                  "summary": "Update and capture 'sale' transaction",
                  "description": "Shows how to update a transaction, in this case to allow it to be captured.",
                  "value": {
                    "doCapture": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                },
                "examples": {
                  "updatecapturesaletransaction": {
                    "summary": "Update and capture 'sale' transaction",
                    "value": {
                      "href": "https://api.eu.convergepay.com/transactions/bdf87mqhtj4rjpvhy49cvdpp",
                      "id": "bdf87mqhtj4rjpvhy49cvdpp",
                      "createdAt": "2019-04-22T18:52:17.990Z",
                      "modifiedAt": "2019-04-22T18:52:17.990Z",
                      "type": "sale",
                      "merchant": "https://api.eu.convergepay.com/merchants/XrDXRBh9YHxwqQTj2Cmq7j49",
                      "processorAccount": "https://api.eu.convergepay.com/processor-accounts/KmvmfQJpCBJpXHyP2kgrK2hD",
                      "total": {
                        "amount": "6.00",
                        "currencyCode": "EUR"
                      },
                      "totalRefunded": null,
                      "parentTransaction": null,
                      "description": null,
                      "shopperStatement": null,
                      "customReference": null,
                      "shopperReference": null,
                      "processorReference": "HARJSDUEPE6",
                      "issuerReference": "919112156106790",
                      "orderReference": null,
                      "shopperInteraction": "ecommerce",
                      "shipTo": null,
                      "shopperEmailAddress": null,
                      "shopperIpAddress": null,
                      "shopperLanguageTag": null,
                      "shopperTimeZone": null,
                      "order": null,
                      "subscription": null,
                      "credentialOnFileType": "none",
                      "credentialOnFileData": null,
                      "card": {
                        "holderName": "Ela Von",
                        "panFingerprint": "gdytrqm8gfrb2m8p44fyc79b",
                        "expirationMonth": 1,
                        "expirationYear": 2020,
                        "billTo": {
                          "fullName": "Ela Von",
                          "company": "Company",
                          "street1": "2 Concourse Parkway",
                          "street2": "Suite A",
                          "city": "Atlanta",
                          "region": "GA",
                          "postalCode": "30328",
                          "countryCode": "USA",
                          "primaryPhone": "+1 678-731-5000",
                          "alternatePhone": "+1 678-731-5001",
                          "fax": "+1 678-731-5002",
                          "email": "noreply@elavon.com"
                        },
                        "maskedNumber": "XXXXXXXXXXXX0007",
                        "last4": "0007",
                        "bin": "400880",
                        "scheme": "Visa",
                        "brand": "Visa",
                        "fundingSource": "credit",
                        "issuingBank": "THE ROYAL BANK OF SCOTLAND PLC",
                        "issuingCountry": "GBR",
                        "issuingCurrency": "GBP",
                        "isDebit": "false",
                        "isCorporate": "false",
                        "isDccAllowed": "true"
                      },
                      "createdBy": null,
                      "isHeldForReview": false,
                      "doCapture": true,
                      "doSendReceipt": false,
                      "isAuthorized": true,
                      "authorizationCode": "405225",
                      "verificationResults": {
                        "name": "unsupported",
                        "securityCode": "matched",
                        "addressStreet": "matched",
                        "addressPostalCode": "matched"
                      },
                      "state": "authorized",
                      "batch": null,
                      "customFields": null,
                      "relatedTransactions": [],
                      "failures": [],
                      "history": []
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/transactions/{id}/email-receipt-requests": {
      "post": {
        "summary": "Create email receipt request",
        "description": "Create email receipt request for Transaction.",
        "tags": [
          "Transactions"
        ],
        "operationId": "CreateEmailReceiptRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (Transaction)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailReceiptRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailReceiptRequest"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/transactions/{id}/total-adjustments": {
      "get": {
        "summary": "Retrieve Total Adjustments",
        "description": "Retrieve all adjustments",
        "operationId": "RetrieveTotalAdjustments",
        "tags": [
          "Total Adjustments",
          "Transactions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/pageToken"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedListOfTotalAdjustments"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    },
    "/total-adjustments": {
      "post": {
        "summary": "Create total adjustment",
        "description": "Adjust the transaction's total/tip amount.",
        "tags": [
          "Total Adjustments"
        ],
        "operationId": "CreateTotalAdjustment",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "object (Transaction)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TotalAdjustmentInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Location": {
                "$ref": "#/components/headers/Location"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TotalAdjustment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "411": {
            "$ref": "#/components/responses/411"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "415": {
            "$ref": "#/components/responses/415"
          }
        }
      }
    },
    "/total-adjustments/{id}": {
      "get": {
        "summary": "Retrieve Total Adjustment details",
        "description": "Retrieve TotalAdjustment resource by ID.",
        "operationId": "RetrieveTotalAdjustment",
        "tags": [
          "Total Adjustments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Accept-Version"
          },
          {
            "name": "id",
            "in": "path",
            "description": "TotalAdjustment [Resource ID](#section/Overview/Values)",
            "required": true,
            "example": "rof2l4A7lSwO90w4agatIzIM",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Version": {
                "$ref": "#/components/headers/Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TotalAdjustment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          }
        }
      }
    }
  }
}